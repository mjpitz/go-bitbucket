// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseCommit base commit
//
// swagger:model base_commit
type BaseCommit struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// author
	Author *Author `json:"author,omitempty"`

	// date
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// hash
	// Pattern: [0-9a-f]{7,}?
	Hash string `json:"hash,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// parents
	// Min Items: 0
	Parents []*BaseCommit `json:"parents"`

	// summary
	Summary *BaseCommitAO1Summary `json:"summary,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *BaseCommit) Type() string {
	return "base_commit"
}

// SetType sets the type of this subtype
func (m *BaseCommit) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *BaseCommit) UnmarshalJSON(raw []byte) error {
	var data struct {

		// author
		Author *Author `json:"author,omitempty"`

		// date
		// Format: date-time
		Date strfmt.DateTime `json:"date,omitempty"`

		// hash
		// Pattern: [0-9a-f]{7,}?
		Hash string `json:"hash,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// parents
		// Min Items: 0
		Parents []*BaseCommit `json:"parents"`

		// summary
		Summary *BaseCommitAO1Summary `json:"summary,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result BaseCommit

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Author = data.Author
	result.Date = data.Date
	result.Hash = data.Hash
	result.Message = data.Message
	result.Parents = data.Parents
	result.Summary = data.Summary

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m BaseCommit) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// author
		Author *Author `json:"author,omitempty"`

		// date
		// Format: date-time
		Date strfmt.DateTime `json:"date,omitempty"`

		// hash
		// Pattern: [0-9a-f]{7,}?
		Hash string `json:"hash,omitempty"`

		// message
		Message string `json:"message,omitempty"`

		// parents
		// Min Items: 0
		Parents []*BaseCommit `json:"parents"`

		// summary
		Summary *BaseCommitAO1Summary `json:"summary,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		Author: m.Author,

		Date: m.Date,

		Hash: m.Hash,

		Message: m.Message,

		Parents: m.Parents,

		Summary: m.Summary,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this base commit
func (m *BaseCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseCommit) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {
		if err := m.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author")
			}
			return err
		}
	}

	return nil
}

func (m *BaseCommit) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BaseCommit) validateHash(formats strfmt.Registry) error {

	if swag.IsZero(m.Hash) { // not required
		return nil
	}

	if err := validate.Pattern("hash", "body", string(m.Hash), `[0-9a-f]{7,}?`); err != nil {
		return err
	}

	return nil
}

func (m *BaseCommit) validateParents(formats strfmt.Registry) error {

	if swag.IsZero(m.Parents) { // not required
		return nil
	}

	iParentsSize := int64(len(m.Parents))

	if err := validate.MinItems("parents", "body", iParentsSize, 0); err != nil {
		return err
	}

	for i := 0; i < len(m.Parents); i++ {
		if swag.IsZero(m.Parents[i]) { // not required
			continue
		}

		if m.Parents[i] != nil {
			if err := m.Parents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BaseCommit) validateSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseCommit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseCommit) UnmarshalBinary(b []byte) error {
	var res BaseCommit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BaseCommitAO1Summary base commit a o1 summary
//
// swagger:model BaseCommitAO1Summary
type BaseCommitAO1Summary struct {

	// The user's content rendered as HTML.
	HTML string `json:"html,omitempty"`

	// The type of markup language the raw content is to be interpreted in.
	// Enum: [markdown creole plaintext]
	Markup string `json:"markup,omitempty"`

	// The text as it was typed by a user.
	Raw string `json:"raw,omitempty"`
}

// Validate validates this base commit a o1 summary
func (m *BaseCommitAO1Summary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarkup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var baseCommitAO1SummaryTypeMarkupPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["markdown","creole","plaintext"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseCommitAO1SummaryTypeMarkupPropEnum = append(baseCommitAO1SummaryTypeMarkupPropEnum, v)
	}
}

const (

	// BaseCommitAO1SummaryMarkupMarkdown captures enum value "markdown"
	BaseCommitAO1SummaryMarkupMarkdown string = "markdown"

	// BaseCommitAO1SummaryMarkupCreole captures enum value "creole"
	BaseCommitAO1SummaryMarkupCreole string = "creole"

	// BaseCommitAO1SummaryMarkupPlaintext captures enum value "plaintext"
	BaseCommitAO1SummaryMarkupPlaintext string = "plaintext"
)

// prop value enum
func (m *BaseCommitAO1Summary) validateMarkupEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, baseCommitAO1SummaryTypeMarkupPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BaseCommitAO1Summary) validateMarkup(formats strfmt.Registry) error {

	if swag.IsZero(m.Markup) { // not required
		return nil
	}

	// value enum
	if err := m.validateMarkupEnum("summary"+"."+"markup", "body", m.Markup); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseCommitAO1Summary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseCommitAO1Summary) UnmarshalBinary(b []byte) error {
	var res BaseCommitAO1Summary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
