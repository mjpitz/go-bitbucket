// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Account account
//
// swagger:model account
type Account struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// The status of the account. Currently the only possible value is "active", but more values may be added in the future.
	AccountStatus string `json:"account_status,omitempty"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// display name
	DisplayName string `json:"display_name,omitempty"`

	// has 2fa enabled
	Has2faEnabled bool `json:"has_2fa_enabled,omitempty"`

	// links
	Links *AccountAO1Links `json:"links,omitempty"`

	// Account name defined by the owner. Should be used instead of the "username" field. Note that "nickname" cannot be used in place of "username" in URLs and queries, as "nickname" is not guaranteed to be unique.
	Nickname string `json:"nickname,omitempty"`

	// username
	// Pattern: ^[a-zA-Z0-9_\-]+$
	Username string `json:"username,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *Account) Type() string {
	return "account"
}

// SetType sets the type of this subtype
func (m *Account) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Account) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The status of the account. Currently the only possible value is "active", but more values may be added in the future.
		AccountStatus string `json:"account_status,omitempty"`

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// display name
		DisplayName string `json:"display_name,omitempty"`

		// has 2fa enabled
		Has2faEnabled bool `json:"has_2fa_enabled,omitempty"`

		// links
		Links *AccountAO1Links `json:"links,omitempty"`

		// Account name defined by the owner. Should be used instead of the "username" field. Note that "nickname" cannot be used in place of "username" in URLs and queries, as "nickname" is not guaranteed to be unique.
		Nickname string `json:"nickname,omitempty"`

		// username
		// Pattern: ^[a-zA-Z0-9_\-]+$
		Username string `json:"username,omitempty"`

		// uuid
		UUID string `json:"uuid,omitempty"`

		// website
		Website string `json:"website,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result Account

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.AccountStatus = data.AccountStatus
	result.CreatedOn = data.CreatedOn
	result.DisplayName = data.DisplayName
	result.Has2faEnabled = data.Has2faEnabled
	result.Links = data.Links
	result.Nickname = data.Nickname
	result.Username = data.Username
	result.UUID = data.UUID
	result.Website = data.Website

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Account) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The status of the account. Currently the only possible value is "active", but more values may be added in the future.
		AccountStatus string `json:"account_status,omitempty"`

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// display name
		DisplayName string `json:"display_name,omitempty"`

		// has 2fa enabled
		Has2faEnabled bool `json:"has_2fa_enabled,omitempty"`

		// links
		Links *AccountAO1Links `json:"links,omitempty"`

		// Account name defined by the owner. Should be used instead of the "username" field. Note that "nickname" cannot be used in place of "username" in URLs and queries, as "nickname" is not guaranteed to be unique.
		Nickname string `json:"nickname,omitempty"`

		// username
		// Pattern: ^[a-zA-Z0-9_\-]+$
		Username string `json:"username,omitempty"`

		// uuid
		UUID string `json:"uuid,omitempty"`

		// website
		Website string `json:"website,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		AccountStatus: m.AccountStatus,

		CreatedOn: m.CreatedOn,

		DisplayName: m.DisplayName,

		Has2faEnabled: m.Has2faEnabled,

		Links: m.Links,

		Nickname: m.Nickname,

		Username: m.Username,

		UUID: m.UUID,

		Website: m.Website,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this account
func (m *Account) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Account) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Account) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Account) validateUsername(formats strfmt.Registry) error {

	if swag.IsZero(m.Username) { // not required
		return nil
	}

	if err := validate.Pattern("username", "body", string(m.Username), `^[a-zA-Z0-9_\-]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Account) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Account) UnmarshalBinary(b []byte) error {
	var res Account
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountAO1Links account a o1 links
//
// swagger:model AccountAO1Links
type AccountAO1Links struct {

	// avatar
	Avatar *AccountAO1LinksAvatar `json:"avatar,omitempty"`

	// followers
	Followers *AccountAO1LinksFollowers `json:"followers,omitempty"`

	// following
	Following *AccountAO1LinksFollowing `json:"following,omitempty"`

	// html
	HTML *AccountAO1LinksHTML `json:"html,omitempty"`

	// repositories
	Repositories *AccountAO1LinksRepositories `json:"repositories,omitempty"`

	// self
	Self *AccountAO1LinksSelf `json:"self,omitempty"`
}

// Validate validates this account a o1 links
func (m *AccountAO1Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTML(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAO1Links) validateAvatar(formats strfmt.Registry) error {

	if swag.IsZero(m.Avatar) { // not required
		return nil
	}

	if m.Avatar != nil {
		if err := m.Avatar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "avatar")
			}
			return err
		}
	}

	return nil
}

func (m *AccountAO1Links) validateFollowers(formats strfmt.Registry) error {

	if swag.IsZero(m.Followers) { // not required
		return nil
	}

	if m.Followers != nil {
		if err := m.Followers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "followers")
			}
			return err
		}
	}

	return nil
}

func (m *AccountAO1Links) validateFollowing(formats strfmt.Registry) error {

	if swag.IsZero(m.Following) { // not required
		return nil
	}

	if m.Following != nil {
		if err := m.Following.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "following")
			}
			return err
		}
	}

	return nil
}

func (m *AccountAO1Links) validateHTML(formats strfmt.Registry) error {

	if swag.IsZero(m.HTML) { // not required
		return nil
	}

	if m.HTML != nil {
		if err := m.HTML.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "html")
			}
			return err
		}
	}

	return nil
}

func (m *AccountAO1Links) validateRepositories(formats strfmt.Registry) error {

	if swag.IsZero(m.Repositories) { // not required
		return nil
	}

	if m.Repositories != nil {
		if err := m.Repositories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "repositories")
			}
			return err
		}
	}

	return nil
}

func (m *AccountAO1Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAO1Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAO1Links) UnmarshalBinary(b []byte) error {
	var res AccountAO1Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountAO1LinksAvatar account a o1 links avatar
//
// swagger:model AccountAO1LinksAvatar
type AccountAO1LinksAvatar struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this account a o1 links avatar
func (m *AccountAO1LinksAvatar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAO1LinksAvatar) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"avatar"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAO1LinksAvatar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAO1LinksAvatar) UnmarshalBinary(b []byte) error {
	var res AccountAO1LinksAvatar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountAO1LinksFollowers account a o1 links followers
//
// swagger:model AccountAO1LinksFollowers
type AccountAO1LinksFollowers struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this account a o1 links followers
func (m *AccountAO1LinksFollowers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAO1LinksFollowers) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"followers"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAO1LinksFollowers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAO1LinksFollowers) UnmarshalBinary(b []byte) error {
	var res AccountAO1LinksFollowers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountAO1LinksFollowing account a o1 links following
//
// swagger:model AccountAO1LinksFollowing
type AccountAO1LinksFollowing struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this account a o1 links following
func (m *AccountAO1LinksFollowing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAO1LinksFollowing) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"following"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAO1LinksFollowing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAO1LinksFollowing) UnmarshalBinary(b []byte) error {
	var res AccountAO1LinksFollowing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountAO1LinksHTML account a o1 links HTML
//
// swagger:model AccountAO1LinksHTML
type AccountAO1LinksHTML struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this account a o1 links HTML
func (m *AccountAO1LinksHTML) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAO1LinksHTML) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"html"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAO1LinksHTML) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAO1LinksHTML) UnmarshalBinary(b []byte) error {
	var res AccountAO1LinksHTML
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountAO1LinksRepositories account a o1 links repositories
//
// swagger:model AccountAO1LinksRepositories
type AccountAO1LinksRepositories struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this account a o1 links repositories
func (m *AccountAO1LinksRepositories) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAO1LinksRepositories) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"repositories"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAO1LinksRepositories) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAO1LinksRepositories) UnmarshalBinary(b []byte) error {
	var res AccountAO1LinksRepositories
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountAO1LinksSelf account a o1 links self
//
// swagger:model AccountAO1LinksSelf
type AccountAO1LinksSelf struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this account a o1 links self
func (m *AccountAO1LinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAO1LinksSelf) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAO1LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAO1LinksSelf) UnmarshalBinary(b []byte) error {
	var res AccountAO1LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
