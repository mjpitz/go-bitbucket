// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Commitstatus commitstatus
//
// swagger:model commitstatus
type Commitstatus struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// A description of the build (e.g. "Unit tests in Bamboo")
	Description string `json:"description,omitempty"`

	// An identifier for the status that's unique to
	//         its type (current "build" is the only supported type) and the vendor,
	//         e.g. BB-DEPLOY
	Key string `json:"key,omitempty"`

	// links
	Links *CommitstatusAO1Links `json:"links,omitempty"`

	// An identifier for the build itself, e.g. BB-DEPLOY-1
	Name string `json:"name,omitempty"`

	//
	// The name of the ref that pointed to this commit at the time the status
	// object was created. Note that this the ref may since have moved off of
	// the commit. This optional field can be useful for build systems whose
	// build triggers and configuration are branch-dependent (e.g. a Pipeline
	// build).
	// It is legitimate for this field to not be set, or even apply (e.g. a
	// static linting job).
	Refname string `json:"refname,omitempty"`

	// Provides some indication of the status of this commit
	// Enum: [SUCCESSFUL FAILED INPROGRESS STOPPED]
	State string `json:"state,omitempty"`

	// updated on
	// Format: date-time
	UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

	// A URL linking back to the vendor or build system, for providing more information about whatever process produced this status. Accepts context variables `repository` and `commit` that Bitbucket will evaluate at runtime whenever at runtime. For example, one could use https://foo.com/builds/{repository.full_name} which Bitbucket will turn into https://foo.com/builds/foo/bar at render time.
	URL string `json:"url,omitempty"`

	// The commit status' id.
	UUID string `json:"uuid,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *Commitstatus) Type() string {
	return "commitstatus"
}

// SetType sets the type of this subtype
func (m *Commitstatus) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Commitstatus) UnmarshalJSON(raw []byte) error {
	var data struct {

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// A description of the build (e.g. "Unit tests in Bamboo")
		Description string `json:"description,omitempty"`

		// An identifier for the status that's unique to
		//         its type (current "build" is the only supported type) and the vendor,
		//         e.g. BB-DEPLOY
		Key string `json:"key,omitempty"`

		// links
		Links *CommitstatusAO1Links `json:"links,omitempty"`

		// An identifier for the build itself, e.g. BB-DEPLOY-1
		Name string `json:"name,omitempty"`

		//
		// The name of the ref that pointed to this commit at the time the status
		// object was created. Note that this the ref may since have moved off of
		// the commit. This optional field can be useful for build systems whose
		// build triggers and configuration are branch-dependent (e.g. a Pipeline
		// build).
		// It is legitimate for this field to not be set, or even apply (e.g. a
		// static linting job).
		Refname string `json:"refname,omitempty"`

		// Provides some indication of the status of this commit
		// Enum: [SUCCESSFUL FAILED INPROGRESS STOPPED]
		State string `json:"state,omitempty"`

		// updated on
		// Format: date-time
		UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

		// A URL linking back to the vendor or build system, for providing more information about whatever process produced this status. Accepts context variables `repository` and `commit` that Bitbucket will evaluate at runtime whenever at runtime. For example, one could use https://foo.com/builds/{repository.full_name} which Bitbucket will turn into https://foo.com/builds/foo/bar at render time.
		URL string `json:"url,omitempty"`

		// The commit status' id.
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result Commitstatus

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.CreatedOn = data.CreatedOn
	result.Description = data.Description
	result.Key = data.Key
	result.Links = data.Links
	result.Name = data.Name
	result.Refname = data.Refname
	result.State = data.State
	result.UpdatedOn = data.UpdatedOn
	result.URL = data.URL
	result.UUID = data.UUID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Commitstatus) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// A description of the build (e.g. "Unit tests in Bamboo")
		Description string `json:"description,omitempty"`

		// An identifier for the status that's unique to
		//         its type (current "build" is the only supported type) and the vendor,
		//         e.g. BB-DEPLOY
		Key string `json:"key,omitempty"`

		// links
		Links *CommitstatusAO1Links `json:"links,omitempty"`

		// An identifier for the build itself, e.g. BB-DEPLOY-1
		Name string `json:"name,omitempty"`

		//
		// The name of the ref that pointed to this commit at the time the status
		// object was created. Note that this the ref may since have moved off of
		// the commit. This optional field can be useful for build systems whose
		// build triggers and configuration are branch-dependent (e.g. a Pipeline
		// build).
		// It is legitimate for this field to not be set, or even apply (e.g. a
		// static linting job).
		Refname string `json:"refname,omitempty"`

		// Provides some indication of the status of this commit
		// Enum: [SUCCESSFUL FAILED INPROGRESS STOPPED]
		State string `json:"state,omitempty"`

		// updated on
		// Format: date-time
		UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

		// A URL linking back to the vendor or build system, for providing more information about whatever process produced this status. Accepts context variables `repository` and `commit` that Bitbucket will evaluate at runtime whenever at runtime. For example, one could use https://foo.com/builds/{repository.full_name} which Bitbucket will turn into https://foo.com/builds/foo/bar at render time.
		URL string `json:"url,omitempty"`

		// The commit status' id.
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		CreatedOn: m.CreatedOn,

		Description: m.Description,

		Key: m.Key,

		Links: m.Links,

		Name: m.Name,

		Refname: m.Refname,

		State: m.State,

		UpdatedOn: m.UpdatedOn,

		URL: m.URL,

		UUID: m.UUID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this commitstatus
func (m *Commitstatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Commitstatus) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Commitstatus) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

var commitstatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESSFUL","FAILED","INPROGRESS","STOPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commitstatusTypeStatePropEnum = append(commitstatusTypeStatePropEnum, v)
	}
}

// property enum
func (m *Commitstatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commitstatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Commitstatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Commitstatus) validateUpdatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_on", "body", "date-time", m.UpdatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Commitstatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Commitstatus) UnmarshalBinary(b []byte) error {
	var res Commitstatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CommitstatusAO1Links commitstatus a o1 links
//
// swagger:model CommitstatusAO1Links
type CommitstatusAO1Links struct {

	// commit
	Commit *CommitstatusAO1LinksCommit `json:"commit,omitempty"`

	// self
	Self *CommitstatusAO1LinksSelf `json:"self,omitempty"`
}

// Validate validates this commitstatus a o1 links
func (m *CommitstatusAO1Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitstatusAO1Links) validateCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if m.Commit != nil {
		if err := m.Commit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "commit")
			}
			return err
		}
	}

	return nil
}

func (m *CommitstatusAO1Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommitstatusAO1Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitstatusAO1Links) UnmarshalBinary(b []byte) error {
	var res CommitstatusAO1Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CommitstatusAO1LinksCommit commitstatus a o1 links commit
//
// swagger:model CommitstatusAO1LinksCommit
type CommitstatusAO1LinksCommit struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this commitstatus a o1 links commit
func (m *CommitstatusAO1LinksCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitstatusAO1LinksCommit) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"commit"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommitstatusAO1LinksCommit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitstatusAO1LinksCommit) UnmarshalBinary(b []byte) error {
	var res CommitstatusAO1LinksCommit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CommitstatusAO1LinksSelf commitstatus a o1 links self
//
// swagger:model CommitstatusAO1LinksSelf
type CommitstatusAO1LinksSelf struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this commitstatus a o1 links self
func (m *CommitstatusAO1LinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitstatusAO1LinksSelf) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommitstatusAO1LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitstatusAO1LinksSelf) UnmarshalBinary(b []byte) error {
	var res CommitstatusAO1LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
