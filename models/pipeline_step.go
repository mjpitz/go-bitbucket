// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PipelineStep pipeline step
//
// swagger:model pipeline_step
type PipelineStep struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// The timestamp when the step execution was completed. This is not set if the step is still in progress.
	// Format: date-time
	CompletedOn strfmt.DateTime `json:"completed_on,omitempty"`

	// The Docker image used as the build container for the step.
	Image *PipelineImage `json:"image,omitempty"`

	// The list of build commands. These commands are executed in the build container.
	ScriptCommands []*PipelineCommand `json:"script_commands"`

	// The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.
	SetupCommands []*PipelineCommand `json:"setup_commands"`

	// The timestamp when the step execution was started. This is not set when the step hasn't executed yet.
	// Format: date-time
	StartedOn strfmt.DateTime `json:"started_on,omitempty"`

	// The current state of the step
	State *PipelineStepState `json:"state,omitempty"`

	// The UUID identifying the step.
	UUID string `json:"uuid,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *PipelineStep) Type() string {
	return "pipeline_step"
}

// SetType sets the type of this subtype
func (m *PipelineStep) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *PipelineStep) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The timestamp when the step execution was completed. This is not set if the step is still in progress.
		// Format: date-time
		CompletedOn strfmt.DateTime `json:"completed_on,omitempty"`

		// The Docker image used as the build container for the step.
		Image *PipelineImage `json:"image,omitempty"`

		// The list of build commands. These commands are executed in the build container.
		ScriptCommands []*PipelineCommand `json:"script_commands"`

		// The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.
		SetupCommands []*PipelineCommand `json:"setup_commands"`

		// The timestamp when the step execution was started. This is not set when the step hasn't executed yet.
		// Format: date-time
		StartedOn strfmt.DateTime `json:"started_on,omitempty"`

		// The current state of the step
		State *PipelineStepState `json:"state,omitempty"`

		// The UUID identifying the step.
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result PipelineStep

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.CompletedOn = data.CompletedOn
	result.Image = data.Image
	result.ScriptCommands = data.ScriptCommands
	result.SetupCommands = data.SetupCommands
	result.StartedOn = data.StartedOn
	result.State = data.State
	result.UUID = data.UUID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m PipelineStep) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The timestamp when the step execution was completed. This is not set if the step is still in progress.
		// Format: date-time
		CompletedOn strfmt.DateTime `json:"completed_on,omitempty"`

		// The Docker image used as the build container for the step.
		Image *PipelineImage `json:"image,omitempty"`

		// The list of build commands. These commands are executed in the build container.
		ScriptCommands []*PipelineCommand `json:"script_commands"`

		// The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.
		SetupCommands []*PipelineCommand `json:"setup_commands"`

		// The timestamp when the step execution was started. This is not set when the step hasn't executed yet.
		// Format: date-time
		StartedOn strfmt.DateTime `json:"started_on,omitempty"`

		// The current state of the step
		State *PipelineStepState `json:"state,omitempty"`

		// The UUID identifying the step.
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		CompletedOn: m.CompletedOn,

		Image: m.Image,

		ScriptCommands: m.ScriptCommands,

		SetupCommands: m.SetupCommands,

		StartedOn: m.StartedOn,

		State: m.State,

		UUID: m.UUID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this pipeline step
func (m *PipelineStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptCommands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetupCommands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineStep) validateCompletedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("completed_on", "body", "date-time", m.CompletedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PipelineStep) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineStep) validateScriptCommands(formats strfmt.Registry) error {

	if swag.IsZero(m.ScriptCommands) { // not required
		return nil
	}

	for i := 0; i < len(m.ScriptCommands); i++ {
		if swag.IsZero(m.ScriptCommands[i]) { // not required
			continue
		}

		if m.ScriptCommands[i] != nil {
			if err := m.ScriptCommands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("script_commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PipelineStep) validateSetupCommands(formats strfmt.Registry) error {

	if swag.IsZero(m.SetupCommands) { // not required
		return nil
	}

	for i := 0; i < len(m.SetupCommands); i++ {
		if swag.IsZero(m.SetupCommands[i]) { // not required
			continue
		}

		if m.SetupCommands[i] != nil {
			if err := m.SetupCommands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("setup_commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PipelineStep) validateStartedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("started_on", "body", "date-time", m.StartedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PipelineStep) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineStep) UnmarshalBinary(b []byte) error {
	var res PipelineStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
