// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PullrequestMergeParameters The metadata that describes a pull request merge.
//
// swagger:model pullrequest_merge_parameters
type PullrequestMergeParameters struct {

	// Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False
	CloseSourceBranch bool `json:"close_source_branch,omitempty"`

	// The merge strategy that will be used to merge the pull request.
	// Enum: [merge_commit squash fast_forward]
	MergeStrategy *string `json:"merge_strategy,omitempty"`

	// The commit message that will be used on the resulting commit.
	Message string `json:"message,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// pullrequest merge parameters additional properties
	PullrequestMergeParametersAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *PullrequestMergeParameters) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False
		CloseSourceBranch bool `json:"close_source_branch,omitempty"`

		// The merge strategy that will be used to merge the pull request.
		// Enum: [merge_commit squash fast_forward]
		MergeStrategy *string `json:"merge_strategy,omitempty"`

		// The commit message that will be used on the resulting commit.
		Message string `json:"message,omitempty"`

		// type
		// Required: true
		Type *string `json:"type"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv PullrequestMergeParameters

	rcv.CloseSourceBranch = stage1.CloseSourceBranch
	rcv.MergeStrategy = stage1.MergeStrategy
	rcv.Message = stage1.Message
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "close_source_branch")
	delete(stage2, "merge_strategy")
	delete(stage2, "message")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.PullrequestMergeParametersAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m PullrequestMergeParameters) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False
		CloseSourceBranch bool `json:"close_source_branch,omitempty"`

		// The merge strategy that will be used to merge the pull request.
		// Enum: [merge_commit squash fast_forward]
		MergeStrategy *string `json:"merge_strategy,omitempty"`

		// The commit message that will be used on the resulting commit.
		Message string `json:"message,omitempty"`

		// type
		// Required: true
		Type *string `json:"type"`
	}

	stage1.CloseSourceBranch = m.CloseSourceBranch
	stage1.MergeStrategy = m.MergeStrategy
	stage1.Message = m.Message
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.PullrequestMergeParametersAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.PullrequestMergeParametersAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this pullrequest merge parameters
func (m *PullrequestMergeParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMergeStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pullrequestMergeParametersTypeMergeStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["merge_commit","squash","fast_forward"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pullrequestMergeParametersTypeMergeStrategyPropEnum = append(pullrequestMergeParametersTypeMergeStrategyPropEnum, v)
	}
}

const (

	// PullrequestMergeParametersMergeStrategyMergeCommit captures enum value "merge_commit"
	PullrequestMergeParametersMergeStrategyMergeCommit string = "merge_commit"

	// PullrequestMergeParametersMergeStrategySquash captures enum value "squash"
	PullrequestMergeParametersMergeStrategySquash string = "squash"

	// PullrequestMergeParametersMergeStrategyFastForward captures enum value "fast_forward"
	PullrequestMergeParametersMergeStrategyFastForward string = "fast_forward"
)

// prop value enum
func (m *PullrequestMergeParameters) validateMergeStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pullrequestMergeParametersTypeMergeStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PullrequestMergeParameters) validateMergeStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.MergeStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateMergeStrategyEnum("merge_strategy", "body", *m.MergeStrategy); err != nil {
		return err
	}

	return nil
}

func (m *PullrequestMergeParameters) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PullrequestMergeParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullrequestMergeParameters) UnmarshalBinary(b []byte) error {
	var res PullrequestMergeParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
