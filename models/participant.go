// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Participant participant
//
// swagger:model participant
type Participant struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// approved
	Approved bool `json:"approved,omitempty"`

	// The ISO8601 timestamp of the participant's action. For approvers, this is the time of their approval. For commenters and pull request reviewers who are not approvers, this is the time they last commented, or null if they have not commented.
	// Format: date-time
	ParticipatedOn strfmt.DateTime `json:"participated_on,omitempty"`

	// role
	// Enum: [PARTICIPANT REVIEWER]
	Role string `json:"role,omitempty"`

	// user
	User *User `json:"user,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *Participant) Type() string {
	return "participant"
}

// SetType sets the type of this subtype
func (m *Participant) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Participant) UnmarshalJSON(raw []byte) error {
	var data struct {

		// approved
		Approved bool `json:"approved,omitempty"`

		// The ISO8601 timestamp of the participant's action. For approvers, this is the time of their approval. For commenters and pull request reviewers who are not approvers, this is the time they last commented, or null if they have not commented.
		// Format: date-time
		ParticipatedOn strfmt.DateTime `json:"participated_on,omitempty"`

		// role
		// Enum: [PARTICIPANT REVIEWER]
		Role string `json:"role,omitempty"`

		// user
		User *User `json:"user,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result Participant

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Approved = data.Approved
	result.ParticipatedOn = data.ParticipatedOn
	result.Role = data.Role
	result.User = data.User

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Participant) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// approved
		Approved bool `json:"approved,omitempty"`

		// The ISO8601 timestamp of the participant's action. For approvers, this is the time of their approval. For commenters and pull request reviewers who are not approvers, this is the time they last commented, or null if they have not commented.
		// Format: date-time
		ParticipatedOn strfmt.DateTime `json:"participated_on,omitempty"`

		// role
		// Enum: [PARTICIPANT REVIEWER]
		Role string `json:"role,omitempty"`

		// user
		User *User `json:"user,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		Approved: m.Approved,

		ParticipatedOn: m.ParticipatedOn,

		Role: m.Role,

		User: m.User,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this participant
func (m *Participant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParticipatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Participant) validateParticipatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ParticipatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("participated_on", "body", "date-time", m.ParticipatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

var participantTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARTICIPANT","REVIEWER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		participantTypeRolePropEnum = append(participantTypeRolePropEnum, v)
	}
}

// property enum
func (m *Participant) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, participantTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Participant) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *Participant) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Participant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Participant) UnmarshalBinary(b []byte) error {
	var res Participant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
