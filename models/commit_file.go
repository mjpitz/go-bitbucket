// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommitFile A file object, representing a file at a commit in a repository
//
// swagger:model commit_file
type CommitFile struct {

	// attributes
	// Enum: [link executable subrepository binary lfs]
	Attributes string `json:"attributes,omitempty"`

	// commit
	Commit *Commit `json:"commit,omitempty"`

	// The escaped version of the path as it appears in a diff. If the path does not require escaping this will be the same as path.
	EscapedPath string `json:"escaped_path,omitempty"`

	// The path in the repository
	Path string `json:"path,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// commit file additional properties
	CommitFileAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *CommitFile) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// attributes
		// Enum: [link executable subrepository binary lfs]
		Attributes string `json:"attributes,omitempty"`

		// commit
		Commit *Commit `json:"commit,omitempty"`

		// The escaped version of the path as it appears in a diff. If the path does not require escaping this will be the same as path.
		EscapedPath string `json:"escaped_path,omitempty"`

		// The path in the repository
		Path string `json:"path,omitempty"`

		// type
		// Required: true
		Type *string `json:"type"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv CommitFile

	rcv.Attributes = stage1.Attributes
	rcv.Commit = stage1.Commit
	rcv.EscapedPath = stage1.EscapedPath
	rcv.Path = stage1.Path
	rcv.Type = stage1.Type
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "attributes")
	delete(stage2, "commit")
	delete(stage2, "escaped_path")
	delete(stage2, "path")
	delete(stage2, "type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.CommitFileAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m CommitFile) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// attributes
		// Enum: [link executable subrepository binary lfs]
		Attributes string `json:"attributes,omitempty"`

		// commit
		Commit *Commit `json:"commit,omitempty"`

		// The escaped version of the path as it appears in a diff. If the path does not require escaping this will be the same as path.
		EscapedPath string `json:"escaped_path,omitempty"`

		// The path in the repository
		Path string `json:"path,omitempty"`

		// type
		// Required: true
		Type *string `json:"type"`
	}

	stage1.Attributes = m.Attributes
	stage1.Commit = m.Commit
	stage1.EscapedPath = m.EscapedPath
	stage1.Path = m.Path
	stage1.Type = m.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.CommitFileAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.CommitFileAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this commit file
func (m *CommitFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commitFileTypeAttributesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["link","executable","subrepository","binary","lfs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commitFileTypeAttributesPropEnum = append(commitFileTypeAttributesPropEnum, v)
	}
}

const (

	// CommitFileAttributesLink captures enum value "link"
	CommitFileAttributesLink string = "link"

	// CommitFileAttributesExecutable captures enum value "executable"
	CommitFileAttributesExecutable string = "executable"

	// CommitFileAttributesSubrepository captures enum value "subrepository"
	CommitFileAttributesSubrepository string = "subrepository"

	// CommitFileAttributesBinary captures enum value "binary"
	CommitFileAttributesBinary string = "binary"

	// CommitFileAttributesLfs captures enum value "lfs"
	CommitFileAttributesLfs string = "lfs"
)

// prop value enum
func (m *CommitFile) validateAttributesEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commitFileTypeAttributesPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommitFile) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	// value enum
	if err := m.validateAttributesEnum("attributes", "body", m.Attributes); err != nil {
		return err
	}

	return nil
}

func (m *CommitFile) validateCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if m.Commit != nil {
		if err := m.Commit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit")
			}
			return err
		}
	}

	return nil
}

func (m *CommitFile) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommitFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitFile) UnmarshalBinary(b []byte) error {
	var res CommitFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
