// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BranchingModelSettings branching model settings
//
// swagger:model branching_model_settings
type BranchingModelSettings struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// branch types
	// Max Items: 4
	// Min Items: 0
	// Unique: true
	BranchTypes []*BranchingModelSettingsBranchTypesItems0 `json:"branch_types"`

	// development
	Development *BranchingModelSettingsAO1Development `json:"development,omitempty"`

	// links
	Links *BranchingModelSettingsAO1Links `json:"links,omitempty"`

	// production
	Production *BranchingModelSettingsAO1Production `json:"production,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *BranchingModelSettings) Type() string {
	return "branching_model_settings"
}

// SetType sets the type of this subtype
func (m *BranchingModelSettings) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *BranchingModelSettings) UnmarshalJSON(raw []byte) error {
	var data struct {

		// branch types
		// Max Items: 4
		// Min Items: 0
		// Unique: true
		BranchTypes []*BranchingModelSettingsBranchTypesItems0 `json:"branch_types"`

		// development
		Development *BranchingModelSettingsAO1Development `json:"development,omitempty"`

		// links
		Links *BranchingModelSettingsAO1Links `json:"links,omitempty"`

		// production
		Production *BranchingModelSettingsAO1Production `json:"production,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result BranchingModelSettings

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.BranchTypes = data.BranchTypes
	result.Development = data.Development
	result.Links = data.Links
	result.Production = data.Production

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m BranchingModelSettings) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// branch types
		// Max Items: 4
		// Min Items: 0
		// Unique: true
		BranchTypes []*BranchingModelSettingsBranchTypesItems0 `json:"branch_types"`

		// development
		Development *BranchingModelSettingsAO1Development `json:"development,omitempty"`

		// links
		Links *BranchingModelSettingsAO1Links `json:"links,omitempty"`

		// production
		Production *BranchingModelSettingsAO1Production `json:"production,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		BranchTypes: m.BranchTypes,

		Development: m.Development,

		Links: m.Links,

		Production: m.Production,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this branching model settings
func (m *BranchingModelSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranchTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevelopment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BranchingModelSettings) validateBranchTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.BranchTypes) { // not required
		return nil
	}

	iBranchTypesSize := int64(len(m.BranchTypes))

	if err := validate.MinItems("branch_types", "body", iBranchTypesSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("branch_types", "body", iBranchTypesSize, 4); err != nil {
		return err
	}

	if err := validate.UniqueItems("branch_types", "body", m.BranchTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.BranchTypes); i++ {
		if swag.IsZero(m.BranchTypes[i]) { // not required
			continue
		}

		if m.BranchTypes[i] != nil {
			if err := m.BranchTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("branch_types" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BranchingModelSettings) validateDevelopment(formats strfmt.Registry) error {

	if swag.IsZero(m.Development) { // not required
		return nil
	}

	if m.Development != nil {
		if err := m.Development.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("development")
			}
			return err
		}
	}

	return nil
}

func (m *BranchingModelSettings) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *BranchingModelSettings) validateProduction(formats strfmt.Registry) error {

	if swag.IsZero(m.Production) { // not required
		return nil
	}

	if m.Production != nil {
		if err := m.Production.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("production")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BranchingModelSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchingModelSettings) UnmarshalBinary(b []byte) error {
	var res BranchingModelSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BranchingModelSettingsAO1Development branching model settings a o1 development
//
// swagger:model BranchingModelSettingsAO1Development
type BranchingModelSettingsAO1Development struct {

	// Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always `true` when `use_mainbranch` is `true` (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.
	IsValid bool `json:"is_valid,omitempty"`

	// The configured branch. It must be `null` when `use_mainbranch` is `true`. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case `is_valid` will be `false`. The branch must exist when updating/setting the `name` or an error will occur.
	Name string `json:"name,omitempty"`

	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the `name` must be `null` or not provided. When `false` the `name` must contain a non-empty branch name.
	UseMainbranch bool `json:"use_mainbranch,omitempty"`
}

// Validate validates this branching model settings a o1 development
func (m *BranchingModelSettingsAO1Development) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BranchingModelSettingsAO1Development) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchingModelSettingsAO1Development) UnmarshalBinary(b []byte) error {
	var res BranchingModelSettingsAO1Development
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BranchingModelSettingsAO1Links branching model settings a o1 links
//
// swagger:model BranchingModelSettingsAO1Links
type BranchingModelSettingsAO1Links struct {

	// self
	Self *BranchingModelSettingsAO1LinksSelf `json:"self,omitempty"`
}

// Validate validates this branching model settings a o1 links
func (m *BranchingModelSettingsAO1Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BranchingModelSettingsAO1Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BranchingModelSettingsAO1Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchingModelSettingsAO1Links) UnmarshalBinary(b []byte) error {
	var res BranchingModelSettingsAO1Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BranchingModelSettingsAO1LinksSelf branching model settings a o1 links self
//
// swagger:model BranchingModelSettingsAO1LinksSelf
type BranchingModelSettingsAO1LinksSelf struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this branching model settings a o1 links self
func (m *BranchingModelSettingsAO1LinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BranchingModelSettingsAO1LinksSelf) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BranchingModelSettingsAO1LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchingModelSettingsAO1LinksSelf) UnmarshalBinary(b []byte) error {
	var res BranchingModelSettingsAO1LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BranchingModelSettingsAO1Production branching model settings a o1 production
//
// swagger:model BranchingModelSettingsAO1Production
type BranchingModelSettingsAO1Production struct {

	// Indicates if branch is enabled or not.
	Enabled bool `json:"enabled,omitempty"`

	// Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always `true` when `use_mainbranch` is `true` (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.
	IsValid bool `json:"is_valid,omitempty"`

	// The configured branch. It must be `null` when `use_mainbranch` is `true`. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case `is_valid` will be `false`. The branch must exist when updating/setting the `name` or an error will occur.
	Name string `json:"name,omitempty"`

	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the `name` must be `null` or not provided. When `false` the `name` must contain a non-empty branch name.
	UseMainbranch bool `json:"use_mainbranch,omitempty"`
}

// Validate validates this branching model settings a o1 production
func (m *BranchingModelSettingsAO1Production) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BranchingModelSettingsAO1Production) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchingModelSettingsAO1Production) UnmarshalBinary(b []byte) error {
	var res BranchingModelSettingsAO1Production
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BranchingModelSettingsBranchTypesItems0 branching model settings branch types items0
//
// swagger:model BranchingModelSettingsBranchTypesItems0
type BranchingModelSettingsBranchTypesItems0 struct {

	// Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.
	Enabled bool `json:"enabled,omitempty"`

	// The kind of the branch type.
	// Required: true
	// Enum: [feature bugfix release hotfix]
	Kind *string `json:"kind"`

	// The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The `prefix` of an enabled branch type must be a valid branch prefix.Additionally, it cannot be blank, empty or `null`. The `prefix` for a disabled branch type can be empty or invalid.
	Prefix string `json:"prefix,omitempty"`
}

// Validate validates this branching model settings branch types items0
func (m *BranchingModelSettingsBranchTypesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var branchingModelSettingsBranchTypesItems0TypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["feature","bugfix","release","hotfix"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		branchingModelSettingsBranchTypesItems0TypeKindPropEnum = append(branchingModelSettingsBranchTypesItems0TypeKindPropEnum, v)
	}
}

const (

	// BranchingModelSettingsBranchTypesItems0KindFeature captures enum value "feature"
	BranchingModelSettingsBranchTypesItems0KindFeature string = "feature"

	// BranchingModelSettingsBranchTypesItems0KindBugfix captures enum value "bugfix"
	BranchingModelSettingsBranchTypesItems0KindBugfix string = "bugfix"

	// BranchingModelSettingsBranchTypesItems0KindRelease captures enum value "release"
	BranchingModelSettingsBranchTypesItems0KindRelease string = "release"

	// BranchingModelSettingsBranchTypesItems0KindHotfix captures enum value "hotfix"
	BranchingModelSettingsBranchTypesItems0KindHotfix string = "hotfix"
)

// prop value enum
func (m *BranchingModelSettingsBranchTypesItems0) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, branchingModelSettingsBranchTypesItems0TypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BranchingModelSettingsBranchTypesItems0) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", *m.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BranchingModelSettingsBranchTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchingModelSettingsBranchTypesItems0) UnmarshalBinary(b []byte) error {
	var res BranchingModelSettingsBranchTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
