// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueJobStatus The status of an import or export job
//
// swagger:model issue_job_status
type IssueJobStatus struct {

	// The total number of issues already imported/exported
	Count int64 `json:"count,omitempty"`

	// The percentage of issues already imported/exported
	// Maximum: 100
	// Minimum: 0
	Pct *float64 `json:"pct,omitempty"`

	// The phase of the import/export job
	Phase string `json:"phase,omitempty"`

	// The status of the import/export job
	// Enum: [ACCEPTED STARTED RUNNING FAILURE]
	Status string `json:"status,omitempty"`

	// The total number of issues being imported/exported
	Total int64 `json:"total,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this issue job status
func (m *IssueJobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueJobStatus) validatePct(formats strfmt.Registry) error {

	if swag.IsZero(m.Pct) { // not required
		return nil
	}

	if err := validate.Minimum("pct", "body", float64(*m.Pct), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("pct", "body", float64(*m.Pct), 100, false); err != nil {
		return err
	}

	return nil
}

var issueJobStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACCEPTED","STARTED","RUNNING","FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		issueJobStatusTypeStatusPropEnum = append(issueJobStatusTypeStatusPropEnum, v)
	}
}

const (

	// IssueJobStatusStatusACCEPTED captures enum value "ACCEPTED"
	IssueJobStatusStatusACCEPTED string = "ACCEPTED"

	// IssueJobStatusStatusSTARTED captures enum value "STARTED"
	IssueJobStatusStatusSTARTED string = "STARTED"

	// IssueJobStatusStatusRUNNING captures enum value "RUNNING"
	IssueJobStatusStatusRUNNING string = "RUNNING"

	// IssueJobStatusStatusFAILURE captures enum value "FAILURE"
	IssueJobStatusStatusFAILURE string = "FAILURE"
)

// prop value enum
func (m *IssueJobStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, issueJobStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IssueJobStatus) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueJobStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueJobStatus) UnmarshalBinary(b []byte) error {
	var res IssueJobStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
