// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PullrequestEndpoint pullrequest endpoint
//
// swagger:model pullrequest_endpoint
type PullrequestEndpoint struct {

	// branch
	Branch *PullrequestEndpointBranch `json:"branch,omitempty"`

	// commit
	Commit *PullrequestEndpointCommit `json:"commit,omitempty"`

	// repository
	Repository *Repository `json:"repository,omitempty"`
}

// Validate validates this pullrequest endpoint
func (m *PullrequestEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullrequestEndpoint) validateBranch(formats strfmt.Registry) error {

	if swag.IsZero(m.Branch) { // not required
		return nil
	}

	if m.Branch != nil {
		if err := m.Branch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branch")
			}
			return err
		}
	}

	return nil
}

func (m *PullrequestEndpoint) validateCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if m.Commit != nil {
		if err := m.Commit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit")
			}
			return err
		}
	}

	return nil
}

func (m *PullrequestEndpoint) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PullrequestEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullrequestEndpoint) UnmarshalBinary(b []byte) error {
	var res PullrequestEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PullrequestEndpointBranch pullrequest endpoint branch
//
// swagger:model PullrequestEndpointBranch
type PullrequestEndpointBranch struct {

	// The default merge strategy, when this endpoint is the destination of the pull request.
	DefaultMergeStrategy string `json:"default_merge_strategy,omitempty"`

	// Available merge strategies, when this endpoint is the destination of the pull request.
	MergeStrategies []string `json:"merge_strategies"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this pullrequest endpoint branch
func (m *PullrequestEndpointBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMergeStrategies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pullrequestEndpointBranchMergeStrategiesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["merge_commit","squash","fast_forward"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pullrequestEndpointBranchMergeStrategiesItemsEnum = append(pullrequestEndpointBranchMergeStrategiesItemsEnum, v)
	}
}

func (m *PullrequestEndpointBranch) validateMergeStrategiesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pullrequestEndpointBranchMergeStrategiesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PullrequestEndpointBranch) validateMergeStrategies(formats strfmt.Registry) error {

	if swag.IsZero(m.MergeStrategies) { // not required
		return nil
	}

	for i := 0; i < len(m.MergeStrategies); i++ {

		// value enum
		if err := m.validateMergeStrategiesItemsEnum("branch"+"."+"merge_strategies"+"."+strconv.Itoa(i), "body", m.MergeStrategies[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PullrequestEndpointBranch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullrequestEndpointBranch) UnmarshalBinary(b []byte) error {
	var res PullrequestEndpointBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PullrequestEndpointCommit pullrequest endpoint commit
//
// swagger:model PullrequestEndpointCommit
type PullrequestEndpointCommit struct {

	// hash
	// Pattern: [0-9a-f]{7,}?
	Hash string `json:"hash,omitempty"`
}

// Validate validates this pullrequest endpoint commit
func (m *PullrequestEndpointCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullrequestEndpointCommit) validateHash(formats strfmt.Registry) error {

	if swag.IsZero(m.Hash) { // not required
		return nil
	}

	if err := validate.Pattern("commit"+"."+"hash", "body", string(m.Hash), `[0-9a-f]{7,}?`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PullrequestEndpointCommit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullrequestEndpointCommit) UnmarshalBinary(b []byte) error {
	var res PullrequestEndpointCommit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
