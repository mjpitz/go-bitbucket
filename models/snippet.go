// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Snippet snippet
//
// swagger:model snippet
type Snippet struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// creator
	Creator *Account `json:"creator,omitempty"`

	// id
	// Minimum: 0
	ID *int64 `json:"id,omitempty"`

	// is private
	IsPrivate bool `json:"is_private,omitempty"`

	// owner
	Owner *Account `json:"owner,omitempty"`

	// The DVCS used to store the snippet.
	// Enum: [hg git]
	Scm string `json:"scm,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// updated on
	// Format: date-time
	UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *Snippet) Type() string {
	return "snippet"
}

// SetType sets the type of this subtype
func (m *Snippet) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Snippet) UnmarshalJSON(raw []byte) error {
	var data struct {

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// creator
		Creator *Account `json:"creator,omitempty"`

		// id
		// Minimum: 0
		ID *int64 `json:"id,omitempty"`

		// is private
		IsPrivate bool `json:"is_private,omitempty"`

		// owner
		Owner *Account `json:"owner,omitempty"`

		// The DVCS used to store the snippet.
		// Enum: [hg git]
		Scm string `json:"scm,omitempty"`

		// title
		Title string `json:"title,omitempty"`

		// updated on
		// Format: date-time
		UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result Snippet

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.CreatedOn = data.CreatedOn
	result.Creator = data.Creator
	result.ID = data.ID
	result.IsPrivate = data.IsPrivate
	result.Owner = data.Owner
	result.Scm = data.Scm
	result.Title = data.Title
	result.UpdatedOn = data.UpdatedOn

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Snippet) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// creator
		Creator *Account `json:"creator,omitempty"`

		// id
		// Minimum: 0
		ID *int64 `json:"id,omitempty"`

		// is private
		IsPrivate bool `json:"is_private,omitempty"`

		// owner
		Owner *Account `json:"owner,omitempty"`

		// The DVCS used to store the snippet.
		// Enum: [hg git]
		Scm string `json:"scm,omitempty"`

		// title
		Title string `json:"title,omitempty"`

		// updated on
		// Format: date-time
		UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		CreatedOn: m.CreatedOn,

		Creator: m.Creator,

		ID: m.ID,

		IsPrivate: m.IsPrivate,

		Owner: m.Owner,

		Scm: m.Scm,

		Title: m.Title,

		UpdatedOn: m.UpdatedOn,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this snippet
func (m *Snippet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Snippet) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Snippet) validateCreator(formats strfmt.Registry) error {

	if swag.IsZero(m.Creator) { // not required
		return nil
	}

	if m.Creator != nil {
		if err := m.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *Snippet) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Snippet) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

var snippetTypeScmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hg","git"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snippetTypeScmPropEnum = append(snippetTypeScmPropEnum, v)
	}
}

// property enum
func (m *Snippet) validateScmEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snippetTypeScmPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Snippet) validateScm(formats strfmt.Registry) error {

	if swag.IsZero(m.Scm) { // not required
		return nil
	}

	// value enum
	if err := m.validateScmEnum("scm", "body", m.Scm); err != nil {
		return err
	}

	return nil
}

func (m *Snippet) validateUpdatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_on", "body", "date-time", m.UpdatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Snippet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Snippet) UnmarshalBinary(b []byte) error {
	var res Snippet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
