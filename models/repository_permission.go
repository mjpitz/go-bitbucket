// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepositoryPermission A user's permission for a given repository.
//
// swagger:model repository_permission
type RepositoryPermission struct {

	// permission
	// Enum: [admin write read]
	Permission string `json:"permission,omitempty"`

	// repository
	Repository *Repository `json:"repository,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// user
	User *User `json:"user,omitempty"`

	// repository permission additional properties
	RepositoryPermissionAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *RepositoryPermission) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// permission
		// Enum: [admin write read]
		Permission string `json:"permission,omitempty"`

		// repository
		Repository *Repository `json:"repository,omitempty"`

		// type
		// Required: true
		Type *string `json:"type"`

		// user
		User *User `json:"user,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv RepositoryPermission

	rcv.Permission = stage1.Permission
	rcv.Repository = stage1.Repository
	rcv.Type = stage1.Type
	rcv.User = stage1.User
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "permission")
	delete(stage2, "repository")
	delete(stage2, "type")
	delete(stage2, "user")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.RepositoryPermissionAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m RepositoryPermission) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// permission
		// Enum: [admin write read]
		Permission string `json:"permission,omitempty"`

		// repository
		Repository *Repository `json:"repository,omitempty"`

		// type
		// Required: true
		Type *string `json:"type"`

		// user
		User *User `json:"user,omitempty"`
	}

	stage1.Permission = m.Permission
	stage1.Repository = m.Repository
	stage1.Type = m.Type
	stage1.User = m.User

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.RepositoryPermissionAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.RepositoryPermissionAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this repository permission
func (m *RepositoryPermission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var repositoryPermissionTypePermissionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","write","read"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repositoryPermissionTypePermissionPropEnum = append(repositoryPermissionTypePermissionPropEnum, v)
	}
}

const (

	// RepositoryPermissionPermissionAdmin captures enum value "admin"
	RepositoryPermissionPermissionAdmin string = "admin"

	// RepositoryPermissionPermissionWrite captures enum value "write"
	RepositoryPermissionPermissionWrite string = "write"

	// RepositoryPermissionPermissionRead captures enum value "read"
	RepositoryPermissionPermissionRead string = "read"
)

// prop value enum
func (m *RepositoryPermission) validatePermissionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, repositoryPermissionTypePermissionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RepositoryPermission) validatePermission(formats strfmt.Registry) error {

	if swag.IsZero(m.Permission) { // not required
		return nil
	}

	// value enum
	if err := m.validatePermissionEnum("permission", "body", m.Permission); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryPermission) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryPermission) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryPermission) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryPermission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryPermission) UnmarshalBinary(b []byte) error {
	var res RepositoryPermission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
