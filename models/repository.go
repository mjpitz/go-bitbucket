// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Repository repository
//
// swagger:model repository
type Repository struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	//
	// Controls the rules for forking this repository.
	//
	// * **allow_forks**: unrestricted forking
	// * **no_public_forks**: restrict forking to private forks (forks cannot
	//   be made public later)
	// * **no_forks**: deny all forking
	//
	// Enum: [allow_forks no_public_forks no_forks]
	ForkPolicy string `json:"fork_policy,omitempty"`

	// The concatenation of the repository owner's username and the slugified name, e.g. "evzijst/interruptingcow". This is the same string used in Bitbucket URLs.
	FullName string `json:"full_name,omitempty"`

	// has issues
	HasIssues bool `json:"has_issues,omitempty"`

	// has wiki
	HasWiki bool `json:"has_wiki,omitempty"`

	// is private
	IsPrivate bool `json:"is_private,omitempty"`

	// language
	Language string `json:"language,omitempty"`

	// links
	Links *RepositoryAO1Links `json:"links,omitempty"`

	// mainbranch
	Mainbranch *Branch `json:"mainbranch,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner *Account `json:"owner,omitempty"`

	// parent
	Parent *Repository `json:"parent,omitempty"`

	// project
	Project *Project `json:"project,omitempty"`

	// scm
	// Enum: [hg git]
	Scm string `json:"scm,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// updated on
	// Format: date-time
	UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

	// The repository's immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user.
	UUID string `json:"uuid,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *Repository) Type() string {
	return "repository"
}

// SetType sets the type of this subtype
func (m *Repository) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Repository) UnmarshalJSON(raw []byte) error {
	var data struct {

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// description
		Description string `json:"description,omitempty"`

		//
		// Controls the rules for forking this repository.
		//
		// * **allow_forks**: unrestricted forking
		// * **no_public_forks**: restrict forking to private forks (forks cannot
		//   be made public later)
		// * **no_forks**: deny all forking
		//
		// Enum: [allow_forks no_public_forks no_forks]
		ForkPolicy string `json:"fork_policy,omitempty"`

		// The concatenation of the repository owner's username and the slugified name, e.g. "evzijst/interruptingcow". This is the same string used in Bitbucket URLs.
		FullName string `json:"full_name,omitempty"`

		// has issues
		HasIssues bool `json:"has_issues,omitempty"`

		// has wiki
		HasWiki bool `json:"has_wiki,omitempty"`

		// is private
		IsPrivate bool `json:"is_private,omitempty"`

		// language
		Language string `json:"language,omitempty"`

		// links
		Links *RepositoryAO1Links `json:"links,omitempty"`

		// mainbranch
		Mainbranch *Branch `json:"mainbranch,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// owner
		Owner *Account `json:"owner,omitempty"`

		// parent
		Parent *Repository `json:"parent,omitempty"`

		// project
		Project *Project `json:"project,omitempty"`

		// scm
		// Enum: [hg git]
		Scm string `json:"scm,omitempty"`

		// size
		Size int64 `json:"size,omitempty"`

		// updated on
		// Format: date-time
		UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

		// The repository's immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user.
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result Repository

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.CreatedOn = data.CreatedOn
	result.Description = data.Description
	result.ForkPolicy = data.ForkPolicy
	result.FullName = data.FullName
	result.HasIssues = data.HasIssues
	result.HasWiki = data.HasWiki
	result.IsPrivate = data.IsPrivate
	result.Language = data.Language
	result.Links = data.Links
	result.Mainbranch = data.Mainbranch
	result.Name = data.Name
	result.Owner = data.Owner
	result.Parent = data.Parent
	result.Project = data.Project
	result.Scm = data.Scm
	result.Size = data.Size
	result.UpdatedOn = data.UpdatedOn
	result.UUID = data.UUID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Repository) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// description
		Description string `json:"description,omitempty"`

		//
		// Controls the rules for forking this repository.
		//
		// * **allow_forks**: unrestricted forking
		// * **no_public_forks**: restrict forking to private forks (forks cannot
		//   be made public later)
		// * **no_forks**: deny all forking
		//
		// Enum: [allow_forks no_public_forks no_forks]
		ForkPolicy string `json:"fork_policy,omitempty"`

		// The concatenation of the repository owner's username and the slugified name, e.g. "evzijst/interruptingcow". This is the same string used in Bitbucket URLs.
		FullName string `json:"full_name,omitempty"`

		// has issues
		HasIssues bool `json:"has_issues,omitempty"`

		// has wiki
		HasWiki bool `json:"has_wiki,omitempty"`

		// is private
		IsPrivate bool `json:"is_private,omitempty"`

		// language
		Language string `json:"language,omitempty"`

		// links
		Links *RepositoryAO1Links `json:"links,omitempty"`

		// mainbranch
		Mainbranch *Branch `json:"mainbranch,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// owner
		Owner *Account `json:"owner,omitempty"`

		// parent
		Parent *Repository `json:"parent,omitempty"`

		// project
		Project *Project `json:"project,omitempty"`

		// scm
		// Enum: [hg git]
		Scm string `json:"scm,omitempty"`

		// size
		Size int64 `json:"size,omitempty"`

		// updated on
		// Format: date-time
		UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

		// The repository's immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user.
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		CreatedOn: m.CreatedOn,

		Description: m.Description,

		ForkPolicy: m.ForkPolicy,

		FullName: m.FullName,

		HasIssues: m.HasIssues,

		HasWiki: m.HasWiki,

		IsPrivate: m.IsPrivate,

		Language: m.Language,

		Links: m.Links,

		Mainbranch: m.Mainbranch,

		Name: m.Name,

		Owner: m.Owner,

		Parent: m.Parent,

		Project: m.Project,

		Scm: m.Scm,

		Size: m.Size,

		UpdatedOn: m.UpdatedOn,

		UUID: m.UUID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this repository
func (m *Repository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForkPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMainbranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Repository) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

var repositoryTypeForkPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow_forks","no_public_forks","no_forks"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repositoryTypeForkPolicyPropEnum = append(repositoryTypeForkPolicyPropEnum, v)
	}
}

// property enum
func (m *Repository) validateForkPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, repositoryTypeForkPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Repository) validateForkPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ForkPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateForkPolicyEnum("fork_policy", "body", m.ForkPolicy); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validateMainbranch(formats strfmt.Registry) error {

	if swag.IsZero(m.Mainbranch) { // not required
		return nil
	}

	if m.Mainbranch != nil {
		if err := m.Mainbranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mainbranch")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

var repositoryTypeScmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hg","git"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repositoryTypeScmPropEnum = append(repositoryTypeScmPropEnum, v)
	}
}

// property enum
func (m *Repository) validateScmEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, repositoryTypeScmPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Repository) validateScm(formats strfmt.Registry) error {

	if swag.IsZero(m.Scm) { // not required
		return nil
	}

	// value enum
	if err := m.validateScmEnum("scm", "body", m.Scm); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateUpdatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_on", "body", "date-time", m.UpdatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Repository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Repository) UnmarshalBinary(b []byte) error {
	var res Repository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1Links repository a o1 links
//
// swagger:model RepositoryAO1Links
type RepositoryAO1Links struct {

	// avatar
	Avatar *RepositoryAO1LinksAvatar `json:"avatar,omitempty"`

	// clone
	Clone []*RepositoryAO1LinksCloneItems0 `json:"clone"`

	// commits
	Commits *RepositoryAO1LinksCommits `json:"commits,omitempty"`

	// downloads
	Downloads *RepositoryAO1LinksDownloads `json:"downloads,omitempty"`

	// forks
	Forks *RepositoryAO1LinksForks `json:"forks,omitempty"`

	// hooks
	Hooks *RepositoryAO1LinksHooks `json:"hooks,omitempty"`

	// html
	HTML *RepositoryAO1LinksHTML `json:"html,omitempty"`

	// pullrequests
	Pullrequests *RepositoryAO1LinksPullrequests `json:"pullrequests,omitempty"`

	// self
	Self *RepositoryAO1LinksSelf `json:"self,omitempty"`

	// watchers
	Watchers *RepositoryAO1LinksWatchers `json:"watchers,omitempty"`
}

// Validate validates this repository a o1 links
func (m *RepositoryAO1Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloads(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHooks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTML(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePullrequests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWatchers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1Links) validateAvatar(formats strfmt.Registry) error {

	if swag.IsZero(m.Avatar) { // not required
		return nil
	}

	if m.Avatar != nil {
		if err := m.Avatar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "avatar")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryAO1Links) validateClone(formats strfmt.Registry) error {

	if swag.IsZero(m.Clone) { // not required
		return nil
	}

	for i := 0; i < len(m.Clone); i++ {
		if swag.IsZero(m.Clone[i]) { // not required
			continue
		}

		if m.Clone[i] != nil {
			if err := m.Clone[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + "clone" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepositoryAO1Links) validateCommits(formats strfmt.Registry) error {

	if swag.IsZero(m.Commits) { // not required
		return nil
	}

	if m.Commits != nil {
		if err := m.Commits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "commits")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryAO1Links) validateDownloads(formats strfmt.Registry) error {

	if swag.IsZero(m.Downloads) { // not required
		return nil
	}

	if m.Downloads != nil {
		if err := m.Downloads.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "downloads")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryAO1Links) validateForks(formats strfmt.Registry) error {

	if swag.IsZero(m.Forks) { // not required
		return nil
	}

	if m.Forks != nil {
		if err := m.Forks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "forks")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryAO1Links) validateHooks(formats strfmt.Registry) error {

	if swag.IsZero(m.Hooks) { // not required
		return nil
	}

	if m.Hooks != nil {
		if err := m.Hooks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "hooks")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryAO1Links) validateHTML(formats strfmt.Registry) error {

	if swag.IsZero(m.HTML) { // not required
		return nil
	}

	if m.HTML != nil {
		if err := m.HTML.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "html")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryAO1Links) validatePullrequests(formats strfmt.Registry) error {

	if swag.IsZero(m.Pullrequests) { // not required
		return nil
	}

	if m.Pullrequests != nil {
		if err := m.Pullrequests.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "pullrequests")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryAO1Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryAO1Links) validateWatchers(formats strfmt.Registry) error {

	if swag.IsZero(m.Watchers) { // not required
		return nil
	}

	if m.Watchers != nil {
		if err := m.Watchers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "watchers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1Links) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1LinksAvatar repository a o1 links avatar
//
// swagger:model RepositoryAO1LinksAvatar
type RepositoryAO1LinksAvatar struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this repository a o1 links avatar
func (m *RepositoryAO1LinksAvatar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1LinksAvatar) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"avatar"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1LinksAvatar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1LinksAvatar) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1LinksAvatar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1LinksCloneItems0 repository a o1 links clone items0
//
// swagger:model RepositoryAO1LinksCloneItems0
type RepositoryAO1LinksCloneItems0 struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this repository a o1 links clone items0
func (m *RepositoryAO1LinksCloneItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1LinksCloneItems0) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1LinksCloneItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1LinksCloneItems0) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1LinksCloneItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1LinksCommits repository a o1 links commits
//
// swagger:model RepositoryAO1LinksCommits
type RepositoryAO1LinksCommits struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this repository a o1 links commits
func (m *RepositoryAO1LinksCommits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1LinksCommits) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"commits"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1LinksCommits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1LinksCommits) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1LinksCommits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1LinksDownloads repository a o1 links downloads
//
// swagger:model RepositoryAO1LinksDownloads
type RepositoryAO1LinksDownloads struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this repository a o1 links downloads
func (m *RepositoryAO1LinksDownloads) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1LinksDownloads) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"downloads"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1LinksDownloads) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1LinksDownloads) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1LinksDownloads
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1LinksForks repository a o1 links forks
//
// swagger:model RepositoryAO1LinksForks
type RepositoryAO1LinksForks struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this repository a o1 links forks
func (m *RepositoryAO1LinksForks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1LinksForks) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"forks"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1LinksForks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1LinksForks) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1LinksForks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1LinksHTML repository a o1 links HTML
//
// swagger:model RepositoryAO1LinksHTML
type RepositoryAO1LinksHTML struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this repository a o1 links HTML
func (m *RepositoryAO1LinksHTML) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1LinksHTML) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"html"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1LinksHTML) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1LinksHTML) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1LinksHTML
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1LinksHooks repository a o1 links hooks
//
// swagger:model RepositoryAO1LinksHooks
type RepositoryAO1LinksHooks struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this repository a o1 links hooks
func (m *RepositoryAO1LinksHooks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1LinksHooks) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"hooks"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1LinksHooks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1LinksHooks) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1LinksHooks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1LinksPullrequests repository a o1 links pullrequests
//
// swagger:model RepositoryAO1LinksPullrequests
type RepositoryAO1LinksPullrequests struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this repository a o1 links pullrequests
func (m *RepositoryAO1LinksPullrequests) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1LinksPullrequests) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"pullrequests"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1LinksPullrequests) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1LinksPullrequests) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1LinksPullrequests
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1LinksSelf repository a o1 links self
//
// swagger:model RepositoryAO1LinksSelf
type RepositoryAO1LinksSelf struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this repository a o1 links self
func (m *RepositoryAO1LinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1LinksSelf) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1LinksSelf) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryAO1LinksWatchers repository a o1 links watchers
//
// swagger:model RepositoryAO1LinksWatchers
type RepositoryAO1LinksWatchers struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this repository a o1 links watchers
func (m *RepositoryAO1LinksWatchers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryAO1LinksWatchers) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"watchers"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryAO1LinksWatchers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryAO1LinksWatchers) UnmarshalBinary(b []byte) error {
	var res RepositoryAO1LinksWatchers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
