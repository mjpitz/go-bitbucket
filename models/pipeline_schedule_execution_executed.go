// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PipelineScheduleExecutionExecuted pipeline schedule execution executed
//
// swagger:model pipeline_schedule_execution_executed
type PipelineScheduleExecutionExecuted struct {
	PipelineScheduleExecution

	// The pipeline that was triggered by this execution of a schedule.
	Pipeline *Pipeline `json:"pipeline,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PipelineScheduleExecutionExecuted) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PipelineScheduleExecution
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PipelineScheduleExecution = aO0

	// AO1
	var dataAO1 struct {
		Pipeline *Pipeline `json:"pipeline,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Pipeline = dataAO1.Pipeline

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PipelineScheduleExecutionExecuted) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PipelineScheduleExecution)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Pipeline *Pipeline `json:"pipeline,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}

	dataAO1.Pipeline = m.Pipeline

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pipeline schedule execution executed
func (m *PipelineScheduleExecutionExecuted) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PipelineScheduleExecution
	if err := m.PipelineScheduleExecution.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipeline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineScheduleExecutionExecuted) validatePipeline(formats strfmt.Registry) error {

	if swag.IsZero(m.Pipeline) { // not required
		return nil
	}

	if m.Pipeline != nil {
		if err := m.Pipeline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipeline")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineScheduleExecutionExecuted) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineScheduleExecutionExecuted) UnmarshalBinary(b []byte) error {
	var res PipelineScheduleExecutionExecuted
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
