// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueChange An issue change.
//
// swagger:model issue_change
type IssueChange struct {

	// changes
	Changes *IssueChangeChanges `json:"changes,omitempty"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// issue
	Issue *Issue `json:"issue,omitempty"`

	// links
	Links *IssueChangeLinks `json:"links,omitempty"`

	// message
	Message *IssueChangeMessage `json:"message,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// user
	User *User `json:"user,omitempty"`

	// issue change additional properties
	IssueChangeAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *IssueChange) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// changes
		Changes *IssueChangeChanges `json:"changes,omitempty"`

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// issue
		Issue *Issue `json:"issue,omitempty"`

		// links
		Links *IssueChangeLinks `json:"links,omitempty"`

		// message
		Message *IssueChangeMessage `json:"message,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// type
		// Required: true
		Type *string `json:"type"`

		// user
		User *User `json:"user,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv IssueChange

	rcv.Changes = stage1.Changes
	rcv.CreatedOn = stage1.CreatedOn
	rcv.Issue = stage1.Issue
	rcv.Links = stage1.Links
	rcv.Message = stage1.Message
	rcv.Name = stage1.Name
	rcv.Type = stage1.Type
	rcv.User = stage1.User
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "changes")
	delete(stage2, "created_on")
	delete(stage2, "issue")
	delete(stage2, "links")
	delete(stage2, "message")
	delete(stage2, "name")
	delete(stage2, "type")
	delete(stage2, "user")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.IssueChangeAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m IssueChange) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// changes
		Changes *IssueChangeChanges `json:"changes,omitempty"`

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// issue
		Issue *Issue `json:"issue,omitempty"`

		// links
		Links *IssueChangeLinks `json:"links,omitempty"`

		// message
		Message *IssueChangeMessage `json:"message,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// type
		// Required: true
		Type *string `json:"type"`

		// user
		User *User `json:"user,omitempty"`
	}

	stage1.Changes = m.Changes
	stage1.CreatedOn = m.CreatedOn
	stage1.Issue = m.Issue
	stage1.Links = m.Links
	stage1.Message = m.Message
	stage1.Name = m.Name
	stage1.Type = m.Type
	stage1.User = m.User

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.IssueChangeAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.IssueChangeAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this issue change
func (m *IssueChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueChange) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	if m.Changes != nil {
		if err := m.Changes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChange) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IssueChange) validateIssue(formats strfmt.Registry) error {

	if swag.IsZero(m.Issue) { // not required
		return nil
	}

	if m.Issue != nil {
		if err := m.Issue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issue")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChange) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChange) validateMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if m.Message != nil {
		if err := m.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("message")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChange) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *IssueChange) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChange) UnmarshalBinary(b []byte) error {
	var res IssueChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeChanges issue change changes
//
// swagger:model IssueChangeChanges
type IssueChangeChanges struct {

	// assignee
	Assignee *IssueChangeChangesAssignee `json:"assignee,omitempty"`

	// component
	Component *IssueChangeChangesComponent `json:"component,omitempty"`

	// content
	Content *IssueChangeChangesContent `json:"content,omitempty"`

	// kind
	Kind *IssueChangeChangesKind `json:"kind,omitempty"`

	// milestone
	Milestone *IssueChangeChangesMilestone `json:"milestone,omitempty"`

	// priority
	Priority *IssueChangeChangesPriority `json:"priority,omitempty"`

	// state
	State *IssueChangeChangesState `json:"state,omitempty"`

	// title
	Title *IssueChangeChangesTitle `json:"title,omitempty"`

	// version
	Version *IssueChangeChangesVersion `json:"version,omitempty"`
}

// Validate validates this issue change changes
func (m *IssueChangeChanges) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMilestone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueChangeChanges) validateAssignee(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignee) { // not required
		return nil
	}

	if m.Assignee != nil {
		if err := m.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes" + "." + "assignee")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChangeChanges) validateComponent(formats strfmt.Registry) error {

	if swag.IsZero(m.Component) { // not required
		return nil
	}

	if m.Component != nil {
		if err := m.Component.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes" + "." + "component")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChangeChanges) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	if m.Content != nil {
		if err := m.Content.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes" + "." + "content")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChangeChanges) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	if m.Kind != nil {
		if err := m.Kind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes" + "." + "kind")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChangeChanges) validateMilestone(formats strfmt.Registry) error {

	if swag.IsZero(m.Milestone) { // not required
		return nil
	}

	if m.Milestone != nil {
		if err := m.Milestone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes" + "." + "milestone")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChangeChanges) validatePriority(formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if m.Priority != nil {
		if err := m.Priority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes" + "." + "priority")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChangeChanges) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChangeChanges) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if m.Title != nil {
		if err := m.Title.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes" + "." + "title")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChangeChanges) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes" + "." + "version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeChanges) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeChanges) UnmarshalBinary(b []byte) error {
	var res IssueChangeChanges
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeChangesAssignee issue change changes assignee
//
// swagger:model IssueChangeChangesAssignee
type IssueChangeChangesAssignee struct {

	// new
	New string `json:"new,omitempty"`

	// old
	Old string `json:"old,omitempty"`
}

// Validate validates this issue change changes assignee
func (m *IssueChangeChangesAssignee) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeChangesAssignee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeChangesAssignee) UnmarshalBinary(b []byte) error {
	var res IssueChangeChangesAssignee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeChangesComponent issue change changes component
//
// swagger:model IssueChangeChangesComponent
type IssueChangeChangesComponent struct {

	// new
	New string `json:"new,omitempty"`

	// old
	Old string `json:"old,omitempty"`
}

// Validate validates this issue change changes component
func (m *IssueChangeChangesComponent) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeChangesComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeChangesComponent) UnmarshalBinary(b []byte) error {
	var res IssueChangeChangesComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeChangesContent issue change changes content
//
// swagger:model IssueChangeChangesContent
type IssueChangeChangesContent struct {

	// new
	New string `json:"new,omitempty"`

	// old
	Old string `json:"old,omitempty"`
}

// Validate validates this issue change changes content
func (m *IssueChangeChangesContent) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeChangesContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeChangesContent) UnmarshalBinary(b []byte) error {
	var res IssueChangeChangesContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeChangesKind issue change changes kind
//
// swagger:model IssueChangeChangesKind
type IssueChangeChangesKind struct {

	// new
	New string `json:"new,omitempty"`

	// old
	Old string `json:"old,omitempty"`
}

// Validate validates this issue change changes kind
func (m *IssueChangeChangesKind) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeChangesKind) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeChangesKind) UnmarshalBinary(b []byte) error {
	var res IssueChangeChangesKind
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeChangesMilestone issue change changes milestone
//
// swagger:model IssueChangeChangesMilestone
type IssueChangeChangesMilestone struct {

	// new
	New string `json:"new,omitempty"`

	// old
	Old string `json:"old,omitempty"`
}

// Validate validates this issue change changes milestone
func (m *IssueChangeChangesMilestone) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeChangesMilestone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeChangesMilestone) UnmarshalBinary(b []byte) error {
	var res IssueChangeChangesMilestone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeChangesPriority issue change changes priority
//
// swagger:model IssueChangeChangesPriority
type IssueChangeChangesPriority struct {

	// new
	New string `json:"new,omitempty"`

	// old
	Old string `json:"old,omitempty"`
}

// Validate validates this issue change changes priority
func (m *IssueChangeChangesPriority) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeChangesPriority) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeChangesPriority) UnmarshalBinary(b []byte) error {
	var res IssueChangeChangesPriority
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeChangesState issue change changes state
//
// swagger:model IssueChangeChangesState
type IssueChangeChangesState struct {

	// new
	New string `json:"new,omitempty"`

	// old
	Old string `json:"old,omitempty"`
}

// Validate validates this issue change changes state
func (m *IssueChangeChangesState) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeChangesState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeChangesState) UnmarshalBinary(b []byte) error {
	var res IssueChangeChangesState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeChangesTitle issue change changes title
//
// swagger:model IssueChangeChangesTitle
type IssueChangeChangesTitle struct {

	// new
	New string `json:"new,omitempty"`

	// old
	Old string `json:"old,omitempty"`
}

// Validate validates this issue change changes title
func (m *IssueChangeChangesTitle) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeChangesTitle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeChangesTitle) UnmarshalBinary(b []byte) error {
	var res IssueChangeChangesTitle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeChangesVersion issue change changes version
//
// swagger:model IssueChangeChangesVersion
type IssueChangeChangesVersion struct {

	// new
	New string `json:"new,omitempty"`

	// old
	Old string `json:"old,omitempty"`
}

// Validate validates this issue change changes version
func (m *IssueChangeChangesVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeChangesVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeChangesVersion) UnmarshalBinary(b []byte) error {
	var res IssueChangeChangesVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeLinks issue change links
//
// swagger:model IssueChangeLinks
type IssueChangeLinks struct {

	// issue
	Issue *IssueChangeLinksIssue `json:"issue,omitempty"`

	// self
	Self *IssueChangeLinksSelf `json:"self,omitempty"`
}

// Validate validates this issue change links
func (m *IssueChangeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueChangeLinks) validateIssue(formats strfmt.Registry) error {

	if swag.IsZero(m.Issue) { // not required
		return nil
	}

	if m.Issue != nil {
		if err := m.Issue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "issue")
			}
			return err
		}
	}

	return nil
}

func (m *IssueChangeLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeLinks) UnmarshalBinary(b []byte) error {
	var res IssueChangeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeLinksIssue issue change links issue
//
// swagger:model IssueChangeLinksIssue
type IssueChangeLinksIssue struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this issue change links issue
func (m *IssueChangeLinksIssue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueChangeLinksIssue) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"issue"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeLinksIssue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeLinksIssue) UnmarshalBinary(b []byte) error {
	var res IssueChangeLinksIssue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeLinksSelf issue change links self
//
// swagger:model IssueChangeLinksSelf
type IssueChangeLinksSelf struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this issue change links self
func (m *IssueChangeLinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueChangeLinksSelf) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeLinksSelf) UnmarshalBinary(b []byte) error {
	var res IssueChangeLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IssueChangeMessage issue change message
//
// swagger:model IssueChangeMessage
type IssueChangeMessage struct {

	// The user's content rendered as HTML.
	HTML string `json:"html,omitempty"`

	// The type of markup language the raw content is to be interpreted in.
	// Enum: [markdown creole plaintext]
	Markup string `json:"markup,omitempty"`

	// The text as it was typed by a user.
	Raw string `json:"raw,omitempty"`
}

// Validate validates this issue change message
func (m *IssueChangeMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarkup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var issueChangeMessageTypeMarkupPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["markdown","creole","plaintext"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		issueChangeMessageTypeMarkupPropEnum = append(issueChangeMessageTypeMarkupPropEnum, v)
	}
}

const (

	// IssueChangeMessageMarkupMarkdown captures enum value "markdown"
	IssueChangeMessageMarkupMarkdown string = "markdown"

	// IssueChangeMessageMarkupCreole captures enum value "creole"
	IssueChangeMessageMarkupCreole string = "creole"

	// IssueChangeMessageMarkupPlaintext captures enum value "plaintext"
	IssueChangeMessageMarkupPlaintext string = "plaintext"
)

// prop value enum
func (m *IssueChangeMessage) validateMarkupEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, issueChangeMessageTypeMarkupPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IssueChangeMessage) validateMarkup(formats strfmt.Registry) error {

	if swag.IsZero(m.Markup) { // not required
		return nil
	}

	// value enum
	if err := m.validateMarkupEnum("message"+"."+"markup", "body", m.Markup); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueChangeMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueChangeMessage) UnmarshalBinary(b []byte) error {
	var res IssueChangeMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
