// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HookEvent An event, associated with a resource or subject type.
//
// swagger:model hook_event
type HookEvent struct {

	// The category this event belongs to.
	Category string `json:"category,omitempty"`

	// More detailed description of the webhook event type.
	Description string `json:"description,omitempty"`

	// The event identifier.
	// Enum: [pullrequest:unapproved issue:comment_created pullrequest:approved repo:created repo:deleted repo:imported pullrequest:comment_updated issue:updated project:updated pullrequest:comment_created repo:commit_status_updated pullrequest:updated issue:created repo:fork pullrequest:comment_deleted repo:commit_status_created repo:updated pullrequest:rejected pullrequest:fulfilled repo:push pullrequest:created repo:transfer repo:commit_comment_created]
	Event string `json:"event,omitempty"`

	// Summary of the webhook event type.
	Label string `json:"label,omitempty"`
}

// Validate validates this hook event
func (m *HookEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hookEventTypeEventPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pullrequest:unapproved","issue:comment_created","pullrequest:approved","repo:created","repo:deleted","repo:imported","pullrequest:comment_updated","issue:updated","project:updated","pullrequest:comment_created","repo:commit_status_updated","pullrequest:updated","issue:created","repo:fork","pullrequest:comment_deleted","repo:commit_status_created","repo:updated","pullrequest:rejected","pullrequest:fulfilled","repo:push","pullrequest:created","repo:transfer","repo:commit_comment_created"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hookEventTypeEventPropEnum = append(hookEventTypeEventPropEnum, v)
	}
}

const (

	// HookEventEventPullrequestUnapproved captures enum value "pullrequest:unapproved"
	HookEventEventPullrequestUnapproved string = "pullrequest:unapproved"

	// HookEventEventIssueCommentCreated captures enum value "issue:comment_created"
	HookEventEventIssueCommentCreated string = "issue:comment_created"

	// HookEventEventPullrequestApproved captures enum value "pullrequest:approved"
	HookEventEventPullrequestApproved string = "pullrequest:approved"

	// HookEventEventRepoCreated captures enum value "repo:created"
	HookEventEventRepoCreated string = "repo:created"

	// HookEventEventRepoDeleted captures enum value "repo:deleted"
	HookEventEventRepoDeleted string = "repo:deleted"

	// HookEventEventRepoImported captures enum value "repo:imported"
	HookEventEventRepoImported string = "repo:imported"

	// HookEventEventPullrequestCommentUpdated captures enum value "pullrequest:comment_updated"
	HookEventEventPullrequestCommentUpdated string = "pullrequest:comment_updated"

	// HookEventEventIssueUpdated captures enum value "issue:updated"
	HookEventEventIssueUpdated string = "issue:updated"

	// HookEventEventProjectUpdated captures enum value "project:updated"
	HookEventEventProjectUpdated string = "project:updated"

	// HookEventEventPullrequestCommentCreated captures enum value "pullrequest:comment_created"
	HookEventEventPullrequestCommentCreated string = "pullrequest:comment_created"

	// HookEventEventRepoCommitStatusUpdated captures enum value "repo:commit_status_updated"
	HookEventEventRepoCommitStatusUpdated string = "repo:commit_status_updated"

	// HookEventEventPullrequestUpdated captures enum value "pullrequest:updated"
	HookEventEventPullrequestUpdated string = "pullrequest:updated"

	// HookEventEventIssueCreated captures enum value "issue:created"
	HookEventEventIssueCreated string = "issue:created"

	// HookEventEventRepoFork captures enum value "repo:fork"
	HookEventEventRepoFork string = "repo:fork"

	// HookEventEventPullrequestCommentDeleted captures enum value "pullrequest:comment_deleted"
	HookEventEventPullrequestCommentDeleted string = "pullrequest:comment_deleted"

	// HookEventEventRepoCommitStatusCreated captures enum value "repo:commit_status_created"
	HookEventEventRepoCommitStatusCreated string = "repo:commit_status_created"

	// HookEventEventRepoUpdated captures enum value "repo:updated"
	HookEventEventRepoUpdated string = "repo:updated"

	// HookEventEventPullrequestRejected captures enum value "pullrequest:rejected"
	HookEventEventPullrequestRejected string = "pullrequest:rejected"

	// HookEventEventPullrequestFulfilled captures enum value "pullrequest:fulfilled"
	HookEventEventPullrequestFulfilled string = "pullrequest:fulfilled"

	// HookEventEventRepoPush captures enum value "repo:push"
	HookEventEventRepoPush string = "repo:push"

	// HookEventEventPullrequestCreated captures enum value "pullrequest:created"
	HookEventEventPullrequestCreated string = "pullrequest:created"

	// HookEventEventRepoTransfer captures enum value "repo:transfer"
	HookEventEventRepoTransfer string = "repo:transfer"

	// HookEventEventRepoCommitCommentCreated captures enum value "repo:commit_comment_created"
	HookEventEventRepoCommitCommentCreated string = "repo:commit_comment_created"
)

// prop value enum
func (m *HookEvent) validateEventEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hookEventTypeEventPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HookEvent) validateEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.Event) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventEnum("event", "body", m.Event); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HookEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HookEvent) UnmarshalBinary(b []byte) error {
	var res HookEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
