// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PipelineStepStateCompletedError pipeline step state completed error
//
// swagger:model pipeline_step_state_completed_error
type PipelineStepStateCompletedError struct {
	PipelineStepStateCompletedResult

	// An error result of a completed state of a Bitbucket Pipeline step.
	Error *PipelineStepError `json:"error,omitempty"`

	// The name of the result (ERROR)
	// Enum: [ERROR]
	Name string `json:"name,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PipelineStepStateCompletedError) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PipelineStepStateCompletedResult
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PipelineStepStateCompletedResult = aO0

	// AO1
	var dataAO1 struct {
		Error *PipelineStepError `json:"error,omitempty"`

		Name string `json:"name,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Error = dataAO1.Error

	m.Name = dataAO1.Name

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PipelineStepStateCompletedError) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PipelineStepStateCompletedResult)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Error *PipelineStepError `json:"error,omitempty"`

		Name string `json:"name,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}

	dataAO1.Error = m.Error

	dataAO1.Name = m.Name

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pipeline step state completed error
func (m *PipelineStepStateCompletedError) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PipelineStepStateCompletedResult
	if err := m.PipelineStepStateCompletedResult.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineStepStateCompletedError) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

var pipelineStepStateCompletedErrorTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pipelineStepStateCompletedErrorTypeNamePropEnum = append(pipelineStepStateCompletedErrorTypeNamePropEnum, v)
	}
}

// property enum
func (m *PipelineStepStateCompletedError) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pipelineStepStateCompletedErrorTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PipelineStepStateCompletedError) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineStepStateCompletedError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineStepStateCompletedError) UnmarshalBinary(b []byte) error {
	var res PipelineStepStateCompletedError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
