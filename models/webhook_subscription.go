// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebhookSubscription webhook subscription
//
// swagger:model webhook_subscription
type WebhookSubscription struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// active
	Active bool `json:"active,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// A user-defined description of the webhook.
	Description string `json:"description,omitempty"`

	// The events this webhook is subscribed to.
	// Min Items: 1
	// Unique: true
	Events []string `json:"events"`

	subjectField Object

	// The type of entity, which is `repository` in the case of webhook subscriptions on repositories.
	// Enum: [workspace user repository team]
	SubjectType string `json:"subject_type,omitempty"`

	// The URL events get delivered to.
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`

	// The webhook's id
	UUID string `json:"uuid,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *WebhookSubscription) Type() string {
	return "webhook_subscription"
}

// SetType sets the type of this subtype
func (m *WebhookSubscription) SetType(val string) {
}

// Subject gets the subject of this subtype
func (m *WebhookSubscription) Subject() Object {
	return m.subjectField
}

// SetSubject sets the subject of this subtype
func (m *WebhookSubscription) SetSubject(val Object) {
	m.subjectField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *WebhookSubscription) UnmarshalJSON(raw []byte) error {
	var data struct {

		// active
		Active bool `json:"active,omitempty"`

		// created at
		// Format: date-time
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		// A user-defined description of the webhook.
		Description string `json:"description,omitempty"`

		// The events this webhook is subscribed to.
		// Min Items: 1
		// Unique: true
		Events []string `json:"events"`

		Subject json.RawMessage `json:"subject,omitempty"`

		// The type of entity, which is `repository` in the case of webhook subscriptions on repositories.
		// Enum: [workspace user repository team]
		SubjectType string `json:"subject_type,omitempty"`

		// The URL events get delivered to.
		// Format: uri
		URL strfmt.URI `json:"url,omitempty"`

		// The webhook's id
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var allOfSubject Object
	if string(data.Subject) != "null" {
		subject, err := UnmarshalObject(bytes.NewBuffer(data.Subject), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		allOfSubject = subject
	}

	var result WebhookSubscription

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Active = data.Active
	result.CreatedAt = data.CreatedAt
	result.Description = data.Description
	result.Events = data.Events
	result.subjectField = allOfSubject
	result.SubjectType = data.SubjectType
	result.URL = data.URL
	result.UUID = data.UUID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m WebhookSubscription) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// active
		Active bool `json:"active,omitempty"`

		// created at
		// Format: date-time
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		// A user-defined description of the webhook.
		Description string `json:"description,omitempty"`

		// The events this webhook is subscribed to.
		// Min Items: 1
		// Unique: true
		Events []string `json:"events"`

		// The type of entity, which is `repository` in the case of webhook subscriptions on repositories.
		// Enum: [workspace user repository team]
		SubjectType string `json:"subject_type,omitempty"`

		// The URL events get delivered to.
		// Format: uri
		URL strfmt.URI `json:"url,omitempty"`

		// The webhook's id
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		Active: m.Active,

		CreatedAt: m.CreatedAt,

		Description: m.Description,

		Events: m.Events,

		SubjectType: m.SubjectType,

		URL: m.URL,

		UUID: m.UUID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`

		Subject Object `json:"subject,omitempty"`
	}{

		Type: m.Type(),

		Subject: m.Subject(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this webhook subscription
func (m *WebhookSubscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookSubscription) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var webhookSubscriptionEventsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pullrequest:unapproved","issue:comment_created","pullrequest:approved","repo:created","repo:deleted","repo:imported","pullrequest:comment_updated","issue:updated","project:updated","pullrequest:comment_created","repo:commit_status_updated","pullrequest:updated","issue:created","repo:fork","pullrequest:comment_deleted","repo:commit_status_created","repo:updated","pullrequest:rejected","pullrequest:fulfilled","repo:push","pullrequest:created","repo:transfer","repo:commit_comment_created"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webhookSubscriptionEventsItemsEnum = append(webhookSubscriptionEventsItemsEnum, v)
	}
}

func (m *WebhookSubscription) validateEventsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webhookSubscriptionEventsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebhookSubscription) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	iEventsSize := int64(len(m.Events))

	if err := validate.MinItems("events", "body", iEventsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("events", "body", m.Events); err != nil {
		return err
	}

	for i := 0; i < len(m.Events); i++ {

		// value enum
		if err := m.validateEventsItemsEnum("events"+"."+strconv.Itoa(i), "body", m.Events[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *WebhookSubscription) validateSubject(formats strfmt.Registry) error {

	if swag.IsZero(m.Subject()) { // not required
		return nil
	}

	if err := m.Subject().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subject")
		}
		return err
	}

	return nil
}

var webhookSubscriptionTypeSubjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["workspace","user","repository","team"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webhookSubscriptionTypeSubjectTypePropEnum = append(webhookSubscriptionTypeSubjectTypePropEnum, v)
	}
}

// property enum
func (m *WebhookSubscription) validateSubjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, webhookSubscriptionTypeSubjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebhookSubscription) validateSubjectType(formats strfmt.Registry) error {

	if swag.IsZero(m.SubjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubjectTypeEnum("subject_type", "body", m.SubjectType); err != nil {
		return err
	}

	return nil
}

func (m *WebhookSubscription) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebhookSubscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookSubscription) UnmarshalBinary(b []byte) error {
	var res WebhookSubscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
