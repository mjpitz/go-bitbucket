// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tag tag
//
// swagger:model tag
type Tag struct {
	Ref

	// The date that the tag was created, if available
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// The message associated with the tag, if available.
	Message string `json:"message,omitempty"`

	// tagger
	Tagger *Author `json:"tagger,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Tag) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Ref
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Ref = aO0

	// AO1
	var dataAO1 struct {
		Date strfmt.DateTime `json:"date,omitempty"`

		Message string `json:"message,omitempty"`

		Tagger *Author `json:"tagger,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Date = dataAO1.Date

	m.Message = dataAO1.Message

	m.Tagger = dataAO1.Tagger

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Tag) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Ref)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Date strfmt.DateTime `json:"date,omitempty"`

		Message string `json:"message,omitempty"`

		Tagger *Author `json:"tagger,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}

	dataAO1.Date = m.Date

	dataAO1.Message = m.Message

	dataAO1.Tagger = m.Tagger

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tag
func (m *Tag) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Ref
	if err := m.Ref.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tag) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Tag) validateTagger(formats strfmt.Registry) error {

	if swag.IsZero(m.Tagger) { // not required
		return nil
	}

	if m.Tagger != nil {
		if err := m.Tagger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tagger")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tag) UnmarshalBinary(b []byte) error {
	var res Tag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
