// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Group group
//
// swagger:model group
type Group struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// The concatenation of the workspace's slug and the group's slug,
	// separated with a colon (e.g. `acme:developers`)
	//
	FullSlug string `json:"full_slug,omitempty"`

	// links
	Links *GroupAO1Links `json:"links,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner *Account `json:"owner,omitempty"`

	// The "sluggified" version of the group's name. This contains only ASCII
	// characters and can therefore be slightly different than the name
	Slug string `json:"slug,omitempty"`

	// workspace
	Workspace *Workspace `json:"workspace,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *Group) Type() string {
	return "group"
}

// SetType sets the type of this subtype
func (m *Group) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Group) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The concatenation of the workspace's slug and the group's slug,
		// separated with a colon (e.g. `acme:developers`)
		//
		FullSlug string `json:"full_slug,omitempty"`

		// links
		Links *GroupAO1Links `json:"links,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// owner
		Owner *Account `json:"owner,omitempty"`

		// The "sluggified" version of the group's name. This contains only ASCII
		// characters and can therefore be slightly different than the name
		Slug string `json:"slug,omitempty"`

		// workspace
		Workspace *Workspace `json:"workspace,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result Group

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.FullSlug = data.FullSlug
	result.Links = data.Links
	result.Name = data.Name
	result.Owner = data.Owner
	result.Slug = data.Slug
	result.Workspace = data.Workspace

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Group) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The concatenation of the workspace's slug and the group's slug,
		// separated with a colon (e.g. `acme:developers`)
		//
		FullSlug string `json:"full_slug,omitempty"`

		// links
		Links *GroupAO1Links `json:"links,omitempty"`

		// name
		Name string `json:"name,omitempty"`

		// owner
		Owner *Account `json:"owner,omitempty"`

		// The "sluggified" version of the group's name. This contains only ASCII
		// characters and can therefore be slightly different than the name
		Slug string `json:"slug,omitempty"`

		// workspace
		Workspace *Workspace `json:"workspace,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		FullSlug: m.FullSlug,

		Links: m.Links,

		Name: m.Name,

		Owner: m.Owner,

		Slug: m.Slug,

		Workspace: m.Workspace,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this group
func (m *Group) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Group) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Group) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Group) validateWorkspace(formats strfmt.Registry) error {

	if swag.IsZero(m.Workspace) { // not required
		return nil
	}

	if m.Workspace != nil {
		if err := m.Workspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Group) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Group) UnmarshalBinary(b []byte) error {
	var res Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupAO1Links group a o1 links
//
// swagger:model GroupAO1Links
type GroupAO1Links struct {

	// html
	HTML *GroupAO1LinksHTML `json:"html,omitempty"`

	// self
	Self *GroupAO1LinksSelf `json:"self,omitempty"`
}

// Validate validates this group a o1 links
func (m *GroupAO1Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTML(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupAO1Links) validateHTML(formats strfmt.Registry) error {

	if swag.IsZero(m.HTML) { // not required
		return nil
	}

	if m.HTML != nil {
		if err := m.HTML.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "html")
			}
			return err
		}
	}

	return nil
}

func (m *GroupAO1Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupAO1Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupAO1Links) UnmarshalBinary(b []byte) error {
	var res GroupAO1Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupAO1LinksHTML group a o1 links HTML
//
// swagger:model GroupAO1LinksHTML
type GroupAO1LinksHTML struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this group a o1 links HTML
func (m *GroupAO1LinksHTML) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupAO1LinksHTML) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"html"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupAO1LinksHTML) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupAO1LinksHTML) UnmarshalBinary(b []byte) error {
	var res GroupAO1LinksHTML
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupAO1LinksSelf group a o1 links self
//
// swagger:model GroupAO1LinksSelf
type GroupAO1LinksSelf struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this group a o1 links self
func (m *GroupAO1LinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupAO1LinksSelf) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupAO1LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupAO1LinksSelf) UnmarshalBinary(b []byte) error {
	var res GroupAO1LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
