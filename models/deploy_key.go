// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeployKey deploy key
//
// swagger:model deploy_key
type DeployKey struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// added on
	// Format: date-time
	AddedOn strfmt.DateTime `json:"added_on,omitempty"`

	// The comment parsed from the deploy key (if present)
	Comment string `json:"comment,omitempty"`

	// The deploy key value.
	Key string `json:"key,omitempty"`

	// The user-defined label for the deploy key
	Label string `json:"label,omitempty"`

	// last used
	// Format: date-time
	LastUsed strfmt.DateTime `json:"last_used,omitempty"`

	// links
	Links *DeployKeyAO1Links `json:"links,omitempty"`

	// owner
	Owner *Account `json:"owner,omitempty"`

	// repository
	Repository *Repository `json:"repository,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *DeployKey) Type() string {
	return "deploy_key"
}

// SetType sets the type of this subtype
func (m *DeployKey) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *DeployKey) UnmarshalJSON(raw []byte) error {
	var data struct {

		// added on
		// Format: date-time
		AddedOn strfmt.DateTime `json:"added_on,omitempty"`

		// The comment parsed from the deploy key (if present)
		Comment string `json:"comment,omitempty"`

		// The deploy key value.
		Key string `json:"key,omitempty"`

		// The user-defined label for the deploy key
		Label string `json:"label,omitempty"`

		// last used
		// Format: date-time
		LastUsed strfmt.DateTime `json:"last_used,omitempty"`

		// links
		Links *DeployKeyAO1Links `json:"links,omitempty"`

		// owner
		Owner *Account `json:"owner,omitempty"`

		// repository
		Repository *Repository `json:"repository,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result DeployKey

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.AddedOn = data.AddedOn
	result.Comment = data.Comment
	result.Key = data.Key
	result.Label = data.Label
	result.LastUsed = data.LastUsed
	result.Links = data.Links
	result.Owner = data.Owner
	result.Repository = data.Repository

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m DeployKey) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// added on
		// Format: date-time
		AddedOn strfmt.DateTime `json:"added_on,omitempty"`

		// The comment parsed from the deploy key (if present)
		Comment string `json:"comment,omitempty"`

		// The deploy key value.
		Key string `json:"key,omitempty"`

		// The user-defined label for the deploy key
		Label string `json:"label,omitempty"`

		// last used
		// Format: date-time
		LastUsed strfmt.DateTime `json:"last_used,omitempty"`

		// links
		Links *DeployKeyAO1Links `json:"links,omitempty"`

		// owner
		Owner *Account `json:"owner,omitempty"`

		// repository
		Repository *Repository `json:"repository,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		AddedOn: m.AddedOn,

		Comment: m.Comment,

		Key: m.Key,

		Label: m.Label,

		LastUsed: m.LastUsed,

		Links: m.Links,

		Owner: m.Owner,

		Repository: m.Repository,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this deploy key
func (m *DeployKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployKey) validateAddedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.AddedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("added_on", "body", "date-time", m.AddedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeployKey) validateLastUsed(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUsed) { // not required
		return nil
	}

	if err := validate.FormatOf("last_used", "body", "date-time", m.LastUsed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeployKey) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *DeployKey) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *DeployKey) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployKey) UnmarshalBinary(b []byte) error {
	var res DeployKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeployKeyAO1Links deploy key a o1 links
//
// swagger:model DeployKeyAO1Links
type DeployKeyAO1Links struct {

	// self
	Self *DeployKeyAO1LinksSelf `json:"self,omitempty"`
}

// Validate validates this deploy key a o1 links
func (m *DeployKeyAO1Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployKeyAO1Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployKeyAO1Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployKeyAO1Links) UnmarshalBinary(b []byte) error {
	var res DeployKeyAO1Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeployKeyAO1LinksSelf deploy key a o1 links self
//
// swagger:model DeployKeyAO1LinksSelf
type DeployKeyAO1LinksSelf struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this deploy key a o1 links self
func (m *DeployKeyAO1LinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployKeyAO1LinksSelf) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployKeyAO1LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployKeyAO1LinksSelf) UnmarshalBinary(b []byte) error {
	var res DeployKeyAO1LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
