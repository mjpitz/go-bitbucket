// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Workspace workspace
//
// swagger:model workspace
type Workspace struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// Indicates whether the workspace is publicly accessible, or whether it is
	// private to the members and consequently only visible to members.
	// Note that private workspaces cannot contain public repositories.
	IsPrivate bool `json:"is_private,omitempty"`

	// links
	Links *WorkspaceAO1Links `json:"links,omitempty"`

	// The name of the workspace.
	Name string `json:"name,omitempty"`

	// The short label that identifies this workspace.
	Slug string `json:"slug,omitempty"`

	// updated on
	// Format: date-time
	UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

	// The workspace's immutable id.
	UUID string `json:"uuid,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *Workspace) Type() string {
	return "workspace"
}

// SetType sets the type of this subtype
func (m *Workspace) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Workspace) UnmarshalJSON(raw []byte) error {
	var data struct {

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// Indicates whether the workspace is publicly accessible, or whether it is
		// private to the members and consequently only visible to members.
		// Note that private workspaces cannot contain public repositories.
		IsPrivate bool `json:"is_private,omitempty"`

		// links
		Links *WorkspaceAO1Links `json:"links,omitempty"`

		// The name of the workspace.
		Name string `json:"name,omitempty"`

		// The short label that identifies this workspace.
		Slug string `json:"slug,omitempty"`

		// updated on
		// Format: date-time
		UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

		// The workspace's immutable id.
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result Workspace

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.CreatedOn = data.CreatedOn
	result.IsPrivate = data.IsPrivate
	result.Links = data.Links
	result.Name = data.Name
	result.Slug = data.Slug
	result.UpdatedOn = data.UpdatedOn
	result.UUID = data.UUID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Workspace) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// created on
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// Indicates whether the workspace is publicly accessible, or whether it is
		// private to the members and consequently only visible to members.
		// Note that private workspaces cannot contain public repositories.
		IsPrivate bool `json:"is_private,omitempty"`

		// links
		Links *WorkspaceAO1Links `json:"links,omitempty"`

		// The name of the workspace.
		Name string `json:"name,omitempty"`

		// The short label that identifies this workspace.
		Slug string `json:"slug,omitempty"`

		// updated on
		// Format: date-time
		UpdatedOn strfmt.DateTime `json:"updated_on,omitempty"`

		// The workspace's immutable id.
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		CreatedOn: m.CreatedOn,

		IsPrivate: m.IsPrivate,

		Links: m.Links,

		Name: m.Name,

		Slug: m.Slug,

		UpdatedOn: m.UpdatedOn,

		UUID: m.UUID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this workspace
func (m *Workspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workspace) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Workspace) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Workspace) validateUpdatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_on", "body", "date-time", m.UpdatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Workspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workspace) UnmarshalBinary(b []byte) error {
	var res Workspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceAO1Links workspace a o1 links
//
// swagger:model WorkspaceAO1Links
type WorkspaceAO1Links struct {

	// avatar
	Avatar *WorkspaceAO1LinksAvatar `json:"avatar,omitempty"`

	// html
	HTML *WorkspaceAO1LinksHTML `json:"html,omitempty"`

	// members
	Members *WorkspaceAO1LinksMembers `json:"members,omitempty"`

	// owners
	Owners *WorkspaceAO1LinksOwners `json:"owners,omitempty"`

	// projects
	Projects *WorkspaceAO1LinksProjects `json:"projects,omitempty"`

	// repositories
	Repositories *WorkspaceAO1LinksRepositories `json:"repositories,omitempty"`

	// self
	Self *WorkspaceAO1LinksSelf `json:"self,omitempty"`

	// snippets
	Snippets *WorkspaceAO1LinksSnippets `json:"snippets,omitempty"`
}

// Validate validates this workspace a o1 links
func (m *WorkspaceAO1Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTML(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnippets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceAO1Links) validateAvatar(formats strfmt.Registry) error {

	if swag.IsZero(m.Avatar) { // not required
		return nil
	}

	if m.Avatar != nil {
		if err := m.Avatar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "avatar")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceAO1Links) validateHTML(formats strfmt.Registry) error {

	if swag.IsZero(m.HTML) { // not required
		return nil
	}

	if m.HTML != nil {
		if err := m.HTML.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "html")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceAO1Links) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	if m.Members != nil {
		if err := m.Members.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "members")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceAO1Links) validateOwners(formats strfmt.Registry) error {

	if swag.IsZero(m.Owners) { // not required
		return nil
	}

	if m.Owners != nil {
		if err := m.Owners.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "owners")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceAO1Links) validateProjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	if m.Projects != nil {
		if err := m.Projects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "projects")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceAO1Links) validateRepositories(formats strfmt.Registry) error {

	if swag.IsZero(m.Repositories) { // not required
		return nil
	}

	if m.Repositories != nil {
		if err := m.Repositories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "repositories")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceAO1Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (m *WorkspaceAO1Links) validateSnippets(formats strfmt.Registry) error {

	if swag.IsZero(m.Snippets) { // not required
		return nil
	}

	if m.Snippets != nil {
		if err := m.Snippets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "snippets")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceAO1Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceAO1Links) UnmarshalBinary(b []byte) error {
	var res WorkspaceAO1Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceAO1LinksAvatar workspace a o1 links avatar
//
// swagger:model WorkspaceAO1LinksAvatar
type WorkspaceAO1LinksAvatar struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this workspace a o1 links avatar
func (m *WorkspaceAO1LinksAvatar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceAO1LinksAvatar) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"avatar"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceAO1LinksAvatar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceAO1LinksAvatar) UnmarshalBinary(b []byte) error {
	var res WorkspaceAO1LinksAvatar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceAO1LinksHTML workspace a o1 links HTML
//
// swagger:model WorkspaceAO1LinksHTML
type WorkspaceAO1LinksHTML struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this workspace a o1 links HTML
func (m *WorkspaceAO1LinksHTML) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceAO1LinksHTML) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"html"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceAO1LinksHTML) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceAO1LinksHTML) UnmarshalBinary(b []byte) error {
	var res WorkspaceAO1LinksHTML
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceAO1LinksMembers workspace a o1 links members
//
// swagger:model WorkspaceAO1LinksMembers
type WorkspaceAO1LinksMembers struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this workspace a o1 links members
func (m *WorkspaceAO1LinksMembers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceAO1LinksMembers) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"members"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceAO1LinksMembers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceAO1LinksMembers) UnmarshalBinary(b []byte) error {
	var res WorkspaceAO1LinksMembers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceAO1LinksOwners workspace a o1 links owners
//
// swagger:model WorkspaceAO1LinksOwners
type WorkspaceAO1LinksOwners struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this workspace a o1 links owners
func (m *WorkspaceAO1LinksOwners) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceAO1LinksOwners) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"owners"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceAO1LinksOwners) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceAO1LinksOwners) UnmarshalBinary(b []byte) error {
	var res WorkspaceAO1LinksOwners
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceAO1LinksProjects workspace a o1 links projects
//
// swagger:model WorkspaceAO1LinksProjects
type WorkspaceAO1LinksProjects struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this workspace a o1 links projects
func (m *WorkspaceAO1LinksProjects) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceAO1LinksProjects) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"projects"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceAO1LinksProjects) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceAO1LinksProjects) UnmarshalBinary(b []byte) error {
	var res WorkspaceAO1LinksProjects
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceAO1LinksRepositories workspace a o1 links repositories
//
// swagger:model WorkspaceAO1LinksRepositories
type WorkspaceAO1LinksRepositories struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this workspace a o1 links repositories
func (m *WorkspaceAO1LinksRepositories) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceAO1LinksRepositories) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"repositories"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceAO1LinksRepositories) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceAO1LinksRepositories) UnmarshalBinary(b []byte) error {
	var res WorkspaceAO1LinksRepositories
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceAO1LinksSelf workspace a o1 links self
//
// swagger:model WorkspaceAO1LinksSelf
type WorkspaceAO1LinksSelf struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this workspace a o1 links self
func (m *WorkspaceAO1LinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceAO1LinksSelf) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceAO1LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceAO1LinksSelf) UnmarshalBinary(b []byte) error {
	var res WorkspaceAO1LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkspaceAO1LinksSnippets workspace a o1 links snippets
//
// swagger:model WorkspaceAO1LinksSnippets
type WorkspaceAO1LinksSnippets struct {

	// href
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this workspace a o1 links snippets
func (m *WorkspaceAO1LinksSnippets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceAO1LinksSnippets) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("links"+"."+"snippets"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceAO1LinksSnippets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceAO1LinksSnippets) UnmarshalBinary(b []byte) error {
	var res WorkspaceAO1LinksSnippets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
