// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchCodeSearchResult search code search result
//
// swagger:model search_code_search_result
type SearchCodeSearchResult struct {

	// content match count
	// Read Only: true
	ContentMatchCount int64 `json:"content_match_count,omitempty"`

	// content matches
	// Read Only: true
	ContentMatches []*SearchContentMatch `json:"content_matches"`

	// file
	// Read Only: true
	File *CommitFile `json:"file,omitempty"`

	// path matches
	// Read Only: true
	PathMatches []*SearchSegment `json:"path_matches"`

	// type
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this search code search result
func (m *SearchCodeSearchResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentMatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathMatches(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchCodeSearchResult) validateContentMatches(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentMatches) { // not required
		return nil
	}

	for i := 0; i < len(m.ContentMatches); i++ {
		if swag.IsZero(m.ContentMatches[i]) { // not required
			continue
		}

		if m.ContentMatches[i] != nil {
			if err := m.ContentMatches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_matches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchCodeSearchResult) validateFile(formats strfmt.Registry) error {

	if swag.IsZero(m.File) { // not required
		return nil
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *SearchCodeSearchResult) validatePathMatches(formats strfmt.Registry) error {

	if swag.IsZero(m.PathMatches) { // not required
		return nil
	}

	for i := 0; i < len(m.PathMatches); i++ {
		if swag.IsZero(m.PathMatches[i]) { // not required
			continue
		}

		if m.PathMatches[i] != nil {
			if err := m.PathMatches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("path_matches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchCodeSearchResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchCodeSearchResult) UnmarshalBinary(b []byte) error {
	var res SearchCodeSearchResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
