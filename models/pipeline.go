// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Pipeline pipeline
//
// swagger:model pipeline
type Pipeline struct {

	// object additional properties
	ObjectAdditionalProperties map[string]interface{} `json:"-"`

	// The build number of the pipeline.
	BuildNumber int64 `json:"build_number,omitempty"`

	// The number of build seconds used by this pipeline.
	BuildSecondsUsed int64 `json:"build_seconds_used,omitempty"`

	// The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.
	// Format: date-time
	CompletedOn strfmt.DateTime `json:"completed_on,omitempty"`

	// The timestamp when the pipeline was created.
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// The Bitbucket account that was used to create the pipeline.
	Creator *Account `json:"creator,omitempty"`

	// repository
	Repository *Repository `json:"repository,omitempty"`

	// state
	State *PipelineState `json:"state,omitempty"`

	// The target that the pipeline built.
	Target *PipelineTarget `json:"target,omitempty"`

	// The trigger used for the pipeline.
	Trigger *PipelineTrigger `json:"trigger,omitempty"`

	// The UUID identifying the pipeline.
	UUID string `json:"uuid,omitempty"`

	// a o1 additional properties
	AO1AdditionalProperties map[string]interface{} `json:"-"`
}

// Type gets the type of this subtype
func (m *Pipeline) Type() string {
	return "pipeline"
}

// SetType sets the type of this subtype
func (m *Pipeline) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Pipeline) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The build number of the pipeline.
		BuildNumber int64 `json:"build_number,omitempty"`

		// The number of build seconds used by this pipeline.
		BuildSecondsUsed int64 `json:"build_seconds_used,omitempty"`

		// The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.
		// Format: date-time
		CompletedOn strfmt.DateTime `json:"completed_on,omitempty"`

		// The timestamp when the pipeline was created.
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// The Bitbucket account that was used to create the pipeline.
		Creator *Account `json:"creator,omitempty"`

		// repository
		Repository *Repository `json:"repository,omitempty"`

		// state
		State *PipelineState `json:"state,omitempty"`

		// The target that the pipeline built.
		Target *PipelineTarget `json:"target,omitempty"`

		// The trigger used for the pipeline.
		Trigger *PipelineTrigger `json:"trigger,omitempty"`

		// The UUID identifying the pipeline.
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result Pipeline

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.BuildNumber = data.BuildNumber
	result.BuildSecondsUsed = data.BuildSecondsUsed
	result.CompletedOn = data.CompletedOn
	result.CreatedOn = data.CreatedOn
	result.Creator = data.Creator
	result.Repository = data.Repository
	result.State = data.State
	result.Target = data.Target
	result.Trigger = data.Trigger
	result.UUID = data.UUID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Pipeline) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The build number of the pipeline.
		BuildNumber int64 `json:"build_number,omitempty"`

		// The number of build seconds used by this pipeline.
		BuildSecondsUsed int64 `json:"build_seconds_used,omitempty"`

		// The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.
		// Format: date-time
		CompletedOn strfmt.DateTime `json:"completed_on,omitempty"`

		// The timestamp when the pipeline was created.
		// Format: date-time
		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		// The Bitbucket account that was used to create the pipeline.
		Creator *Account `json:"creator,omitempty"`

		// repository
		Repository *Repository `json:"repository,omitempty"`

		// state
		State *PipelineState `json:"state,omitempty"`

		// The target that the pipeline built.
		Target *PipelineTarget `json:"target,omitempty"`

		// The trigger used for the pipeline.
		Trigger *PipelineTrigger `json:"trigger,omitempty"`

		// The UUID identifying the pipeline.
		UUID string `json:"uuid,omitempty"`

		AO1AdditionalProperties map[string]interface{} `json:"-"`
	}{

		BuildNumber: m.BuildNumber,

		BuildSecondsUsed: m.BuildSecondsUsed,

		CompletedOn: m.CompletedOn,

		CreatedOn: m.CreatedOn,

		Creator: m.Creator,

		Repository: m.Repository,

		State: m.State,

		Target: m.Target,

		Trigger: m.Trigger,

		UUID: m.UUID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this pipeline
func (m *Pipeline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pipeline) validateCompletedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("completed_on", "body", "date-time", m.CompletedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Pipeline) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Pipeline) validateCreator(formats strfmt.Registry) error {

	if swag.IsZero(m.Creator) { // not required
		return nil
	}

	if m.Creator != nil {
		if err := m.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *Pipeline) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *Pipeline) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *Pipeline) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

func (m *Pipeline) validateTrigger(formats strfmt.Registry) error {

	if swag.IsZero(m.Trigger) { // not required
		return nil
	}

	if m.Trigger != nil {
		if err := m.Trigger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pipeline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pipeline) UnmarshalBinary(b []byte) error {
	var res Pipeline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
