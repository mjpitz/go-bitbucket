// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAnnotationParams creates a new GetAnnotationParams object
// with the default values initialized.
func NewGetAnnotationParams() *GetAnnotationParams {
	var ()
	return &GetAnnotationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAnnotationParamsWithTimeout creates a new GetAnnotationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAnnotationParamsWithTimeout(timeout time.Duration) *GetAnnotationParams {
	var ()
	return &GetAnnotationParams{

		timeout: timeout,
	}
}

// NewGetAnnotationParamsWithContext creates a new GetAnnotationParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAnnotationParamsWithContext(ctx context.Context) *GetAnnotationParams {
	var ()
	return &GetAnnotationParams{

		Context: ctx,
	}
}

// NewGetAnnotationParamsWithHTTPClient creates a new GetAnnotationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAnnotationParamsWithHTTPClient(client *http.Client) *GetAnnotationParams {
	var ()
	return &GetAnnotationParams{
		HTTPClient: client,
	}
}

/*GetAnnotationParams contains all the parameters to send to the API endpoint
for the get annotation operation typically these are written to a http.Request
*/
type GetAnnotationParams struct {

	/*AnnotationID
	  Either the uuid or external-id of the annotation.

	*/
	AnnotationID string
	/*Commit
	  The commit the report belongs to.

	*/
	Commit string
	/*RepoSlug
	  The repository.

	*/
	RepoSlug string
	/*ReportID
	  Either the uuid or external-id of the report.

	*/
	ReportID string
	/*Username
	  The account.

	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get annotation params
func (o *GetAnnotationParams) WithTimeout(timeout time.Duration) *GetAnnotationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get annotation params
func (o *GetAnnotationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get annotation params
func (o *GetAnnotationParams) WithContext(ctx context.Context) *GetAnnotationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get annotation params
func (o *GetAnnotationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get annotation params
func (o *GetAnnotationParams) WithHTTPClient(client *http.Client) *GetAnnotationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get annotation params
func (o *GetAnnotationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAnnotationID adds the annotationID to the get annotation params
func (o *GetAnnotationParams) WithAnnotationID(annotationID string) *GetAnnotationParams {
	o.SetAnnotationID(annotationID)
	return o
}

// SetAnnotationID adds the annotationId to the get annotation params
func (o *GetAnnotationParams) SetAnnotationID(annotationID string) {
	o.AnnotationID = annotationID
}

// WithCommit adds the commit to the get annotation params
func (o *GetAnnotationParams) WithCommit(commit string) *GetAnnotationParams {
	o.SetCommit(commit)
	return o
}

// SetCommit adds the commit to the get annotation params
func (o *GetAnnotationParams) SetCommit(commit string) {
	o.Commit = commit
}

// WithRepoSlug adds the repoSlug to the get annotation params
func (o *GetAnnotationParams) WithRepoSlug(repoSlug string) *GetAnnotationParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the get annotation params
func (o *GetAnnotationParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithReportID adds the reportID to the get annotation params
func (o *GetAnnotationParams) WithReportID(reportID string) *GetAnnotationParams {
	o.SetReportID(reportID)
	return o
}

// SetReportID adds the reportId to the get annotation params
func (o *GetAnnotationParams) SetReportID(reportID string) {
	o.ReportID = reportID
}

// WithUsername adds the username to the get annotation params
func (o *GetAnnotationParams) WithUsername(username string) *GetAnnotationParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get annotation params
func (o *GetAnnotationParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetAnnotationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param annotationId
	if err := r.SetPathParam("annotationId", o.AnnotationID); err != nil {
		return err
	}

	// path param commit
	if err := r.SetPathParam("commit", o.Commit); err != nil {
		return err
	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	// path param reportId
	if err := r.SetPathParam("reportId", o.ReportID); err != nil {
		return err
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
