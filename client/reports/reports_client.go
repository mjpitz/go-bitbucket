// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new reports API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reports API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BulkCreateOrUpdateAnnotations(params *BulkCreateOrUpdateAnnotationsParams) (*BulkCreateOrUpdateAnnotationsOK, error)

	CreateOrUpdateAnnotation(params *CreateOrUpdateAnnotationParams) (*CreateOrUpdateAnnotationOK, error)

	CreateOrUpdateReport(params *CreateOrUpdateReportParams) (*CreateOrUpdateReportOK, error)

	DeleteAnnotation(params *DeleteAnnotationParams) (*DeleteAnnotationNoContent, error)

	DeleteReport(params *DeleteReportParams) (*DeleteReportNoContent, error)

	GetAnnotation(params *GetAnnotationParams) (*GetAnnotationOK, error)

	GetAnnotationsForReport(params *GetAnnotationsForReportParams) (*GetAnnotationsForReportOK, error)

	GetReport(params *GetReportParams) (*GetReportOK, error)

	GetReportsForCommit(params *GetReportsForCommitParams) (*GetReportsForCommitOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkCreateOrUpdateAnnotations Bulk upload of annotations.
Annotations are individual findings that have been identified as part of a report, for example, a line of code that represents a vulnerability. These annotations can be attached to a specific file and even a specific line in that file, however, that is optional. Annotations are not mandatory and a report can contain up to 1000 annotations.

Add the annotations you want to upload as objects in a JSON array and make sure each annotation has the external_id field set to a unique value. If you want to use an existing id from your own system, we recommend prefixing it with your system's name to avoid collisions, for example, mySystem-annotation001. The external id can later be used to identify the report as an alternative to the generated [UUID](https://developer.atlassian.com/bitbucket/api/2/reference/meta/uri-uuid#uuid). You can upload up to 100 annotations per POST request.

### Sample cURL request:
```
curl --location 'https://api.bitbucket.org/2.0/repositories/<username>/<reposity-name>/commit/<commit-hash>/reports/mysystem-001/annotations' \
--header 'Content-Type: application/json' \
--data-raw '[
  {
        "external_id": "mysystem-annotation001",
        "title": "Security scan report",
        "annotation_type": "VULNERABILITY",
        "summary": "This line represents a security threat.",
        "severity": "HIGH",
      "path": "my-service/src/main/java/com/myCompany/mysystem/logic/Main.java",
        "line": 42
  },
  {
        "external_id": "mySystem-annotation002",
        "title": "Bug report",
        "annotation_type": "BUG",
        "result": "FAILED",
        "summary": "This line might introduce a bug.",
        "severity": "MEDIUM",
      "path": "my-service/src/main/java/com/myCompany/mysystem/logic/Helper.java",
        "line": 13
  }
]'
```

### Possible field values:
annotation_type: VULNERABILITY, CODE_SMELL, BUG
result: PASSED, FAILED, IGNORED, SKIPPED
severity: HIGH, MEDIUM, LOW, CRITICAL

Please refer to the [Code Insights documentation](https://confluence.atlassian.com/bitbucket/code-insights-994316785.html) for more information.

*/
func (a *Client) BulkCreateOrUpdateAnnotations(params *BulkCreateOrUpdateAnnotationsParams) (*BulkCreateOrUpdateAnnotationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCreateOrUpdateAnnotationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkCreateOrUpdateAnnotations",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}/annotations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCreateOrUpdateAnnotationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCreateOrUpdateAnnotationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bulkCreateOrUpdateAnnotations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrUpdateAnnotation Creates or updates an individual annotation for the specified report.
Annotations are individual findings that have been identified as part of a report, for example, a line of code that represents a vulnerability. These annotations can be attached to a specific file and even a specific line in that file, however, that is optional. Annotations are not mandatory and a report can contain up to 1000 annotations.

Just as reports, annotation needs to be uploaded with a unique ID that can later be used to identify the report as an alternative to the generated [UUID](https://developer.atlassian.com/bitbucket/api/2/reference/meta/uri-uuid#uuid). If you want to use an existing id from your own system, we recommend prefixing it with your system's name to avoid collisions, for example, mySystem-annotation001.

### Sample cURL request:
```
curl --request PUT 'https://api.bitbucket.org/2.0/repositories/<username>/<reposity-name>/commit/<commit-hash>/reports/mySystem-001/annotations/mysystem-annotation001' \
--header 'Content-Type: application/json' \
--data-raw '{
    "title": "Security scan report",
    "annotation_type": "VULNERABILITY",
    "summary": "This line represents a security thread.",
    "severity": "HIGH",
    "path": "my-service/src/main/java/com/myCompany/mysystem/logic/Main.java",
    "line": 42
}'
```

### Possible field values:
annotation_type: VULNERABILITY, CODE_SMELL, BUG
result: PASSED, FAILED, IGNORED, SKIPPED
severity: HIGH, MEDIUM, LOW, CRITICAL

Please refer to the [Code Insights documentation](https://confluence.atlassian.com/bitbucket/code-insights-994316785.html) for more information.

*/
func (a *Client) CreateOrUpdateAnnotation(params *CreateOrUpdateAnnotationParams) (*CreateOrUpdateAnnotationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateAnnotationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrUpdateAnnotation",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}/annotations/{annotationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrUpdateAnnotationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrUpdateAnnotationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrUpdateAnnotation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrUpdateReport Creates or updates a report for the specified commit.
To upload a report, make sure to generate an ID that is unique across all reports for that commit. If you want to use an existing id from your own system, we recommend prefixing it with your system's name to avoid collisions, for example, mySystem-001.

### Sample cURL request:
```
curl --request PUT 'https://api.bitbucket.org/2.0/repositories/<username>/<reposity-name>/commit/<commit-hash>/reports/mysystem-001' \
--header 'Content-Type: application/json' \
--data-raw '{
    "title": "Security scan report",
    "details": "This pull request introduces 10 new dependency vulnerabilities.",
    "report_type": "SECURITY",
    "reporter": "mySystem",
    "link": "http://www.mysystem.com/reports/001",
    "result": "FAILED",
    "data": [
        {
            "title": "Duration (seconds)",
            "type": "DURATION",
            "value": 14
        },
        {
            "title": "Safe to merge?",
            "type": "BOOLEAN",
            "value": false
        }
    ]
}'
```

### Possible field values:
report_type: SECURITY, COVERAGE, TEST, BUG
result: PASSED, FAILED, PENDING
data.type: BOOLEAN, DATE, DURATION, LINK, NUMBER, PERCENTAGE, TEXT

Please refer to the [Code Insights documentation](https://confluence.atlassian.com/bitbucket/code-insights-994316785.html) for more information.

*/
func (a *Client) CreateOrUpdateReport(params *CreateOrUpdateReportParams) (*CreateOrUpdateReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrUpdateReport",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrUpdateReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrUpdateReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrUpdateReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAnnotation Deletes a single Annotation matching the provided ID.
*/
func (a *Client) DeleteAnnotation(params *DeleteAnnotationParams) (*DeleteAnnotationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAnnotationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAnnotation",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}/annotations/{annotationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAnnotationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAnnotationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAnnotation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteReport Deletes a single Report matching the provided ID.
*/
func (a *Client) DeleteReport(params *DeleteReportParams) (*DeleteReportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteReport",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReportNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAnnotation Returns a single Annotation matching the provided ID.
*/
func (a *Client) GetAnnotation(params *GetAnnotationParams) (*GetAnnotationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnnotationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnnotation",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}/annotations/{annotationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnnotationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAnnotationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAnnotation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAnnotationsForReport Returns a paginated list of Annotations for a specified report.
*/
func (a *Client) GetAnnotationsForReport(params *GetAnnotationsForReportParams) (*GetAnnotationsForReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAnnotationsForReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAnnotationsForReport",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}/annotations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAnnotationsForReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAnnotationsForReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAnnotationsForReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReport Returns a single Report matching the provided ID.
*/
func (a *Client) GetReport(params *GetReportParams) (*GetReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReport",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportsForCommit Returns a paginated list of Reports linked to this commit.
*/
func (a *Client) GetReportsForCommit(params *GetReportsForCommitParams) (*GetReportsForCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportsForCommitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportsForCommit",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{commit}/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportsForCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportsForCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReportsForCommit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
