// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// NewCreateOrUpdateReportParams creates a new CreateOrUpdateReportParams object
// with the default values initialized.
func NewCreateOrUpdateReportParams() *CreateOrUpdateReportParams {
	var ()
	return &CreateOrUpdateReportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateOrUpdateReportParamsWithTimeout creates a new CreateOrUpdateReportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateOrUpdateReportParamsWithTimeout(timeout time.Duration) *CreateOrUpdateReportParams {
	var ()
	return &CreateOrUpdateReportParams{

		timeout: timeout,
	}
}

// NewCreateOrUpdateReportParamsWithContext creates a new CreateOrUpdateReportParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateOrUpdateReportParamsWithContext(ctx context.Context) *CreateOrUpdateReportParams {
	var ()
	return &CreateOrUpdateReportParams{

		Context: ctx,
	}
}

// NewCreateOrUpdateReportParamsWithHTTPClient creates a new CreateOrUpdateReportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateOrUpdateReportParamsWithHTTPClient(client *http.Client) *CreateOrUpdateReportParams {
	var ()
	return &CreateOrUpdateReportParams{
		HTTPClient: client,
	}
}

/*CreateOrUpdateReportParams contains all the parameters to send to the API endpoint
for the create or update report operation typically these are written to a http.Request
*/
type CreateOrUpdateReportParams struct {

	/*Body
	  The report to create or update

	*/
	Body *models.Report
	/*Commit
	  The commit the report belongs to.

	*/
	Commit string
	/*RepoSlug
	  The repository.

	*/
	RepoSlug string
	/*ReportID
	  Either the uuid or external-id of the report.

	*/
	ReportID string
	/*Username
	  The account.

	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create or update report params
func (o *CreateOrUpdateReportParams) WithTimeout(timeout time.Duration) *CreateOrUpdateReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create or update report params
func (o *CreateOrUpdateReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create or update report params
func (o *CreateOrUpdateReportParams) WithContext(ctx context.Context) *CreateOrUpdateReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create or update report params
func (o *CreateOrUpdateReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create or update report params
func (o *CreateOrUpdateReportParams) WithHTTPClient(client *http.Client) *CreateOrUpdateReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create or update report params
func (o *CreateOrUpdateReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the create or update report params
func (o *CreateOrUpdateReportParams) WithBody(body *models.Report) *CreateOrUpdateReportParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create or update report params
func (o *CreateOrUpdateReportParams) SetBody(body *models.Report) {
	o.Body = body
}

// WithCommit adds the commit to the create or update report params
func (o *CreateOrUpdateReportParams) WithCommit(commit string) *CreateOrUpdateReportParams {
	o.SetCommit(commit)
	return o
}

// SetCommit adds the commit to the create or update report params
func (o *CreateOrUpdateReportParams) SetCommit(commit string) {
	o.Commit = commit
}

// WithRepoSlug adds the repoSlug to the create or update report params
func (o *CreateOrUpdateReportParams) WithRepoSlug(repoSlug string) *CreateOrUpdateReportParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the create or update report params
func (o *CreateOrUpdateReportParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithReportID adds the reportID to the create or update report params
func (o *CreateOrUpdateReportParams) WithReportID(reportID string) *CreateOrUpdateReportParams {
	o.SetReportID(reportID)
	return o
}

// SetReportID adds the reportId to the create or update report params
func (o *CreateOrUpdateReportParams) SetReportID(reportID string) {
	o.ReportID = reportID
}

// WithUsername adds the username to the create or update report params
func (o *CreateOrUpdateReportParams) WithUsername(username string) *CreateOrUpdateReportParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the create or update report params
func (o *CreateOrUpdateReportParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *CreateOrUpdateReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param commit
	if err := r.SetPathParam("commit", o.Commit); err != nil {
		return err
	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	// path param reportId
	if err := r.SetPathParam("reportId", o.ReportID); err != nil {
		return err
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
