// Code generated by go-swagger; DO NOT EDIT.

package branching_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsReader is a Reader for the PutRepositoriesWorkspaceRepoSlugBranchingModelSettings structure.
type PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK creates a PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK with default headers values
func NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK() *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK {
	return &PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK{}
}

/*PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK handles this case with default header values.

The updated branching model configuration
*/
type PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK struct {
	Payload *models.BranchingModelSettings
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/branching-model/settings][%d] putRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK  %+v", 200, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK) GetPayload() *models.BranchingModelSettings {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BranchingModelSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest creates a PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest with default headers values
func NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest() *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest {
	return &PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest{}
}

/*PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest handles this case with default header values.

If the request contains invalid branching model configuration
*/
type PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/branching-model/settings][%d] putRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized creates a PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized with default headers values
func NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized() *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized {
	return &PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized{}
}

/*PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized handles this case with default header values.

If the request was not authenticated
*/
type PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/branching-model/settings][%d] putRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden creates a PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden with default headers values
func NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden() *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden {
	return &PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden{}
}

/*PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden handles this case with default header values.

If the authenticated user does not have admin access to the repository
*/
type PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/branching-model/settings][%d] putRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound creates a PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound with default headers values
func NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound() *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound {
	return &PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound{}
}

/*PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound handles this case with default header values.

If the repository does not exist
*/
type PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/branching-model/settings][%d] putRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
