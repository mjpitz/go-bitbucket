// Code generated by go-swagger; DO NOT EDIT.

package workspaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workspaces API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workspaces API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteWorkspacesWorkspaceHooksUID(params *DeleteWorkspacesWorkspaceHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWorkspacesWorkspaceHooksUIDNoContent, error)

	GetUserPermissionsWorkspaces(params *GetUserPermissionsWorkspacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPermissionsWorkspacesOK, error)

	GetWorkspaces(params *GetWorkspacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesOK, error)

	GetWorkspacesWorkspace(params *GetWorkspacesWorkspaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceOK, error)

	GetWorkspacesWorkspaceHooks(params *GetWorkspacesWorkspaceHooksParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceHooksOK, error)

	GetWorkspacesWorkspaceHooksUID(params *GetWorkspacesWorkspaceHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceHooksUIDOK, error)

	GetWorkspacesWorkspaceMembers(params *GetWorkspacesWorkspaceMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceMembersOK, error)

	GetWorkspacesWorkspaceMembersMember(params *GetWorkspacesWorkspaceMembersMemberParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceMembersMemberOK, error)

	GetWorkspacesWorkspacePermissions(params *GetWorkspacesWorkspacePermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspacePermissionsOK, error)

	GetWorkspacesWorkspaceProjects(params *GetWorkspacesWorkspaceProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceProjectsOK, error)

	PostWorkspacesWorkspaceHooks(params *PostWorkspacesWorkspaceHooksParams, authInfo runtime.ClientAuthInfoWriter) (*PostWorkspacesWorkspaceHooksCreated, error)

	PutWorkspacesWorkspaceHooksUID(params *PutWorkspacesWorkspaceHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutWorkspacesWorkspaceHooksUIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteWorkspacesWorkspaceHooksUID Deletes the specified webhook subscription from the given workspace.
*/
func (a *Client) DeleteWorkspacesWorkspaceHooksUID(params *DeleteWorkspacesWorkspaceHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWorkspacesWorkspaceHooksUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkspacesWorkspaceHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteWorkspacesWorkspaceHooksUID",
		Method:             "DELETE",
		PathPattern:        "/workspaces/{workspace}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkspacesWorkspaceHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkspacesWorkspaceHooksUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteWorkspacesWorkspaceHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserPermissionsWorkspaces Returns an object for each workspace the caller is a member of, and
their effective role - the highest level of privilege the caller has.
If a user is a member of multiple groups with distinct roles, only the
highest level is returned.

Permissions can be:

* `owner`
* `collaborator`
* `member`

Example:

```
$ curl https://api.bitbucket.org/2.0/user/permissions/workspaces

{
  "pagelen": 10,
  "page": 1,
  "size": 1,
  "values": [
    {
      "type": "workspace_membership",
      "permission": "owner",
      "last_accessed": "2019-03-07T12:35:02.900024+00:00",
      "added_on": "2018-10-11T17:42:02.961424+00:00",

      "user": {
        "type": "user",
        "uuid": "{470c176d-3574-44ea-bb41-89e8638bcca4}",
        "nickname": "evzijst",
        "display_name": "Erik van Zijst",
      },

      "workspace": {
        "type": "workspace",
        "uuid": "{a15fb181-db1f-48f7-b41f-e1eff06929d6}",
        "slug": "bitbucket",
        "name": "Atlassian Bitbucket",
      }
    }
  ]
}
```

Results may be further [filtered or sorted](../../../meta/filtering) by
workspace or permission by adding the following query string parameters:

* `q=workspace.slug="bitbucket"` or `q=permission="owner"`
* `sort=workspace.slug`

Note that the query parameter values need to be URL escaped so that `=`
would become `%3D`.
*/
func (a *Client) GetUserPermissionsWorkspaces(params *GetUserPermissionsWorkspacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPermissionsWorkspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPermissionsWorkspacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserPermissionsWorkspaces",
		Method:             "GET",
		PathPattern:        "/user/permissions/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPermissionsWorkspacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPermissionsWorkspacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserPermissionsWorkspaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkspaces get workspaces API
*/
func (a *Client) GetWorkspaces(params *GetWorkspacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkspaces",
		Method:             "GET",
		PathPattern:        "/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkspacesWorkspace get workspaces workspace API
*/
func (a *Client) GetWorkspacesWorkspace(params *GetWorkspacesWorkspaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacesWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkspacesWorkspace",
		Method:             "GET",
		PathPattern:        "/workspaces/{workspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacesWorkspaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacesWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspacesWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkspacesWorkspaceHooks Returns a paginated list of webhooks installed on this workspace.
*/
func (a *Client) GetWorkspacesWorkspaceHooks(params *GetWorkspacesWorkspaceHooksParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceHooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacesWorkspaceHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkspacesWorkspaceHooks",
		Method:             "GET",
		PathPattern:        "/workspaces/{workspace}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacesWorkspaceHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacesWorkspaceHooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspacesWorkspaceHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkspacesWorkspaceHooksUID Returns the webhook with the specified id installed on the given
workspace.
*/
func (a *Client) GetWorkspacesWorkspaceHooksUID(params *GetWorkspacesWorkspaceHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceHooksUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacesWorkspaceHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkspacesWorkspaceHooksUID",
		Method:             "GET",
		PathPattern:        "/workspaces/{workspace}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacesWorkspaceHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacesWorkspaceHooksUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspacesWorkspaceHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkspacesWorkspaceMembers get workspaces workspace members API
*/
func (a *Client) GetWorkspacesWorkspaceMembers(params *GetWorkspacesWorkspaceMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacesWorkspaceMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkspacesWorkspaceMembers",
		Method:             "GET",
		PathPattern:        "/workspaces/{workspace}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacesWorkspaceMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacesWorkspaceMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspacesWorkspaceMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkspacesWorkspaceMembersMember get workspaces workspace members member API
*/
func (a *Client) GetWorkspacesWorkspaceMembersMember(params *GetWorkspacesWorkspaceMembersMemberParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceMembersMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacesWorkspaceMembersMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkspacesWorkspaceMembersMember",
		Method:             "GET",
		PathPattern:        "/workspaces/{workspace}/members/{member}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacesWorkspaceMembersMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacesWorkspaceMembersMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspacesWorkspaceMembersMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkspacesWorkspacePermissions get workspaces workspace permissions API
*/
func (a *Client) GetWorkspacesWorkspacePermissions(params *GetWorkspacesWorkspacePermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspacePermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacesWorkspacePermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkspacesWorkspacePermissions",
		Method:             "GET",
		PathPattern:        "/workspaces/{workspace}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacesWorkspacePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacesWorkspacePermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspacesWorkspacePermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkspacesWorkspaceProjects get workspaces workspace projects API
*/
func (a *Client) GetWorkspacesWorkspaceProjects(params *GetWorkspacesWorkspaceProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkspacesWorkspaceProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacesWorkspaceProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkspacesWorkspaceProjects",
		Method:             "GET",
		PathPattern:        "/workspaces/{workspace}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacesWorkspaceProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacesWorkspaceProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspacesWorkspaceProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWorkspacesWorkspaceHooks Creates a new webhook on the specified workspace.

Workspace webhooks are fired for events from all repositories contained
by that workspace.

Note that only owners can install webhooks on workspaces.
*/
func (a *Client) PostWorkspacesWorkspaceHooks(params *PostWorkspacesWorkspaceHooksParams, authInfo runtime.ClientAuthInfoWriter) (*PostWorkspacesWorkspaceHooksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkspacesWorkspaceHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWorkspacesWorkspaceHooks",
		Method:             "POST",
		PathPattern:        "/workspaces/{workspace}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkspacesWorkspaceHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkspacesWorkspaceHooksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWorkspacesWorkspaceHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutWorkspacesWorkspaceHooksUID Updates the specified webhook subscription.

The following properties can be mutated:

* `description`
* `url`
* `active`
* `events`
*/
func (a *Client) PutWorkspacesWorkspaceHooksUID(params *PutWorkspacesWorkspaceHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutWorkspacesWorkspaceHooksUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWorkspacesWorkspaceHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutWorkspacesWorkspaceHooksUID",
		Method:             "PUT",
		PathPattern:        "/workspaces/{workspace}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutWorkspacesWorkspaceHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWorkspacesWorkspaceHooksUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutWorkspacesWorkspaceHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
