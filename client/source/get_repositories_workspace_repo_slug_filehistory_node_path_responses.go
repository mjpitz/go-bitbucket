// Code generated by go-swagger; DO NOT EDIT.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathReader is a Reader for the GetRepositoriesWorkspaceRepoSlugFilehistoryNodePath structure.
type GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK creates a GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK() *GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK {
	return &GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK{}
}

/*GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK handles this case with default header values.

A paginated list of commits that modified the specified file
*/
type GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK struct {
	Payload *models.PaginatedFiles
}

func (o *GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/filehistory/{node}/{path}][%d] getRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK) GetPayload() *models.PaginatedFiles {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedFiles)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound creates a GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound() *GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound {
	return &GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound handles this case with default header values.

If the repository does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/filehistory/{node}/{path}][%d] getRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugFilehistoryNodePathNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
