// Code generated by go-swagger; DO NOT EDIT.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugSrcNodePathReader is a Reader for the GetRepositoriesWorkspaceRepoSlugSrcNodePath structure.
type GetRepositoriesWorkspaceRepoSlugSrcNodePathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugSrcNodePathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 555:
		result := NewGetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugSrcNodePathOK creates a GetRepositoriesWorkspaceRepoSlugSrcNodePathOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugSrcNodePathOK() *GetRepositoriesWorkspaceRepoSlugSrcNodePathOK {
	return &GetRepositoriesWorkspaceRepoSlugSrcNodePathOK{}
}

/*GetRepositoriesWorkspaceRepoSlugSrcNodePathOK handles this case with default header values.

If the path matches a file, then the raw contents of the file are
returned.  If the `format=meta` query parameter is provided,
a json document containing the file's meta data is
returned.  If the `format=rendered` query parameter is provided,
the contents of the file in HTML-formated rendered markup is returned.
If the path matches a directory, then a paginated
list of file and directory entries is returned (if the
`format=meta` query parameter was provided, then the json document
containing the directory's meta data is returned.)

*/
type GetRepositoriesWorkspaceRepoSlugSrcNodePathOK struct {
	Payload *models.PaginatedTreeentries
}

func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/src/{node}/{path}][%d] getRepositoriesWorkspaceRepoSlugSrcNodePathOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathOK) GetPayload() *models.PaginatedTreeentries {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedTreeentries)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound creates a GetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound() *GetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound {
	return &GetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound handles this case with default header values.

If the path or commit in the URL does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/src/{node}/{path}][%d] getRepositoriesWorkspaceRepoSlugSrcNodePathNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555 creates a GetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555 with default headers values
func NewGetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555() *GetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555 {
	return &GetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555{}
}

/*GetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555 handles this case with default header values.

If the call times out, possibly because the specifiedrecursion depth is too large.
*/
type GetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555 struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/src/{node}/{path}][%d] getRepositoriesWorkspaceRepoSlugSrcNodePathStatus555  %+v", 555, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathStatus555) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
