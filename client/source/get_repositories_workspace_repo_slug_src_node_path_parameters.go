// Code generated by go-swagger; DO NOT EDIT.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRepositoriesWorkspaceRepoSlugSrcNodePathParams creates a new GetRepositoriesWorkspaceRepoSlugSrcNodePathParams object
// with the default values initialized.
func NewGetRepositoriesWorkspaceRepoSlugSrcNodePathParams() *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugSrcNodePathParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugSrcNodePathParamsWithTimeout creates a new GetRepositoriesWorkspaceRepoSlugSrcNodePathParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepositoriesWorkspaceRepoSlugSrcNodePathParamsWithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugSrcNodePathParams{

		timeout: timeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugSrcNodePathParamsWithContext creates a new GetRepositoriesWorkspaceRepoSlugSrcNodePathParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepositoriesWorkspaceRepoSlugSrcNodePathParamsWithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugSrcNodePathParams{

		Context: ctx,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugSrcNodePathParamsWithHTTPClient creates a new GetRepositoriesWorkspaceRepoSlugSrcNodePathParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepositoriesWorkspaceRepoSlugSrcNodePathParamsWithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugSrcNodePathParams{
		HTTPClient: client,
	}
}

/*GetRepositoriesWorkspaceRepoSlugSrcNodePathParams contains all the parameters to send to the API endpoint
for the get repositories workspace repo slug src node path operation typically these are written to a http.Request
*/
type GetRepositoriesWorkspaceRepoSlugSrcNodePathParams struct {

	/*Format
	  If 'meta' is provided, returns the (json) meta data for the contents of the file.  If 'rendered' is provided, returns the contents of a non-binary file in HTML-formatted rendered markup. Since Git and Mercurial do not generally track what text encoding scheme is used, this endpoint attempts to detect the most appropriate character encoding. While usually correct, determining the character encoding can be ambiguous which in exceptional cases can lead to misinterpretation of the characters. As such, the raw element in the response object should not be treated as equivalent to the file's actual contents.

	*/
	Format *string
	/*MaxDepth
	  If provided, returns the contents of the repository and its subdirectories recursively until the specified max_depth of nested directories. When omitted, this defaults to 1.

	*/
	MaxDepth *int64
	/*Node*/
	Node string
	/*Path*/
	Path string
	/*Q
	  Optional filter expression as per [filtering and sorting](../../../../../../meta/filtering).

	*/
	Q *string
	/*RepoSlug
	  This can either be the repository slug or the UUID of the repository,
	surrounded by curly-braces, for example: `{repository UUID}`.


	*/
	RepoSlug string
	/*Sort
	  Optional sorting parameter as per [filtering and sorting](../../../../../../meta/filtering#query-sort).

	*/
	Sort *string
	/*Workspace
	  This can either be the workspace ID (slug) or the workspace UUID
	surrounded by curly-braces, for example: `{workspace UUID}`.


	*/
	Workspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFormat adds the format to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithFormat(format *string) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetFormat(format)
	return o
}

// SetFormat adds the format to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetFormat(format *string) {
	o.Format = format
}

// WithMaxDepth adds the maxDepth to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithMaxDepth(maxDepth *int64) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetMaxDepth(maxDepth)
	return o
}

// SetMaxDepth adds the maxDepth to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetMaxDepth(maxDepth *int64) {
	o.MaxDepth = maxDepth
}

// WithNode adds the node to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithNode(node string) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetNode(node)
	return o
}

// SetNode adds the node to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetNode(node string) {
	o.Node = node
}

// WithPath adds the path to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithPath(path string) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetPath(path string) {
	o.Path = path
}

// WithQ adds the q to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithQ(q *string) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetQ(q *string) {
	o.Q = q
}

// WithRepoSlug adds the repoSlug to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithRepoSlug(repoSlug string) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithSort adds the sort to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithSort(sort *string) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithWorkspace adds the workspace to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WithWorkspace(workspace string) *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams {
	o.SetWorkspace(workspace)
	return o
}

// SetWorkspace adds the workspace to the get repositories workspace repo slug src node path params
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) SetWorkspace(workspace string) {
	o.Workspace = workspace
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoriesWorkspaceRepoSlugSrcNodePathParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Format != nil {

		// query param format
		var qrFormat string
		if o.Format != nil {
			qrFormat = *o.Format
		}
		qFormat := qrFormat
		if qFormat != "" {
			if err := r.SetQueryParam("format", qFormat); err != nil {
				return err
			}
		}

	}

	if o.MaxDepth != nil {

		// query param max_depth
		var qrMaxDepth int64
		if o.MaxDepth != nil {
			qrMaxDepth = *o.MaxDepth
		}
		qMaxDepth := swag.FormatInt64(qrMaxDepth)
		if qMaxDepth != "" {
			if err := r.SetQueryParam("max_depth", qMaxDepth); err != nil {
				return err
			}
		}

	}

	// path param node
	if err := r.SetPathParam("node", o.Node); err != nil {
		return err
	}

	// path param path
	if err := r.SetPathParam("path", o.Path); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	// path param workspace
	if err := r.SetPathParam("workspace", o.Workspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
