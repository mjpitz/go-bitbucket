// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// DeleteEnvironmentForRepositoryReader is a Reader for the DeleteEnvironmentForRepository structure.
type DeleteEnvironmentForRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteEnvironmentForRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteEnvironmentForRepositoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteEnvironmentForRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteEnvironmentForRepositoryNoContent creates a DeleteEnvironmentForRepositoryNoContent with default headers values
func NewDeleteEnvironmentForRepositoryNoContent() *DeleteEnvironmentForRepositoryNoContent {
	return &DeleteEnvironmentForRepositoryNoContent{}
}

/*DeleteEnvironmentForRepositoryNoContent handles this case with default header values.

The environment was deleted.
*/
type DeleteEnvironmentForRepositoryNoContent struct {
}

func (o *DeleteEnvironmentForRepositoryNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/environments/{environment_uuid}][%d] deleteEnvironmentForRepositoryNoContent ", 204)
}

func (o *DeleteEnvironmentForRepositoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteEnvironmentForRepositoryNotFound creates a DeleteEnvironmentForRepositoryNotFound with default headers values
func NewDeleteEnvironmentForRepositoryNotFound() *DeleteEnvironmentForRepositoryNotFound {
	return &DeleteEnvironmentForRepositoryNotFound{}
}

/*DeleteEnvironmentForRepositoryNotFound handles this case with default header values.

No account or repository with the UUID provided exists.
*/
type DeleteEnvironmentForRepositoryNotFound struct {
	Payload *models.Error
}

func (o *DeleteEnvironmentForRepositoryNotFound) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/environments/{environment_uuid}][%d] deleteEnvironmentForRepositoryNotFound  %+v", 404, o.Payload)
}

func (o *DeleteEnvironmentForRepositoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteEnvironmentForRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
