// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetDeploymentForRepositoryReader is a Reader for the GetDeploymentForRepository structure.
type GetDeploymentForRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeploymentForRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeploymentForRepositoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetDeploymentForRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDeploymentForRepositoryOK creates a GetDeploymentForRepositoryOK with default headers values
func NewGetDeploymentForRepositoryOK() *GetDeploymentForRepositoryOK {
	return &GetDeploymentForRepositoryOK{}
}

/*GetDeploymentForRepositoryOK handles this case with default header values.

The deployment.
*/
type GetDeploymentForRepositoryOK struct {
	Payload *models.Deployment
}

func (o *GetDeploymentForRepositoryOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/deployments/{deployment_uuid}][%d] getDeploymentForRepositoryOK  %+v", 200, o.Payload)
}

func (o *GetDeploymentForRepositoryOK) GetPayload() *models.Deployment {
	return o.Payload
}

func (o *GetDeploymentForRepositoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Deployment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeploymentForRepositoryNotFound creates a GetDeploymentForRepositoryNotFound with default headers values
func NewGetDeploymentForRepositoryNotFound() *GetDeploymentForRepositoryNotFound {
	return &GetDeploymentForRepositoryNotFound{}
}

/*GetDeploymentForRepositoryNotFound handles this case with default header values.

No account, repository or deployment with the UUID provided exists.
*/
type GetDeploymentForRepositoryNotFound struct {
	Payload *models.Error
}

func (o *GetDeploymentForRepositoryNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/deployments/{deployment_uuid}][%d] getDeploymentForRepositoryNotFound  %+v", 404, o.Payload)
}

func (o *GetDeploymentForRepositoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDeploymentForRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
