// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deployments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deployments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEnvironment(params *CreateEnvironmentParams) (*CreateEnvironmentCreated, error)

	DeleteEnvironmentForRepository(params *DeleteEnvironmentForRepositoryParams) (*DeleteEnvironmentForRepositoryNoContent, error)

	GetDeploymentForRepository(params *GetDeploymentForRepositoryParams) (*GetDeploymentForRepositoryOK, error)

	GetDeploymentsForRepository(params *GetDeploymentsForRepositoryParams) (*GetDeploymentsForRepositoryOK, error)

	GetEnvironmentForRepository(params *GetEnvironmentForRepositoryParams) (*GetEnvironmentForRepositoryOK, error)

	GetEnvironmentsForRepository(params *GetEnvironmentsForRepositoryParams) (*GetEnvironmentsForRepositoryOK, error)

	UpdateEnvironmentForRepository(params *UpdateEnvironmentForRepositoryParams) (*UpdateEnvironmentForRepositoryAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEnvironment Create an environment.
*/
func (a *Client) CreateEnvironment(params *CreateEnvironmentParams) (*CreateEnvironmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEnvironment",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/environments/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEnvironmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEnvironmentForRepository Delete an environment
*/
func (a *Client) DeleteEnvironmentForRepository(params *DeleteEnvironmentForRepositoryParams) (*DeleteEnvironmentForRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnvironmentForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEnvironmentForRepository",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEnvironmentForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEnvironmentForRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEnvironmentForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentForRepository Retrieve a deployment
*/
func (a *Client) GetDeploymentForRepository(params *GetDeploymentForRepositoryParams) (*GetDeploymentForRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentForRepository",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/deployments/{deployment_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentForRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentsForRepository Find deployments
*/
func (a *Client) GetDeploymentsForRepository(params *GetDeploymentsForRepositoryParams) (*GetDeploymentsForRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentsForRepository",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/deployments/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentsForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsForRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentForRepository Retrieve an environment
*/
func (a *Client) GetEnvironmentForRepository(params *GetEnvironmentForRepositoryParams) (*GetEnvironmentForRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentForRepository",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnvironmentForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentForRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentsForRepository Find environments
*/
func (a *Client) GetEnvironmentsForRepository(params *GetEnvironmentsForRepositoryParams) (*GetEnvironmentsForRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentsForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentsForRepository",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/environments/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnvironmentsForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentsForRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentsForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEnvironmentForRepository Update an environment
*/
func (a *Client) UpdateEnvironmentForRepository(params *UpdateEnvironmentForRepositoryParams) (*UpdateEnvironmentForRepositoryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnvironmentForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEnvironmentForRepository",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}/changes/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEnvironmentForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEnvironmentForRepositoryAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEnvironmentForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
