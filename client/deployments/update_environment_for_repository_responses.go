// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// UpdateEnvironmentForRepositoryReader is a Reader for the UpdateEnvironmentForRepository structure.
type UpdateEnvironmentForRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEnvironmentForRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewUpdateEnvironmentForRepositoryAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateEnvironmentForRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateEnvironmentForRepositoryAccepted creates a UpdateEnvironmentForRepositoryAccepted with default headers values
func NewUpdateEnvironmentForRepositoryAccepted() *UpdateEnvironmentForRepositoryAccepted {
	return &UpdateEnvironmentForRepositoryAccepted{}
}

/*UpdateEnvironmentForRepositoryAccepted handles this case with default header values.

The environment update request was accepted.
*/
type UpdateEnvironmentForRepositoryAccepted struct {
}

func (o *UpdateEnvironmentForRepositoryAccepted) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/environments/{environment_uuid}/changes/][%d] updateEnvironmentForRepositoryAccepted ", 202)
}

func (o *UpdateEnvironmentForRepositoryAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEnvironmentForRepositoryNotFound creates a UpdateEnvironmentForRepositoryNotFound with default headers values
func NewUpdateEnvironmentForRepositoryNotFound() *UpdateEnvironmentForRepositoryNotFound {
	return &UpdateEnvironmentForRepositoryNotFound{}
}

/*UpdateEnvironmentForRepositoryNotFound handles this case with default header values.

No account, repository or environment with the UUID provided exists.
*/
type UpdateEnvironmentForRepositoryNotFound struct {
	Payload *models.Error
}

func (o *UpdateEnvironmentForRepositoryNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/environments/{environment_uuid}/changes/][%d] updateEnvironmentForRepositoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEnvironmentForRepositoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEnvironmentForRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
