// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetEnvironmentForRepositoryReader is a Reader for the GetEnvironmentForRepository structure.
type GetEnvironmentForRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEnvironmentForRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEnvironmentForRepositoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetEnvironmentForRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEnvironmentForRepositoryOK creates a GetEnvironmentForRepositoryOK with default headers values
func NewGetEnvironmentForRepositoryOK() *GetEnvironmentForRepositoryOK {
	return &GetEnvironmentForRepositoryOK{}
}

/*GetEnvironmentForRepositoryOK handles this case with default header values.

The environment.
*/
type GetEnvironmentForRepositoryOK struct {
	Payload *models.DeploymentEnvironment
}

func (o *GetEnvironmentForRepositoryOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/environments/{environment_uuid}][%d] getEnvironmentForRepositoryOK  %+v", 200, o.Payload)
}

func (o *GetEnvironmentForRepositoryOK) GetPayload() *models.DeploymentEnvironment {
	return o.Payload
}

func (o *GetEnvironmentForRepositoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentEnvironment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEnvironmentForRepositoryNotFound creates a GetEnvironmentForRepositoryNotFound with default headers values
func NewGetEnvironmentForRepositoryNotFound() *GetEnvironmentForRepositoryNotFound {
	return &GetEnvironmentForRepositoryNotFound{}
}

/*GetEnvironmentForRepositoryNotFound handles this case with default header values.

No account, repository or environment with the UUID provided exists.
*/
type GetEnvironmentForRepositoryNotFound struct {
	Payload *models.Error
}

func (o *GetEnvironmentForRepositoryNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/environments/{environment_uuid}][%d] getEnvironmentForRepositoryNotFound  %+v", 404, o.Payload)
}

func (o *GetEnvironmentForRepositoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEnvironmentForRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
