// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new teams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for teams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteTeamsUsernameHooksUID(params *DeleteTeamsUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamsUsernameHooksUIDNoContent, error)

	GetTeams(params *GetTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsOK, error)

	GetTeamsUsername(params *GetTeamsUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameOK, error)

	GetTeamsUsernameFollowers(params *GetTeamsUsernameFollowersParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameFollowersOK, error)

	GetTeamsUsernameFollowing(params *GetTeamsUsernameFollowingParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameFollowingOK, error)

	GetTeamsUsernameHooks(params *GetTeamsUsernameHooksParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameHooksOK, error)

	GetTeamsUsernameHooksUID(params *GetTeamsUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameHooksUIDOK, error)

	GetTeamsUsernameMembers(params *GetTeamsUsernameMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameMembersOK, error)

	PostTeamsUsernameHooks(params *PostTeamsUsernameHooksParams, authInfo runtime.ClientAuthInfoWriter) (*PostTeamsUsernameHooksCreated, error)

	PutTeamsUsernameHooksUID(params *PutTeamsUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTeamsUsernameHooksUIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteTeamsUsernameHooksUID Deletes the specified webhook subscription from the given team
account.
*/
func (a *Client) DeleteTeamsUsernameHooksUID(params *DeleteTeamsUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamsUsernameHooksUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamsUsernameHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTeamsUsernameHooksUID",
		Method:             "DELETE",
		PathPattern:        "/teams/{username}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamsUsernameHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamsUsernameHooksUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTeamsUsernameHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeams Returns all the teams that the authenticated user is associated
with.

This endpoint has been deprecated, and you should use the new workspaces endpoint.
For more information, see [this post](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
*/
func (a *Client) GetTeams(params *GetTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeams",
		Method:             "GET",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsUsername Gets the public information associated with a team.

If the team's profile is private, `location`, `website` and
`created_on` elements are omitted.
*/
func (a *Client) GetTeamsUsername(params *GetTeamsUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsUsername",
		Method:             "GET",
		PathPattern:        "/teams/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsUsername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsUsernameFollowers Returns the list of accounts that are following this team.
*/
func (a *Client) GetTeamsUsernameFollowers(params *GetTeamsUsernameFollowersParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameFollowersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsUsernameFollowersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsUsernameFollowers",
		Method:             "GET",
		PathPattern:        "/teams/{username}/followers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsUsernameFollowersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsUsernameFollowersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsUsernameFollowers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsUsernameFollowing Returns the list of accounts this team is following.

This endpoint has been deprecated, and you should use the new workspaces endpoint.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
*/
func (a *Client) GetTeamsUsernameFollowing(params *GetTeamsUsernameFollowingParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameFollowingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsUsernameFollowingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsUsernameFollowing",
		Method:             "GET",
		PathPattern:        "/teams/{username}/following",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsUsernameFollowingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsUsernameFollowingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsUsernameFollowing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsUsernameHooks Returns a paginated list of webhooks installed on this team.
*/
func (a *Client) GetTeamsUsernameHooks(params *GetTeamsUsernameHooksParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameHooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsUsernameHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsUsernameHooks",
		Method:             "GET",
		PathPattern:        "/teams/{username}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsUsernameHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsUsernameHooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsUsernameHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsUsernameHooksUID Returns the webhook with the specified id installed on the given
team account.
*/
func (a *Client) GetTeamsUsernameHooksUID(params *GetTeamsUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameHooksUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsUsernameHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsUsernameHooksUID",
		Method:             "GET",
		PathPattern:        "/teams/{username}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsUsernameHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsUsernameHooksUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsUsernameHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsUsernameMembers Returns all members of the specified team. Any member of any of the
team's groups is considered a member of the team. This includes users
in groups that may not actually have access to any of the team's
repositories.

This operation has been deprecated due to privacy changes.
See the [announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/)
for details.

Use this [workspaces](https://developer.atlassian.com/bitbucket/api/2/reference/resource/workspaces/%7Bworkspace%7D/members)
endpoint as a replacement.
*/
func (a *Client) GetTeamsUsernameMembers(params *GetTeamsUsernameMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernameMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsUsernameMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsUsernameMembers",
		Method:             "GET",
		PathPattern:        "/teams/{username}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsUsernameMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsUsernameMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsUsernameMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostTeamsUsernameHooks Creates a new webhook on the specified team.

Team webhooks are fired for events from all repositories belonging to
that team account.

Note that only admins can install webhooks on teams.
*/
func (a *Client) PostTeamsUsernameHooks(params *PostTeamsUsernameHooksParams, authInfo runtime.ClientAuthInfoWriter) (*PostTeamsUsernameHooksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTeamsUsernameHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTeamsUsernameHooks",
		Method:             "POST",
		PathPattern:        "/teams/{username}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTeamsUsernameHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTeamsUsernameHooksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTeamsUsernameHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutTeamsUsernameHooksUID Updates the specified webhook subscription.

The following properties can be mutated:

* `description`
* `url`
* `active`
* `events`
*/
func (a *Client) PutTeamsUsernameHooksUID(params *PutTeamsUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTeamsUsernameHooksUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTeamsUsernameHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTeamsUsernameHooksUID",
		Method:             "PUT",
		PathPattern:        "/teams/{username}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTeamsUsernameHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutTeamsUsernameHooksUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutTeamsUsernameHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
