// Code generated by go-swagger; DO NOT EDIT.

package pullrequests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugPullrequestsActivityReader is a Reader for the GetRepositoriesWorkspaceRepoSlugPullrequestsActivity structure.
type GetRepositoriesWorkspaceRepoSlugPullrequestsActivityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK creates a GetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK() *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK {
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK{}
}

/*GetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK handles this case with default header values.

The pull request activity log
*/
type GetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK struct {
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pullrequests/activity][%d] getRepositoriesWorkspaceRepoSlugPullrequestsActivityOK ", 200)
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized creates a GetRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized() *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized {
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized{}
}

/*GetRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized handles this case with default header values.

If the repository is private and the request was not authenticated.
*/
type GetRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized struct {
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pullrequests/activity][%d] getRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized ", 401)
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound creates a GetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound() *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound {
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound handles this case with default header values.

If the specified repository does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pullrequests/activity][%d] getRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
