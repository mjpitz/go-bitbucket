// Code generated by go-swagger; DO NOT EDIT.

package pullrequests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader is a Reader for the PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID structure.
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK creates a PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK with default headers values
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK() *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK {
	return &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK{}
}

/*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK handles this case with default header values.

The updated comment.
*/
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK struct {
	Payload *models.PullrequestComment
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}][%d] putRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdOK  %+v", 200, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK) GetPayload() *models.PullrequestComment {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PullrequestComment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden creates a PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden with default headers values
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden() *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden {
	return &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden{}
}

/*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden handles this case with default header values.

If the authenticated user does not have access to the comment.
*/
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}][%d] putRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdForbidden  %+v", 403, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound creates a PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound with default headers values
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound() *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound {
	return &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound{}
}

/*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound handles this case with default header values.

If the comment does not exist.
*/
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}][%d] putRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdNotFound  %+v", 404, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
