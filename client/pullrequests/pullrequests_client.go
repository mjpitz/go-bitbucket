// Code generated by go-swagger; DO NOT EDIT.

package pullrequests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pullrequests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pullrequests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(params *DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApprove(params *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveNoContent, error)

	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID(params *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent, error)

	GetPullrequestsSelectedUser(params *GetPullrequestsSelectedUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetPullrequestsSelectedUserOK, error)

	GetRepositoriesWorkspaceRepoSlugDefaultReviewers(params *GetRepositoriesWorkspaceRepoSlugDefaultReviewersParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugDefaultReviewersOK, error)

	GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(params *GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameParams, authInfo runtime.ClientAuthInfoWriter) error

	GetRepositoriesWorkspaceRepoSlugPullrequests(params *GetRepositoriesWorkspaceRepoSlugPullrequestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsOK, error)

	GetRepositoriesWorkspaceRepoSlugPullrequestsActivity(params *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK, error)

	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK, error)

	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivity(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK, error)

	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsOK, error)

	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK, error)

	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommits(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommitsParams, authInfo runtime.ClientAuthInfoWriter) error

	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiff(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffParams, authInfo runtime.ClientAuthInfoWriter) error

	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstat(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstatParams, authInfo runtime.ClientAuthInfoWriter) error

	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskID(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDOK, error)

	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatch(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatchParams, authInfo runtime.ClientAuthInfoWriter) error

	PostRepositoriesWorkspaceRepoSlugPullrequests(params *PostRepositoriesWorkspaceRepoSlugPullrequestsParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugPullrequestsCreated, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApprove(params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveOK, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments(params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDecline(params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineOK, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMerge(params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeOK, *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeAccepted, error)

	PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(params *PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameParams, authInfo runtime.ClientAuthInfoWriter) error

	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID(params *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK, error)

	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID(params *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK, error)

	GetPullrequestsForCommit(params *GetPullrequestsForCommitParams) (*GetPullrequestsForCommitOK, *GetPullrequestsForCommitAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername Removes a default reviewer from the repository.
*/
func (a *Client) DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(params *DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/default-reviewers/{target_username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApprove Redact the authenticated user's approval of the specified pull
request.
*/
func (a *Client) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApprove(params *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApprove",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/approve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApprove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID Deletes a specific pull request comment.
*/
func (a *Client) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID(params *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPullrequestsSelectedUser Returns all pull requests authored by the specified user.

By default only open pull requests are returned. This can be controlled
using the `state` query parameter. To retrieve pull requests that are
in one of multiple states, repeat the `state` parameter for each
individual state.

This endpoint also supports filtering and sorting of the results. See
[filtering and sorting](../../../../meta/filtering) for more details.
*/
func (a *Client) GetPullrequestsSelectedUser(params *GetPullrequestsSelectedUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetPullrequestsSelectedUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPullrequestsSelectedUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPullrequestsSelectedUser",
		Method:             "GET",
		PathPattern:        "/pullrequests/{selected_user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPullrequestsSelectedUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPullrequestsSelectedUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPullrequestsSelectedUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugDefaultReviewers Returns the repository's default reviewers.

These are the users that are automatically added as reviewers on every
new pull request that is created.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugDefaultReviewers(params *GetRepositoriesWorkspaceRepoSlugDefaultReviewersParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugDefaultReviewersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugDefaultReviewersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugDefaultReviewers",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/default-reviewers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugDefaultReviewersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugDefaultReviewersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugDefaultReviewers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername Returns the specified reviewer.

This can be used to test whether a user is among the repository's
default reviewers list. A 404 indicates that that specified user is not
a default reviewer.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(params *GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/default-reviewers/{target_username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequests Returns all pull requests on the specified repository.

By default only open pull requests are returned. This can be controlled
using the `state` query parameter. To retrieve pull requests that are
in one of multiple states, repeat the `state` parameter for each
individual state.

This endpoint also supports filtering and sorting of the results. See
[filtering and sorting](../../../../meta/filtering) for more details.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequests(params *GetRepositoriesWorkspaceRepoSlugPullrequestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequests",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugPullrequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugPullrequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsActivity Returns a paginated list of the pull request's activity log.

This handler serves both a v20 and internal endpoint. The v20 endpoint
returns reviewer comments, updates, and approvals. The internal
endpoint includes those plus tasks and attachments.

Comments created on a file or a line of code have an inline property.

Comment example:
```
{
    "pagelen": 20,
    "values": [
        {
            "comment": {
                "links": {
                    "self": {
                        "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695/comments/118571088"
                    },
                    "html": {
                        "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695/_/diff#comment-118571088"
                    }
                },
                "deleted": false,
                "pullrequest": {
                    "type": "pullrequest",
                    "id": 5695,
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695"
                        },
                        "html": {
                            "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695"
                        }
                    },
                    "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it"
                },
                "content": {
                    "raw": "inline with to a dn from lines",
                    "markup": "markdown",
                    "html": "<p>inline with to a dn from lines</p>",
                    "type": "rendered"
                },
                "created_on": "2019-09-27T00:33:46.039178+00:00",
                "user": {
                    "display_name": "Name Lastname",
                    "uuid": "{}",
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/users/%7B%7D"
                        },
                        "html": {
                            "href": "https://bitbucket.org/%7B%7D/"
                        },
                        "avatar": {
                            "href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128"
                        }
                    },
                    "type": "user",
                    "nickname": "Name",
                    "account_id": ""
                },
                "created_on": "2019-09-27T00:33:46.039178+00:00",
                "user": {
                    "display_name": "Name Lastname",
                    "uuid": "{}",
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/users/%7B%7D"
                        },
                        "html": {
                            "href": "https://bitbucket.org/%7B%7D/"
                        },
                        "avatar": {
                            "href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128"
                        }
                    },
                    "type": "user",
                    "nickname": "Name",
                    "account_id": ""
                },
                "updated_on": "2019-09-27T00:33:46.055384+00:00",
                "inline": {
                    "context_lines": "",
                    "to": null,
                    "path": "",
                    "outdated": false,
                    "from": 211
                },
                "type": "pullrequest_comment",
                "id": 118571088
            },
            "pull_request": {
                "type": "pullrequest",
                "id": 5695,
                "links": {
                    "self": {
                        "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695"
                    },
                    "html": {
                        "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695"
                    }
                },
                "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it"
            }
        }
    ]
}
```

Updates include a state property of OPEN, MERGED, or DECLINED.

Update example:
```
{
    "pagelen": 20,
    "values": [
        {
            "update": {
                "description": "",
                "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it",
                "destination": {
                    "commit": {
                        "type": "commit",
                        "hash": "6a2c16e4a152",
                        "links": {
                            "self": {
                                "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/commit/6a2c16e4a152"
                            },
                            "html": {
                                "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/commits/6a2c16e4a152"
                            }
                        }
                    },
                    "branch": {
                        "name": "master"
                    },
                    "repository": {
                        "name": "Atlaskit-MK-2",
                        "type": "repository",
                        "full_name": "atlassian/atlaskit-mk-2",
                        "links": {
                            "self": {
                                "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2"
                            },
                            "html": {
                                "href": "https://bitbucket.org/atlassian/atlaskit-mk-2"
                            },
                            "avatar": {
                                "href": "https://bytebucket.org/ravatar/%7B%7D?ts=js"
                            }
                        },
                        "uuid": "{}"
                    }
                },
                "reason": "",
                "source": {
                    "commit": {
                        "type": "commit",
                        "hash": "728c8bad1813",
                        "links": {
                            "self": {
                                "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/commit/728c8bad1813"
                            },
                            "html": {
                                "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/commits/728c8bad1813"
                            }
                        }
                    },
                    "branch": {
                        "name": "username/NONE-add-onClick-prop-for-accessibility"
                    },
                    "repository": {
                        "name": "Atlaskit-MK-2",
                        "type": "repository",
                        "full_name": "atlassian/atlaskit-mk-2",
                        "links": {
                            "self": {
                                "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2"
                            },
                            "html": {
                                "href": "https://bitbucket.org/atlassian/atlaskit-mk-2"
                            },
                            "avatar": {
                                "href": "https://bytebucket.org/ravatar/%7B%7D?ts=js"
                            }
                        },
                        "uuid": "{}"
                    }
                },
                "state": "OPEN",
                "author": {
                    "display_name": "Name Lastname",
                    "uuid": "{}",
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/users/%7B%7D"
                        },
                        "html": {
                            "href": "https://bitbucket.org/%7B%7D/"
                        },
                        "avatar": {
                            "href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128"
                        }
                    },
                    "type": "user",
                    "nickname": "Name",
                    "account_id": ""
                },
                "date": "2019-05-10T06:48:25.305565+00:00"
            },
            "pull_request": {
                "type": "pullrequest",
                "id": 5695,
                "links": {
                    "self": {
                        "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695"
                    },
                    "html": {
                        "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695"
                    }
                },
                "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it"
            }
        }
    ]
}
```

Approval example:
```
{
    "pagelen": 20,
    "values": [
        {
            "approval": {
                "date": "2019-09-27T00:37:19.849534+00:00",
                "pullrequest": {
                    "type": "pullrequest",
                    "id": 5695,
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695"
                        },
                        "html": {
                            "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695"
                        }
                    },
                    "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it"
                },
                "user": {
                    "display_name": "Name Lastname",
                    "uuid": "{}",
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/users/%7B%7D"
                        },
                        "html": {
                            "href": "https://bitbucket.org/%7B%7D/"
                        },
                        "avatar": {
                            "href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128"
                        }
                    },
                    "type": "user",
                    "nickname": "Name",
                    "account_id": ""
                }
            },
            "pull_request": {
                "type": "pullrequest",
                "id": 5695,
                "links": {
                    "self": {
                        "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695"
                    },
                    "html": {
                        "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695"
                    }
                },
                "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it"
            }
        }
    ]
}
```
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsActivity(params *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsActivity",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/activity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsActivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugPullrequestsActivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugPullrequestsActivity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID Returns the specified pull request.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivity Returns a paginated list of the pull request's activity log.

This handler serves both a v20 and internal endpoint. The v20 endpoint
returns reviewer comments, updates, and approvals. The internal
endpoint includes those plus tasks and attachments.

Comments created on a file or a line of code have an inline property.

Comment example:
```
{
    "pagelen": 20,
    "values": [
        {
            "comment": {
                "links": {
                    "self": {
                        "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695/comments/118571088"
                    },
                    "html": {
                        "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695/_/diff#comment-118571088"
                    }
                },
                "deleted": false,
                "pullrequest": {
                    "type": "pullrequest",
                    "id": 5695,
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695"
                        },
                        "html": {
                            "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695"
                        }
                    },
                    "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it"
                },
                "content": {
                    "raw": "inline with to a dn from lines",
                    "markup": "markdown",
                    "html": "<p>inline with to a dn from lines</p>",
                    "type": "rendered"
                },
                "created_on": "2019-09-27T00:33:46.039178+00:00",
                "user": {
                    "display_name": "Name Lastname",
                    "uuid": "{}",
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/users/%7B%7D"
                        },
                        "html": {
                            "href": "https://bitbucket.org/%7B%7D/"
                        },
                        "avatar": {
                            "href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128"
                        }
                    },
                    "type": "user",
                    "nickname": "Name",
                    "account_id": ""
                },
                "created_on": "2019-09-27T00:33:46.039178+00:00",
                "user": {
                    "display_name": "Name Lastname",
                    "uuid": "{}",
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/users/%7B%7D"
                        },
                        "html": {
                            "href": "https://bitbucket.org/%7B%7D/"
                        },
                        "avatar": {
                            "href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128"
                        }
                    },
                    "type": "user",
                    "nickname": "Name",
                    "account_id": ""
                },
                "updated_on": "2019-09-27T00:33:46.055384+00:00",
                "inline": {
                    "context_lines": "",
                    "to": null,
                    "path": "",
                    "outdated": false,
                    "from": 211
                },
                "type": "pullrequest_comment",
                "id": 118571088
            },
            "pull_request": {
                "type": "pullrequest",
                "id": 5695,
                "links": {
                    "self": {
                        "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695"
                    },
                    "html": {
                        "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695"
                    }
                },
                "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it"
            }
        }
    ]
}
```

Updates include a state property of OPEN, MERGED, or DECLINED.

Update example:
```
{
    "pagelen": 20,
    "values": [
        {
            "update": {
                "description": "",
                "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it",
                "destination": {
                    "commit": {
                        "type": "commit",
                        "hash": "6a2c16e4a152",
                        "links": {
                            "self": {
                                "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/commit/6a2c16e4a152"
                            },
                            "html": {
                                "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/commits/6a2c16e4a152"
                            }
                        }
                    },
                    "branch": {
                        "name": "master"
                    },
                    "repository": {
                        "name": "Atlaskit-MK-2",
                        "type": "repository",
                        "full_name": "atlassian/atlaskit-mk-2",
                        "links": {
                            "self": {
                                "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2"
                            },
                            "html": {
                                "href": "https://bitbucket.org/atlassian/atlaskit-mk-2"
                            },
                            "avatar": {
                                "href": "https://bytebucket.org/ravatar/%7B%7D?ts=js"
                            }
                        },
                        "uuid": "{}"
                    }
                },
                "reason": "",
                "source": {
                    "commit": {
                        "type": "commit",
                        "hash": "728c8bad1813",
                        "links": {
                            "self": {
                                "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/commit/728c8bad1813"
                            },
                            "html": {
                                "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/commits/728c8bad1813"
                            }
                        }
                    },
                    "branch": {
                        "name": "username/NONE-add-onClick-prop-for-accessibility"
                    },
                    "repository": {
                        "name": "Atlaskit-MK-2",
                        "type": "repository",
                        "full_name": "atlassian/atlaskit-mk-2",
                        "links": {
                            "self": {
                                "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2"
                            },
                            "html": {
                                "href": "https://bitbucket.org/atlassian/atlaskit-mk-2"
                            },
                            "avatar": {
                                "href": "https://bytebucket.org/ravatar/%7B%7D?ts=js"
                            }
                        },
                        "uuid": "{}"
                    }
                },
                "state": "OPEN",
                "author": {
                    "display_name": "Name Lastname",
                    "uuid": "{}",
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/users/%7B%7D"
                        },
                        "html": {
                            "href": "https://bitbucket.org/%7B%7D/"
                        },
                        "avatar": {
                            "href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128"
                        }
                    },
                    "type": "user",
                    "nickname": "Name",
                    "account_id": ""
                },
                "date": "2019-05-10T06:48:25.305565+00:00"
            },
            "pull_request": {
                "type": "pullrequest",
                "id": 5695,
                "links": {
                    "self": {
                        "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695"
                    },
                    "html": {
                        "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695"
                    }
                },
                "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it"
            }
        }
    ]
}
```

Approval example:
```
{
    "pagelen": 20,
    "values": [
        {
            "approval": {
                "date": "2019-09-27T00:37:19.849534+00:00",
                "pullrequest": {
                    "type": "pullrequest",
                    "id": 5695,
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695"
                        },
                        "html": {
                            "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695"
                        }
                    },
                    "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it"
                },
                "user": {
                    "display_name": "Name Lastname",
                    "uuid": "{}",
                    "links": {
                        "self": {
                            "href": "https://bitbucket.org/!api/2.0/users/%7B%7D"
                        },
                        "html": {
                            "href": "https://bitbucket.org/%7B%7D/"
                        },
                        "avatar": {
                            "href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128"
                        }
                    },
                    "type": "user",
                    "nickname": "Name",
                    "account_id": ""
                }
            },
            "pull_request": {
                "type": "pullrequest",
                "id": 5695,
                "links": {
                    "self": {
                        "href": "https://bitbucket.org/!api/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695"
                    },
                    "html": {
                        "href": "https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695"
                    }
                },
                "title": "username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it"
            }
        }
    ]
}
```
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivity(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivity",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/activity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments Returns a paginated list of the pull request's comments.

This includes both global, inline comments and replies.

The default sorting is oldest to newest and can be overridden with
the `sort` query parameter.

This endpoint also supports filtering and sorting of the results. See
[filtering and sorting](../../../../../../meta/filtering) for more
details.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID Returns a specific pull request comment.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommits Returns a paginated list of the pull request's commits.

These are the commits that are being merged into the destination
branch when the pull requests gets accepted.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommits(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommitsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommitsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommits",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/commits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiff Redirects to the [repository diff](../../diff/%7Bspec%7D)
with the revspec that corresponds to the pull request.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiff(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiff",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/diff",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstat Redirects to the [repository diffstat](../../diffstat/%7Bspec%7D)
with the revspec that corresponds to the pull request.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstat(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstatParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstatParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstat",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/diffstat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDiffstatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskID When merging a pull request takes too long, the client receives a
task ID along with a 202 status code. The task ID can be used in a call
to this endpoint to check the status of a merge task.

```
curl -X GET https://api.bitbucket.org/2.0/repositories/atlassian/bitbucket/pullrequests/2286/merge/task-status/<task_id>
```

If the merge task is not yet finished, a PENDING status will be returned.

```
HTTP/2 200
{
    "task_status": "PENDING",
    "links": {
        "self": {
            "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bitbucket/pullrequests/2286/merge/task-status/<task_id>"
        }
    }
}
```

If the merge was successful, a SUCCESS status will be returned.

```
HTTP/2 200
{
    "task_status": "SUCCESS",
    "links": {
        "self": {
            "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bitbucket/pullrequests/2286/merge/task-status/<task_id>"
        }
    },
    "merge_result": <the merged pull request object>
}
```

If the merge task failed, an error will be returned.

```
{
    "type": "error",
    "error": {
        "message": "<error message>"
    }
}
```
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskID(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskID",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/merge/task-status/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeTaskStatusTaskID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatch get repositories workspace repo slug pullrequests pull request ID patch API
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatch(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatch",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/patch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PostRepositoriesWorkspaceRepoSlugPullrequests Creates a new pull request where the destination repository is
this repository and the author is the authenticated user.

The minimum required fields to create a pull request are `title` and
`source`, specified by a branch name.

```
curl https://api.bitbucket.org/2.0/repositories/my-username/my-repository/pullrequests \
    -u my-username:my-password \
    --request POST \
    --header 'Content-Type: application/json' \
    --data '{
        "title": "My Title",
        "source": {
            "branch": {
                "name": "staging"
            }
        }
    }'
```

If the pull request's `destination` is not specified, it will default
to the `repository.mainbranch`. To open a pull request to a
different branch, say from a feature branch to a staging branch,
specify a `destination` (same format as the `source`):

```
{
    "title": "My Title",
    "source": {
        "branch": {
            "name": "my-feature-branch"
        }
    },
    "destination": {
        "branch": {
            "name": "staging"
        }
    }
}
```

Reviewers can be specified by adding an array of user objects as the
`reviewers` property.

```
{
    "title": "My Title",
    "source": {
        "branch": {
            "name": "my-feature-branch"
        }
    },
    "reviewers": [
        {
            "uuid": "{504c3b62-8120-4f0c-a7bc-87800b9d6f70}"
        }
    ]
}
```

Other fields:

* `description` - a string
* `close_source_branch` - boolean that specifies if the source branch should be closed upon merging
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugPullrequests(params *PostRepositoriesWorkspaceRepoSlugPullrequestsParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugPullrequestsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugPullrequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugPullrequests",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugPullrequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesWorkspaceRepoSlugPullrequestsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesWorkspaceRepoSlugPullrequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApprove Approve the specified pull request as the authenticated user.
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApprove(params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApprove",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/approve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApproveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDApprove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments Creates a new pull request comment.

Returns the newly created pull request comment.
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments(params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDecline Declines the pull request.
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDecline(params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDecline",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/decline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMerge Merges the pull request.
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMerge(params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeOK, *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMerge",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/merge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeOK:
		return value, nil, nil
	case *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDMergeAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pullrequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername Adds the specified user to the repository's list of default
reviewers.

This method is idempotent. Adding a user a second time has no effect.
*/
func (a *Client) PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(params *PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/default-reviewers/{target_username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID Mutates the specified pull request.

This can be used to change the pull request's branches or description.

Only open pull requests can be mutated.
*/
func (a *Client) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID(params *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID Updates a specific pull request comment.
*/
func (a *Client) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID(params *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPullrequestsForCommit returns a paginated list of all pull requests as part of which this commit was reviewed pull request commit links app must be installed first before using this API installation automatically occurs when go to pull request is clicked from the web interface for a commit s details
*/
func (a *Client) GetPullrequestsForCommit(params *GetPullrequestsForCommitParams) (*GetPullrequestsForCommitOK, *GetPullrequestsForCommitAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPullrequestsForCommitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPullrequestsForCommit",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{commit}/pullrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPullrequestsForCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetPullrequestsForCommitOK:
		return value, nil, nil
	case *GetPullrequestsForCommitAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pullrequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
