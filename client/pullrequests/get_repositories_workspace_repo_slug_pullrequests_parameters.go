// Code generated by go-swagger; DO NOT EDIT.

package pullrequests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsParams creates a new GetRepositoriesWorkspaceRepoSlugPullrequestsParams object
// with the default values initialized.
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsParams() *GetRepositoriesWorkspaceRepoSlugPullrequestsParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsParamsWithTimeout creates a new GetRepositoriesWorkspaceRepoSlugPullrequestsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsParamsWithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugPullrequestsParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsParams{

		timeout: timeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsParamsWithContext creates a new GetRepositoriesWorkspaceRepoSlugPullrequestsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsParamsWithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugPullrequestsParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsParams{

		Context: ctx,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsParamsWithHTTPClient creates a new GetRepositoriesWorkspaceRepoSlugPullrequestsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsParamsWithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugPullrequestsParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsParams{
		HTTPClient: client,
	}
}

/*GetRepositoriesWorkspaceRepoSlugPullrequestsParams contains all the parameters to send to the API endpoint
for the get repositories workspace repo slug pullrequests operation typically these are written to a http.Request
*/
type GetRepositoriesWorkspaceRepoSlugPullrequestsParams struct {

	/*RepoSlug
	  This can either be the repository slug or the UUID of the repository,
	surrounded by curly-braces, for example: `{repository UUID}`.


	*/
	RepoSlug string
	/*State
	  Only return pull requests that are in this state. This parameter can be repeated.

	*/
	State *string
	/*Workspace
	  This can either be the workspace ID (slug) or the workspace UUID
	surrounded by curly-braces, for example: `{workspace UUID}`.


	*/
	Workspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) WithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugPullrequestsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) WithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugPullrequestsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) WithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugPullrequestsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRepoSlug adds the repoSlug to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) WithRepoSlug(repoSlug string) *GetRepositoriesWorkspaceRepoSlugPullrequestsParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithState adds the state to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) WithState(state *string) *GetRepositoriesWorkspaceRepoSlugPullrequestsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) SetState(state *string) {
	o.State = state
}

// WithWorkspace adds the workspace to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) WithWorkspace(workspace string) *GetRepositoriesWorkspaceRepoSlugPullrequestsParams {
	o.SetWorkspace(workspace)
	return o
}

// SetWorkspace adds the workspace to the get repositories workspace repo slug pullrequests params
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) SetWorkspace(workspace string) {
	o.Workspace = workspace
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	// path param workspace
	if err := r.SetPathParam("workspace", o.Workspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
