// Code generated by go-swagger; DO NOT EDIT.

package pullrequests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDReader is a Reader for the PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestID structure.
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK creates a PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK with default headers values
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK() *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK {
	return &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK{}
}

/*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK handles this case with default header values.

The updated pull request
*/
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK struct {
	Payload *models.Pullrequest
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}][%d] putRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdOK  %+v", 200, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK) GetPayload() *models.Pullrequest {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Pullrequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest creates a PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest with default headers values
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest() *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest {
	return &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest{}
}

/*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest handles this case with default header values.

If the input document was invalid.
*/
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}][%d] putRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized creates a PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized with default headers values
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized() *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized {
	return &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized{}
}

/*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized handles this case with default header values.

If the request was not authenticated.
*/
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}][%d] putRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound creates a PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound with default headers values
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound() *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound {
	return &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound{}
}

/*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound handles this case with default header values.

If the repository or pull request id does not exist
*/
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}][%d] putRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdNotFound  %+v", 404, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
