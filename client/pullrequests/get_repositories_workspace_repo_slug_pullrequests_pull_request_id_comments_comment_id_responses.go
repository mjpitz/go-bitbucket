// Code generated by go-swagger; DO NOT EDIT.

package pullrequests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader is a Reader for the GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID structure.
type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK creates a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK() *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK {
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK{}
}

/*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK handles this case with default header values.

The comment.
*/
type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK struct {
	Payload *models.PullrequestComment
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}][%d] getRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK) GetPayload() *models.PullrequestComment {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PullrequestComment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden creates a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden() *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden {
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden handles this case with default header values.

If the authenticated user does not have access to the pull request.
*/
type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}][%d] getRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdForbidden  %+v", 403, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound creates a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound() *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound {
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound handles this case with default header values.

If the comment does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}][%d] getRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
