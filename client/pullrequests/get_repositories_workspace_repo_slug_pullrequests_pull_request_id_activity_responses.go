// Code generated by go-swagger; DO NOT EDIT.

package pullrequests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityReader is a Reader for the GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivity structure.
type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK creates a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK() *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK {
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK{}
}

/*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK handles this case with default header values.

The pull request activity log
*/
type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK struct {
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/activity][%d] getRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityOK ", 200)
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityUnauthorized creates a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityUnauthorized with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityUnauthorized() *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityUnauthorized {
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityUnauthorized{}
}

/*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityUnauthorized handles this case with default header values.

If the repository is private and the request was not authenticated.
*/
type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityUnauthorized struct {
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/activity][%d] getRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityUnauthorized ", 401)
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound creates a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound() *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound {
	return &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound handles this case with default header values.

If the specified repository does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/activity][%d] getRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDActivityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
