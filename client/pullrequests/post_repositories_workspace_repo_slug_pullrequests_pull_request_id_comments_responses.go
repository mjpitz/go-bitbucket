// Code generated by go-swagger; DO NOT EDIT.

package pullrequests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsReader is a Reader for the PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDComments structure.
type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated creates a PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated with default headers values
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated() *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated {
	return &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated{}
}

/*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated handles this case with default header values.

The newly created comment.
*/
type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated struct {
	/*The URL of the new comment
	 */
	Location string

	Payload *models.PullrequestComment
}

func (o *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments][%d] postRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCreated  %+v", 201, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated) GetPayload() *models.PullrequestComment {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.PullrequestComment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden creates a PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden with default headers values
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden() *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden {
	return &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden{}
}

/*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden handles this case with default header values.

If the authenticated user does not have access to the pull request.
*/
type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments][%d] postRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsForbidden  %+v", 403, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound creates a PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound with default headers values
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound() *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound {
	return &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound{}
}

/*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound handles this case with default header values.

If the pull request does not exist.
*/
type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments][%d] postRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsNotFound  %+v", 404, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
