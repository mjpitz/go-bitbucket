// Code generated by go-swagger; DO NOT EDIT.

package pullrequests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader is a Reader for the DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentID structure.
type DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent creates a DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent() *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent {
	return &DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent{}
}

/*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent handles this case with default header values.

Successful deletion.
*/
type DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent struct {
}

func (o *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}][%d] deleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdNoContent ", 204)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden creates a DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden() *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden {
	return &DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden{}
}

/*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden handles this case with default header values.

If the authenticated user does not have access to delete the comment.
*/
type DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden struct {
	Payload *models.Error
}

func (o *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}][%d] deleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound creates a DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound() *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound {
	return &DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound{}
}

/*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound handles this case with default header values.

If the comment does not exist.
*/
type DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound struct {
	Payload *models.Error
}

func (o *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}][%d] deleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDCommentsCommentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
