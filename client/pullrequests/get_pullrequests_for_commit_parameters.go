// Code generated by go-swagger; DO NOT EDIT.

package pullrequests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPullrequestsForCommitParams creates a new GetPullrequestsForCommitParams object
// with the default values initialized.
func NewGetPullrequestsForCommitParams() *GetPullrequestsForCommitParams {
	var (
		pageDefault    = int32(1)
		pagelenDefault = int32(30)
	)
	return &GetPullrequestsForCommitParams{
		Page:    &pageDefault,
		Pagelen: &pagelenDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPullrequestsForCommitParamsWithTimeout creates a new GetPullrequestsForCommitParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPullrequestsForCommitParamsWithTimeout(timeout time.Duration) *GetPullrequestsForCommitParams {
	var (
		pageDefault    = int32(1)
		pagelenDefault = int32(30)
	)
	return &GetPullrequestsForCommitParams{
		Page:    &pageDefault,
		Pagelen: &pagelenDefault,

		timeout: timeout,
	}
}

// NewGetPullrequestsForCommitParamsWithContext creates a new GetPullrequestsForCommitParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPullrequestsForCommitParamsWithContext(ctx context.Context) *GetPullrequestsForCommitParams {
	var (
		pageDefault    = int32(1)
		pagelenDefault = int32(30)
	)
	return &GetPullrequestsForCommitParams{
		Page:    &pageDefault,
		Pagelen: &pagelenDefault,

		Context: ctx,
	}
}

// NewGetPullrequestsForCommitParamsWithHTTPClient creates a new GetPullrequestsForCommitParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPullrequestsForCommitParamsWithHTTPClient(client *http.Client) *GetPullrequestsForCommitParams {
	var (
		pageDefault    = int32(1)
		pagelenDefault = int32(30)
	)
	return &GetPullrequestsForCommitParams{
		Page:       &pageDefault,
		Pagelen:    &pagelenDefault,
		HTTPClient: client,
	}
}

/*GetPullrequestsForCommitParams contains all the parameters to send to the API endpoint
for the get pullrequests for commit operation typically these are written to a http.Request
*/
type GetPullrequestsForCommitParams struct {

	/*Commit
	  The SHA1 of the commit

	*/
	Commit string
	/*Page
	  Which page to retrieve

	*/
	Page *int32
	/*Pagelen
	  How many pull requests to retrieve per page

	*/
	Pagelen *int32
	/*RepoSlug
	  The repository; either the UUID in curly braces, or the slug

	*/
	RepoSlug string
	/*Username
	  The account; either the UUID in curly braces, or the account_id

	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) WithTimeout(timeout time.Duration) *GetPullrequestsForCommitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) WithContext(ctx context.Context) *GetPullrequestsForCommitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) WithHTTPClient(client *http.Client) *GetPullrequestsForCommitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommit adds the commit to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) WithCommit(commit string) *GetPullrequestsForCommitParams {
	o.SetCommit(commit)
	return o
}

// SetCommit adds the commit to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) SetCommit(commit string) {
	o.Commit = commit
}

// WithPage adds the page to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) WithPage(page *int32) *GetPullrequestsForCommitParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) SetPage(page *int32) {
	o.Page = page
}

// WithPagelen adds the pagelen to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) WithPagelen(pagelen *int32) *GetPullrequestsForCommitParams {
	o.SetPagelen(pagelen)
	return o
}

// SetPagelen adds the pagelen to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) SetPagelen(pagelen *int32) {
	o.Pagelen = pagelen
}

// WithRepoSlug adds the repoSlug to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) WithRepoSlug(repoSlug string) *GetPullrequestsForCommitParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithUsername adds the username to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) WithUsername(username string) *GetPullrequestsForCommitParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get pullrequests for commit params
func (o *GetPullrequestsForCommitParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetPullrequestsForCommitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param commit
	if err := r.SetPathParam("commit", o.Commit); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Pagelen != nil {

		// query param pagelen
		var qrPagelen int32
		if o.Pagelen != nil {
			qrPagelen = *o.Pagelen
		}
		qPagelen := swag.FormatInt32(qrPagelen)
		if qPagelen != "" {
			if err := r.SetQueryParam("pagelen", qPagelen); err != nil {
				return err
			}
		}

	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
