// Code generated by go-swagger; DO NOT EDIT.

package snippets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetSnippetsWorkspaceEncodedIDCommentsCommentIDReader is a Reader for the GetSnippetsWorkspaceEncodedIDCommentsCommentID structure.
type GetSnippetsWorkspaceEncodedIDCommentsCommentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSnippetsWorkspaceEncodedIDCommentsCommentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSnippetsWorkspaceEncodedIDCommentsCommentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSnippetsWorkspaceEncodedIDCommentsCommentIDOK creates a GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK with default headers values
func NewGetSnippetsWorkspaceEncodedIDCommentsCommentIDOK() *GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK {
	return &GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK{}
}

/*GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK handles this case with default header values.

The specified comment.
*/
type GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK struct {
	Payload *models.SnippetComment
}

func (o *GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK) Error() string {
	return fmt.Sprintf("[GET /snippets/{workspace}/{encoded_id}/comments/{comment_id}][%d] getSnippetsWorkspaceEncodedIdCommentsCommentIdOK  %+v", 200, o.Payload)
}

func (o *GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK) GetPayload() *models.SnippetComment {
	return o.Payload
}

func (o *GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SnippetComment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden creates a GetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden with default headers values
func NewGetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden() *GetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden {
	return &GetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden{}
}

/*GetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden handles this case with default header values.

If the authenticated user does not have access to the snippet.
*/
type GetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden struct {
	Payload *models.Error
}

func (o *GetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden) Error() string {
	return fmt.Sprintf("[GET /snippets/{workspace}/{encoded_id}/comments/{comment_id}][%d] getSnippetsWorkspaceEncodedIdCommentsCommentIdForbidden  %+v", 403, o.Payload)
}

func (o *GetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound creates a GetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound with default headers values
func NewGetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound() *GetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound {
	return &GetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound{}
}

/*GetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound handles this case with default header values.

If the comment or snippet does not exist.
*/
type GetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound struct {
	Payload *models.Error
}

func (o *GetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound) Error() string {
	return fmt.Sprintf("[GET /snippets/{workspace}/{encoded_id}/comments/{comment_id}][%d] getSnippetsWorkspaceEncodedIdCommentsCommentIdNotFound  %+v", 404, o.Payload)
}

func (o *GetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
