// Code generated by go-swagger; DO NOT EDIT.

package snippets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutSnippetsWorkspaceEncodedIDCommentsCommentIDReader is a Reader for the PutSnippetsWorkspaceEncodedIDCommentsCommentID structure.
type PutSnippetsWorkspaceEncodedIDCommentsCommentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSnippetsWorkspaceEncodedIDCommentsCommentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutSnippetsWorkspaceEncodedIDCommentsCommentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutSnippetsWorkspaceEncodedIDCommentsCommentIDOK creates a PutSnippetsWorkspaceEncodedIDCommentsCommentIDOK with default headers values
func NewPutSnippetsWorkspaceEncodedIDCommentsCommentIDOK() *PutSnippetsWorkspaceEncodedIDCommentsCommentIDOK {
	return &PutSnippetsWorkspaceEncodedIDCommentsCommentIDOK{}
}

/*PutSnippetsWorkspaceEncodedIDCommentsCommentIDOK handles this case with default header values.

The updated comment object.
*/
type PutSnippetsWorkspaceEncodedIDCommentsCommentIDOK struct {
}

func (o *PutSnippetsWorkspaceEncodedIDCommentsCommentIDOK) Error() string {
	return fmt.Sprintf("[PUT /snippets/{workspace}/{encoded_id}/comments/{comment_id}][%d] putSnippetsWorkspaceEncodedIdCommentsCommentIdOK ", 200)
}

func (o *PutSnippetsWorkspaceEncodedIDCommentsCommentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden creates a PutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden with default headers values
func NewPutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden() *PutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden {
	return &PutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden{}
}

/*PutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden handles this case with default header values.

If the authenticated user does not have access to the snippet.
*/
type PutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden struct {
	Payload *models.Error
}

func (o *PutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /snippets/{workspace}/{encoded_id}/comments/{comment_id}][%d] putSnippetsWorkspaceEncodedIdCommentsCommentIdForbidden  %+v", 403, o.Payload)
}

func (o *PutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutSnippetsWorkspaceEncodedIDCommentsCommentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound creates a PutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound with default headers values
func NewPutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound() *PutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound {
	return &PutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound{}
}

/*PutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound handles this case with default header values.

If the comment or snippet does not exist.
*/
type PutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound struct {
	Payload *models.Error
}

func (o *PutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /snippets/{workspace}/{encoded_id}/comments/{comment_id}][%d] putSnippetsWorkspaceEncodedIdCommentsCommentIdNotFound  %+v", 404, o.Payload)
}

func (o *PutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutSnippetsWorkspaceEncodedIDCommentsCommentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
