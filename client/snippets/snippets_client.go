// Code generated by go-swagger; DO NOT EDIT.

package snippets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new snippets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for snippets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSnippetsWorkspaceEncodedID(params *DeleteSnippetsWorkspaceEncodedIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnippetsWorkspaceEncodedIDNoContent, error)

	DeleteSnippetsWorkspaceEncodedIDCommentsCommentID(params *DeleteSnippetsWorkspaceEncodedIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnippetsWorkspaceEncodedIDCommentsCommentIDNoContent, error)

	DeleteSnippetsWorkspaceEncodedIDNodeID(params *DeleteSnippetsWorkspaceEncodedIDNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnippetsWorkspaceEncodedIDNodeIDNoContent, error)

	DeleteSnippetsWorkspaceEncodedIDWatch(params *DeleteSnippetsWorkspaceEncodedIDWatchParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnippetsWorkspaceEncodedIDWatchNoContent, error)

	GetSnippets(params *GetSnippetsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsOK, error)

	GetSnippetsWorkspace(params *GetSnippetsWorkspaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceOK, error)

	GetSnippetsWorkspaceEncodedID(params *GetSnippetsWorkspaceEncodedIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDOK, error)

	GetSnippetsWorkspaceEncodedIDComments(params *GetSnippetsWorkspaceEncodedIDCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDCommentsOK, error)

	GetSnippetsWorkspaceEncodedIDCommentsCommentID(params *GetSnippetsWorkspaceEncodedIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK, error)

	GetSnippetsWorkspaceEncodedIDCommits(params *GetSnippetsWorkspaceEncodedIDCommitsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDCommitsOK, error)

	GetSnippetsWorkspaceEncodedIDCommitsRevision(params *GetSnippetsWorkspaceEncodedIDCommitsRevisionParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDCommitsRevisionOK, error)

	GetSnippetsWorkspaceEncodedIDNodeID(params *GetSnippetsWorkspaceEncodedIDNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDNodeIDOK, error)

	GetSnippetsWorkspaceEncodedIDNodeIDFilesPath(params *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK, error)

	GetSnippetsWorkspaceEncodedIDRevisionDiff(params *GetSnippetsWorkspaceEncodedIDRevisionDiffParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDRevisionDiffOK, error)

	GetSnippetsWorkspaceEncodedIDRevisionPatch(params *GetSnippetsWorkspaceEncodedIDRevisionPatchParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDRevisionPatchOK, error)

	GetSnippetsWorkspaceEncodedIDWatch(params *GetSnippetsWorkspaceEncodedIDWatchParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDWatchNoContent, error)

	GetSnippetsWorkspaceEncodedIDWatchers(params *GetSnippetsWorkspaceEncodedIDWatchersParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDWatchersOK, error)

	PostSnippets(params *PostSnippetsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSnippetsCreated, error)

	PostSnippetsWorkspace(params *PostSnippetsWorkspaceParams, authInfo runtime.ClientAuthInfoWriter) (*PostSnippetsWorkspaceCreated, error)

	PostSnippetsWorkspaceEncodedIDComments(params *PostSnippetsWorkspaceEncodedIDCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSnippetsWorkspaceEncodedIDCommentsCreated, error)

	PutSnippetsWorkspaceEncodedID(params *PutSnippetsWorkspaceEncodedIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSnippetsWorkspaceEncodedIDOK, error)

	PutSnippetsWorkspaceEncodedIDCommentsCommentID(params *PutSnippetsWorkspaceEncodedIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSnippetsWorkspaceEncodedIDCommentsCommentIDOK, error)

	PutSnippetsWorkspaceEncodedIDNodeID(params *PutSnippetsWorkspaceEncodedIDNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSnippetsWorkspaceEncodedIDNodeIDOK, error)

	PutSnippetsWorkspaceEncodedIDWatch(params *PutSnippetsWorkspaceEncodedIDWatchParams, authInfo runtime.ClientAuthInfoWriter) (*PutSnippetsWorkspaceEncodedIDWatchNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteSnippetsWorkspaceEncodedID Deletes a snippet and returns an empty response.
*/
func (a *Client) DeleteSnippetsWorkspaceEncodedID(params *DeleteSnippetsWorkspaceEncodedIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnippetsWorkspaceEncodedIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnippetsWorkspaceEncodedIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSnippetsWorkspaceEncodedID",
		Method:             "DELETE",
		PathPattern:        "/snippets/{workspace}/{encoded_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnippetsWorkspaceEncodedIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnippetsWorkspaceEncodedIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnippetsWorkspaceEncodedID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSnippetsWorkspaceEncodedIDCommentsCommentID Deletes a snippet comment.

Comments can only be removed by their author.
*/
func (a *Client) DeleteSnippetsWorkspaceEncodedIDCommentsCommentID(params *DeleteSnippetsWorkspaceEncodedIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnippetsWorkspaceEncodedIDCommentsCommentIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnippetsWorkspaceEncodedIDCommentsCommentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSnippetsWorkspaceEncodedIDCommentsCommentID",
		Method:             "DELETE",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnippetsWorkspaceEncodedIDCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnippetsWorkspaceEncodedIDCommentsCommentIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnippetsWorkspaceEncodedIDCommentsCommentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSnippetsWorkspaceEncodedIDNodeID Deletes the snippet.

Note that this only works for versioned URLs that point to the latest
commit of the snippet. Pointing to an older commit results in a 405
status code.

To delete a snippet, regardless of whether or not concurrent changes
are being made to it, use `DELETE /snippets/{encoded_id}` instead.
*/
func (a *Client) DeleteSnippetsWorkspaceEncodedIDNodeID(params *DeleteSnippetsWorkspaceEncodedIDNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnippetsWorkspaceEncodedIDNodeIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnippetsWorkspaceEncodedIDNodeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSnippetsWorkspaceEncodedIDNodeID",
		Method:             "DELETE",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/{node_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnippetsWorkspaceEncodedIDNodeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnippetsWorkspaceEncodedIDNodeIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnippetsWorkspaceEncodedIDNodeID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSnippetsWorkspaceEncodedIDWatch Used to stop watching a specific snippet. Returns 204 (No Content)
to indicate success.
*/
func (a *Client) DeleteSnippetsWorkspaceEncodedIDWatch(params *DeleteSnippetsWorkspaceEncodedIDWatchParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnippetsWorkspaceEncodedIDWatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnippetsWorkspaceEncodedIDWatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSnippetsWorkspaceEncodedIDWatch",
		Method:             "DELETE",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/watch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnippetsWorkspaceEncodedIDWatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnippetsWorkspaceEncodedIDWatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnippetsWorkspaceEncodedIDWatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippets Returns all snippets. Like pull requests, repositories and teams, the
full set of snippets is defined by what the current user has access to.

This includes all snippets owned by the current user, but also all snippets
owned by any of the teams the user is a member of, or snippets by other
users that the current user is either watching or has collaborated on (for
instance by commenting on it).

To limit the set of returned snippets, apply the
`?role=[owner|contributor|member]` query parameter where the roles are
defined as follows:

* `owner`: all snippets owned by the current user
* `contributor`: all snippets owned by, or watched by the current user
* `member`: owned by the user, their teams, or watched by the current user

When no role is specified, all public snippets are returned, as well as all
privately owned snippets watched or commented on.

The returned response is a normal paginated JSON list. This endpoint
only supports `application/json` responses and no
`multipart/form-data` or `multipart/related`. As a result, it is not
possible to include the file contents.
*/
func (a *Client) GetSnippets(params *GetSnippetsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippets",
		Method:             "GET",
		PathPattern:        "/snippets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspace Identical to `/snippets`, except that the result is further filtered
by the snippet owner and only those that are owned by `{workspace}` are
returned.
*/
func (a *Client) GetSnippetsWorkspace(params *GetSnippetsWorkspaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspace",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedID Retrieves a single snippet.

Snippets support multiple content types:

* application/json
* multipart/related
* multipart/form-data


application/json
----------------

The default content type of the response is `application/json`.
Since JSON is always `utf-8`, it cannot reliably contain file contents
for files that are not text. Therefore, JSON snippet documents only
contain the filename and links to the file contents.

This means that in order to retrieve all parts of a snippet, N+1
requests need to be made (where N is the number of files in the
snippet).


multipart/related
-----------------

To retrieve an entire snippet in a single response, use the
`Accept: multipart/related` HTTP request header.

    $ curl -H "Accept: multipart/related" https://api.bitbucket.org/2.0/snippets/evzijst/1

Response:

    HTTP/1.1 200 OK
    Content-Length: 2214
    Content-Type: multipart/related; start="snippet"; boundary="===============1438169132528273974=="
    MIME-Version: 1.0

    --===============1438169132528273974==
    Content-Type: application/json; charset="utf-8"
    MIME-Version: 1.0
    Content-ID: snippet

    {
      "links": {
        "self": {
          "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj"
        },
        "html": {
          "href": "https://bitbucket.org/snippets/evzijst/kypj"
        },
        "comments": {
          "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj/comments"
        },
        "watchers": {
          "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj/watchers"
        },
        "commits": {
          "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj/commits"
        }
      },
      "id": kypj,
      "title": "My snippet",
      "created_on": "2014-12-29T22:22:04.790331+00:00",
      "updated_on": "2014-12-29T22:22:04.790331+00:00",
      "is_private": false,
      "files": {
        "foo.txt": {
          "links": {
            "self": {
              "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj/files/367ab19/foo.txt"
            },
            "html": {
              "href": "https://bitbucket.org/snippets/evzijst/kypj#file-foo.txt"
            }
          }
        },
        "image.png": {
          "links": {
            "self": {
              "href": "https://api.bitbucket.org/2.0/snippets/evzijst/kypj/files/367ab19/image.png"
            },
            "html": {
              "href": "https://bitbucket.org/snippets/evzijst/kypj#file-image.png"
            }
          }
        }
      ],
      "owner": {
        "username": "evzijst",
        "nickname": "evzijst",
        "display_name": "Erik van Zijst",
        "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}",
        "links": {
          "self": {
            "href": "https://api.bitbucket.org/2.0/users/evzijst"
          },
          "html": {
            "href": "https://bitbucket.org/evzijst"
          },
          "avatar": {
            "href": "https://bitbucket-staging-assetroot.s3.amazonaws.com/c/photos/2013/Jul/31/erik-avatar-725122544-0_avatar.png"
          }
        }
      },
      "creator": {
        "username": "evzijst",
        "nickname": "evzijst",
        "display_name": "Erik van Zijst",
        "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}",
        "links": {
          "self": {
            "href": "https://api.bitbucket.org/2.0/users/evzijst"
          },
          "html": {
            "href": "https://bitbucket.org/evzijst"
          },
          "avatar": {
            "href": "https://bitbucket-staging-assetroot.s3.amazonaws.com/c/photos/2013/Jul/31/erik-avatar-725122544-0_avatar.png"
          }
        }
      }
    }

    --===============1438169132528273974==
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    Content-ID: "foo.txt"
    Content-Disposition: attachment; filename="foo.txt"

    foo

    --===============1438169132528273974==
    Content-Type: image/png
    MIME-Version: 1.0
    Content-Transfer-Encoding: base64
    Content-ID: "image.png"
    Content-Disposition: attachment; filename="image.png"

    iVBORw0KGgoAAAANSUhEUgAAABQAAAAoCAYAAAD+MdrbAAABD0lEQVR4Ae3VMUoDQRTG8ccUaW2m
    TKONFxArJYJamCvkCnZTaa+VnQdJSBFl2SMsLFrEWNjZBZs0JgiL/+KrhhVmJRbCLPx4O+/DT2TB
    cbblJxf+UWFVVRNsEGAtgvJxnLm2H+A5RQ93uIl+3632PZyl/skjfOn9Gvdwmlcw5aPUwimG+NT5
    EnNN036IaZePUuIcK533NVfal7/5yjWeot2z9ta1cAczHEf7I+3J0ws9Cgx0fsOFpmlfwKcWPuBQ
    73Oc4FHzBaZ8llq4q1mr5B2mOUCt815qYR8eB1hG2VJ7j35q4RofaH7IG+Xrf/PfJhfmwtfFYoIN
    AqxFUD6OMxcvkO+UfKfkOyXfKdsv/AYCHMLVkHAFWgAAAABJRU5ErkJggg==
    --===============1438169132528273974==--

multipart/form-data
-------------------

As with creating new snippets, `multipart/form-data` can be used as an
alternative to `multipart/related`. However, the inherently flat
structure of form-data means that only basic, root-level properties
can be returned, while nested elements like `links` are omitted:

    $ curl -H "Accept: multipart/form-data" https://api.bitbucket.org/2.0/snippets/evzijst/kypj

Response:

    HTTP/1.1 200 OK
    Content-Length: 951
    Content-Type: multipart/form-data; boundary=----------------------------63a4b224c59f

    ------------------------------63a4b224c59f
    Content-Disposition: form-data; name="title"
    Content-Type: text/plain; charset="utf-8"

    My snippet
    ------------------------------63a4b224c59f--
    Content-Disposition: attachment; name="file"; filename="foo.txt"
    Content-Type: text/plain

    foo

    ------------------------------63a4b224c59f
    Content-Disposition: attachment; name="file"; filename="image.png"
    Content-Transfer-Encoding: base64
    Content-Type: application/octet-stream

    iVBORw0KGgoAAAANSUhEUgAAABQAAAAoCAYAAAD+MdrbAAABD0lEQVR4Ae3VMUoDQRTG8ccUaW2m
    TKONFxArJYJamCvkCnZTaa+VnQdJSBFl2SMsLFrEWNjZBZs0JgiL/+KrhhVmJRbCLPx4O+/DT2TB
    cbblJxf+UWFVVRNsEGAtgvJxnLm2H+A5RQ93uIl+3632PZyl/skjfOn9Gvdwmlcw5aPUwimG+NT5
    EnNN036IaZePUuIcK533NVfal7/5yjWeot2z9ta1cAczHEf7I+3J0ws9Cgx0fsOFpmlfwKcWPuBQ
    73Oc4FHzBaZ8llq4q1mr5B2mOUCt815qYR8eB1hG2VJ7j35q4RofaH7IG+Xrf/PfJhfmwtfFYoIN
    AqxFUD6OMxcvkO+UfKfkOyXfKdsv/AYCHMLVkHAFWgAAAABJRU5ErkJggg==
    ------------------------------5957323a6b76--
*/
func (a *Client) GetSnippetsWorkspaceEncodedID(params *GetSnippetsWorkspaceEncodedIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedID",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}",
		ProducesMediaTypes: []string{"application/json", "multipart/form-data", "multipart/related"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedIDComments Used to retrieve a paginated list of all comments for a specific
snippet.

This resource works identical to commit and pull request comments.

The default sorting is oldest to newest and can be overridden with
the `sort` query parameter.
*/
func (a *Client) GetSnippetsWorkspaceEncodedIDComments(params *GetSnippetsWorkspaceEncodedIDCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedIDComments",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedIDComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedIDCommentsCommentID Returns the specific snippet comment.
*/
func (a *Client) GetSnippetsWorkspaceEncodedIDCommentsCommentID(params *GetSnippetsWorkspaceEncodedIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDCommentsCommentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedIDCommentsCommentID",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDCommentsCommentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedIDCommentsCommentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedIDCommits Returns the changes (commits) made on this snippet.
*/
func (a *Client) GetSnippetsWorkspaceEncodedIDCommits(params *GetSnippetsWorkspaceEncodedIDCommitsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDCommitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDCommitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedIDCommits",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/commits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDCommitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDCommitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedIDCommits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedIDCommitsRevision get snippets workspace encoded ID commits revision API
*/
func (a *Client) GetSnippetsWorkspaceEncodedIDCommitsRevision(params *GetSnippetsWorkspaceEncodedIDCommitsRevisionParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDCommitsRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDCommitsRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedIDCommitsRevision",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/commits/{revision}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDCommitsRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDCommitsRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedIDCommitsRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedIDNodeID Identical to `GET /snippets/encoded_id`, except that this endpoint
can be used to retrieve the contents of the snippet as it was at an
older revision, while `/snippets/encoded_id` always returns the
snippet's current revision.

Note that only the snippet's file contents are versioned, not its
meta data properties like the title.

Other than that, the two endpoints are identical in behavior.
*/
func (a *Client) GetSnippetsWorkspaceEncodedIDNodeID(params *GetSnippetsWorkspaceEncodedIDNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDNodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDNodeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedIDNodeID",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/{node_id}",
		ProducesMediaTypes: []string{"application/json", "multipart/form-data", "multipart/related"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDNodeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDNodeIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedIDNodeID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedIDNodeIDFilesPath Retrieves the raw contents of a specific file in the snippet. The
`Content-Disposition` header will be "attachment" to avoid issues with
malevolent executable files.

The file's mime type is derived from its filename and returned in the
`Content-Type` header.

Note that for text files, no character encoding is included as part of
the content type.
*/
func (a *Client) GetSnippetsWorkspaceEncodedIDNodeIDFilesPath(params *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDNodeIDFilesPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedIDNodeIDFilesPath",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/{node_id}/files/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDNodeIDFilesPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedIDNodeIDFilesPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedIDRevisionDiff Returns the diff of the specified commit against its first parent.

Note that this resource is different in functionality from the `patch`
resource.

The differences between a diff and a patch are:

* patches have a commit header with the username, message, etc
* diffs support the optional `path=foo/bar.py` query param to filter the
  diff to just that one file diff (not supported for patches)
* for a merge, the diff will show the diff between the merge commit and
  its first parent (identical to how PRs work), while patch returns a
  response containing separate patches for each commit on the second
  parent's ancestry, up to the oldest common ancestor (identical to
  its reachability).

Note that the character encoding of the contents of the diff is
unspecified as Git and Mercurial do not track this, making it hard for
Bitbucket to reliably determine this.
*/
func (a *Client) GetSnippetsWorkspaceEncodedIDRevisionDiff(params *GetSnippetsWorkspaceEncodedIDRevisionDiffParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDRevisionDiffOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDRevisionDiffParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedIDRevisionDiff",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/{revision}/diff",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDRevisionDiffReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDRevisionDiffOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedIDRevisionDiff: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedIDRevisionPatch Returns the patch of the specified commit against its first
parent.

Note that this resource is different in functionality from the `diff`
resource.

The differences between a diff and a patch are:

* patches have a commit header with the username, message, etc
* diffs support the optional `path=foo/bar.py` query param to filter the
  diff to just that one file diff (not supported for patches)
* for a merge, the diff will show the diff between the merge commit and
  its first parent (identical to how PRs work), while patch returns a
  response containing separate patches for each commit on the second
  parent's ancestry, up to the oldest common ancestor (identical to
  its reachability).

Note that the character encoding of the contents of the patch is
unspecified as Git and Mercurial do not track this, making it hard for
Bitbucket to reliably determine this.
*/
func (a *Client) GetSnippetsWorkspaceEncodedIDRevisionPatch(params *GetSnippetsWorkspaceEncodedIDRevisionPatchParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDRevisionPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDRevisionPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedIDRevisionPatch",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/{revision}/patch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDRevisionPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDRevisionPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedIDRevisionPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedIDWatch Used to check if the current user is watching a specific snippet.

Returns 204 (No Content) if the user is watching the snippet and 404 if
not.

Hitting this endpoint anonymously always returns a 404.
*/
func (a *Client) GetSnippetsWorkspaceEncodedIDWatch(params *GetSnippetsWorkspaceEncodedIDWatchParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDWatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDWatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedIDWatch",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/watch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDWatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDWatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedIDWatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnippetsWorkspaceEncodedIDWatchers Returns a paginated list of all users watching a specific snippet.
*/
func (a *Client) GetSnippetsWorkspaceEncodedIDWatchers(params *GetSnippetsWorkspaceEncodedIDWatchersParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnippetsWorkspaceEncodedIDWatchersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnippetsWorkspaceEncodedIDWatchersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSnippetsWorkspaceEncodedIDWatchers",
		Method:             "GET",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/watchers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnippetsWorkspaceEncodedIDWatchersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnippetsWorkspaceEncodedIDWatchersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnippetsWorkspaceEncodedIDWatchers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSnippets Creates a new snippet under the authenticated user's account.

Snippets can contain multiple files. Both text and binary files are
supported.

The simplest way to create a new snippet from a local file:

    $ curl -u username:password -X POST https://api.bitbucket.org/2.0/snippets               -F file=@image.png

Creating snippets through curl has a few limitations and so let's look
at a more complicated scenario.

Snippets are created with a multipart POST. Both `multipart/form-data`
and `multipart/related` are supported. Both allow the creation of
snippets with both meta data (title, etc), as well as multiple text
and binary files.

The main difference is that `multipart/related` can use rich encoding
for the meta data (currently JSON).


multipart/related (RFC-2387)
----------------------------

This is the most advanced and efficient way to create a paste.

    POST /2.0/snippets/evzijst HTTP/1.1
    Content-Length: 1188
    Content-Type: multipart/related; start="snippet"; boundary="===============1438169132528273974=="
    MIME-Version: 1.0

    --===============1438169132528273974==
    Content-Type: application/json; charset="utf-8"
    MIME-Version: 1.0
    Content-ID: snippet

    {
      "title": "My snippet",
      "is_private": true,
      "scm": "hg",
      "files": {
          "foo.txt": {},
          "image.png": {}
        }
    }

    --===============1438169132528273974==
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    Content-ID: "foo.txt"
    Content-Disposition: attachment; filename="foo.txt"

    foo

    --===============1438169132528273974==
    Content-Type: image/png
    MIME-Version: 1.0
    Content-Transfer-Encoding: base64
    Content-ID: "image.png"
    Content-Disposition: attachment; filename="image.png"

    iVBORw0KGgoAAAANSUhEUgAAABQAAAAoCAYAAAD+MdrbAAABD0lEQVR4Ae3VMUoDQRTG8ccUaW2m
    TKONFxArJYJamCvkCnZTaa+VnQdJSBFl2SMsLFrEWNjZBZs0JgiL/+KrhhVmJRbCLPx4O+/DT2TB
    cbblJxf+UWFVVRNsEGAtgvJxnLm2H+A5RQ93uIl+3632PZyl/skjfOn9Gvdwmlcw5aPUwimG+NT5
    EnNN036IaZePUuIcK533NVfal7/5yjWeot2z9ta1cAczHEf7I+3J0ws9Cgx0fsOFpmlfwKcWPuBQ
    73Oc4FHzBaZ8llq4q1mr5B2mOUCt815qYR8eB1hG2VJ7j35q4RofaH7IG+Xrf/PfJhfmwtfFYoIN
    AqxFUD6OMxcvkO+UfKfkOyXfKdsv/AYCHMLVkHAFWgAAAABJRU5ErkJggg==
    --===============1438169132528273974==--

The request contains multiple parts and is structured as follows.

The first part is the JSON document that describes the snippet's
properties or meta data. It either has to be the first part, or the
request's `Content-Type` header must contain the `start` parameter to
point to it.

The remaining parts are the files of which there can be zero or more.
Each file part should contain the `Content-ID` MIME header through
which the JSON meta data's `files` element addresses it. The value
should be the name of the file.

`Content-Disposition` is an optional MIME header. The header's
optional `filename` parameter can be used to specify the file name
that Bitbucket should use when writing the file to disk. When present,
`filename` takes precedence over the value of `Content-ID`.

When the JSON body omits the `files` element, the remaining parts are
not ignored. Instead, each file is added to the new snippet as if its
name was explicitly linked (the use of the `files` elements is
mandatory for some operations like deleting or renaming files).


multipart/form-data
-------------------

The use of JSON for the snippet's meta data is optional. Meta data can
also be supplied as regular form fields in a more conventional
`multipart/form-data` request:

    $ curl -X POST -u credentials https://api.bitbucket.org/2.0/snippets               -F title="My snippet"               -F file=@foo.txt -F file=@image.png

    POST /2.0/snippets HTTP/1.1
    Content-Length: 951
    Content-Type: multipart/form-data; boundary=----------------------------63a4b224c59f

    ------------------------------63a4b224c59f
    Content-Disposition: form-data; name="file"; filename="foo.txt"
    Content-Type: text/plain

    foo

    ------------------------------63a4b224c59f
    Content-Disposition: form-data; name="file"; filename="image.png"
    Content-Type: application/octet-stream

    ?PNG

    IHDR?1??I.....
    ------------------------------63a4b224c59f
    Content-Disposition: form-data; name="title"

    My snippet
    ------------------------------63a4b224c59f--

Here the meta data properties are included as flat, top-level form
fields. The file attachments use the `file` field name. To attach
multiple files, simply repeat the field.

The advantage of `multipart/form-data` over `multipart/related` is
that it can be easier to build clients.

Essentially all properties are optional, `title` and `files` included.


Sharing and Visibility
----------------------

Snippets can be either public (visible to anyone on Bitbucket, as well
as anonymous users), or private (visible only to the owner, creator
and members of the team in case the snippet is owned by a team). This
is controlled through the snippet's `is_private` element:

* **is_private=false** -- everyone, including anonymous users can view
  the snippet
* **is_private=true** -- only the owner and team members (for team
  snippets) can view it

To create the snippet under a team account, just append the team name
to the URL (see `/2.0/snippets/{username}`).
*/
func (a *Client) PostSnippets(params *PostSnippetsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSnippetsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSnippetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSnippets",
		Method:             "POST",
		PathPattern:        "/snippets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSnippetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSnippetsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSnippets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSnippetsWorkspace Identical to `/snippets`, except that the new snippet will be
created under the account specified in the path parameter
`{workspace}`.
*/
func (a *Client) PostSnippetsWorkspace(params *PostSnippetsWorkspaceParams, authInfo runtime.ClientAuthInfoWriter) (*PostSnippetsWorkspaceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSnippetsWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSnippetsWorkspace",
		Method:             "POST",
		PathPattern:        "/snippets/{workspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSnippetsWorkspaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSnippetsWorkspaceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSnippetsWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSnippetsWorkspaceEncodedIDComments Creates a new comment.

The only required field in the body is `content.raw`.

To create a threaded reply to an existing comment, include `parent.id`.
*/
func (a *Client) PostSnippetsWorkspaceEncodedIDComments(params *PostSnippetsWorkspaceEncodedIDCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSnippetsWorkspaceEncodedIDCommentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSnippetsWorkspaceEncodedIDCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSnippetsWorkspaceEncodedIDComments",
		Method:             "POST",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSnippetsWorkspaceEncodedIDCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSnippetsWorkspaceEncodedIDCommentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSnippetsWorkspaceEncodedIDComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutSnippetsWorkspaceEncodedID Used to update a snippet. Use this to add and delete files and to
change a snippet's title.

To update a snippet, one can either PUT a full snapshot, or only the
parts that need to be changed.

The contract for PUT on this API is that properties missing from the
request remain untouched so that snippets can be efficiently
manipulated with differential payloads.

To delete a property (e.g. the title, or a file), include its name in
the request, but omit its value (use `null`).

As in Git, explicit renaming of files is not supported. Instead, to
rename a file, delete it and add it again under another name. This can
be done atomically in a single request. Rename detection is left to
the SCM.

PUT supports three different content types for both request and
response bodies:

* `application/json`
* `multipart/related`
* `multipart/form-data`

The content type used for the request body can be different than that
used for the response. Content types are specified using standard HTTP
headers.

Use the `Content-Type` and `Accept` headers to select the desired
request and response format.


application/json
----------------

As with creation and retrieval, the content type determines what
properties can be manipulated. `application/json` does not support
file contents and is therefore limited to a snippet's meta data.

To update the title, without changing any of its files:

    $ curl -X POST -H "Content-Type: application/json" https://api.bitbucket.org/2.0/snippets/evzijst/kypj             -d '{"title": "Updated title"}'


To delete the title:

    $ curl -X POST -H "Content-Type: application/json" https://api.bitbucket.org/2.0/snippets/evzijst/kypj             -d '{"title": null}'

Not all parts of a snippet can be manipulated. The owner and creator
for instance are immutable.


multipart/related
-----------------

`multipart/related` can be used to manipulate all of a snippet's
properties. The body is identical to a POST. properties omitted from
the request are left unchanged. Since the `start` part contains JSON,
the mechanism for manipulating the snippet's meta data is identical
to `application/json` requests.

To update one of a snippet's file contents, while also changing its
title:

    PUT /2.0/snippets/evzijst/kypj HTTP/1.1
    Content-Length: 288
    Content-Type: multipart/related; start="snippet"; boundary="===============1438169132528273974=="
    MIME-Version: 1.0

    --===============1438169132528273974==
    Content-Type: application/json; charset="utf-8"
    MIME-Version: 1.0
    Content-ID: snippet

    {
      "title": "My updated snippet",
      "files": {
          "foo.txt": {}
        }
    }

    --===============1438169132528273974==
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    Content-ID: "foo.txt"
    Content-Disposition: attachment; filename="foo.txt"

    Updated file contents.

    --===============1438169132528273974==--

Here only the parts that are changed are included in the body. The
other files remain untouched.

Note the use of the `files` list in the JSON part. This list contains
the files that are being manipulated. This list should have
corresponding multiparts in the request that contain the new contents
of these files.

If a filename in the `files` list does not have a corresponding part,
it will be deleted from the snippet, as shown below:

    PUT /2.0/snippets/evzijst/kypj HTTP/1.1
    Content-Length: 188
    Content-Type: multipart/related; start="snippet"; boundary="===============1438169132528273974=="
    MIME-Version: 1.0

    --===============1438169132528273974==
    Content-Type: application/json; charset="utf-8"
    MIME-Version: 1.0
    Content-ID: snippet

    {
      "files": {
        "image.png": {}
      }
    }

    --===============1438169132528273974==--

To simulate a rename, delete a file and add the same file under
another name:

    PUT /2.0/snippets/evzijst/kypj HTTP/1.1
    Content-Length: 212
    Content-Type: multipart/related; start="snippet"; boundary="===============1438169132528273974=="
    MIME-Version: 1.0

    --===============1438169132528273974==
    Content-Type: application/json; charset="utf-8"
    MIME-Version: 1.0
    Content-ID: snippet

    {
        "files": {
          "foo.txt": {},
          "bar.txt": {}
        }
    }

    --===============1438169132528273974==
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    Content-ID: "bar.txt"
    Content-Disposition: attachment; filename="bar.txt"

    foo

    --===============1438169132528273974==--


multipart/form-data
-----------------

Again, one can also use `multipart/form-data` to manipulate file
contents and meta data atomically.

    $ curl -X PUT http://localhost:12345/2.0/snippets/evzijst/kypj             -F title="My updated snippet" -F file=@foo.txt

    PUT /2.0/snippets/evzijst/kypj HTTP/1.1
    Content-Length: 351
    Content-Type: multipart/form-data; boundary=----------------------------63a4b224c59f

    ------------------------------63a4b224c59f
    Content-Disposition: form-data; name="file"; filename="foo.txt"
    Content-Type: text/plain

    foo

    ------------------------------63a4b224c59f
    Content-Disposition: form-data; name="title"

    My updated snippet
    ------------------------------63a4b224c59f

To delete a file, omit its contents while including its name in the
`files` field:

    $ curl -X PUT https://api.bitbucket.org/2.0/snippets/evzijst/kypj -F files=image.png

    PUT /2.0/snippets/evzijst/kypj HTTP/1.1
    Content-Length: 149
    Content-Type: multipart/form-data; boundary=----------------------------ef8871065a86

    ------------------------------ef8871065a86
    Content-Disposition: form-data; name="files"

    image.png
    ------------------------------ef8871065a86--

The explicit use of the `files` element in `multipart/related` and
`multipart/form-data` is only required when deleting files.
The default mode of operation is for file parts to be processed,
regardless of whether or not they are listed in `files`, as a
convenience to the client.
*/
func (a *Client) PutSnippetsWorkspaceEncodedID(params *PutSnippetsWorkspaceEncodedIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSnippetsWorkspaceEncodedIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSnippetsWorkspaceEncodedIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSnippetsWorkspaceEncodedID",
		Method:             "PUT",
		PathPattern:        "/snippets/{workspace}/{encoded_id}",
		ProducesMediaTypes: []string{"application/json", "multipart/form-data", "multipart/related"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data", "multipart/related"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSnippetsWorkspaceEncodedIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSnippetsWorkspaceEncodedIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutSnippetsWorkspaceEncodedID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutSnippetsWorkspaceEncodedIDCommentsCommentID Updates a comment.

Comments can only be updated by their author.
*/
func (a *Client) PutSnippetsWorkspaceEncodedIDCommentsCommentID(params *PutSnippetsWorkspaceEncodedIDCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSnippetsWorkspaceEncodedIDCommentsCommentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSnippetsWorkspaceEncodedIDCommentsCommentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSnippetsWorkspaceEncodedIDCommentsCommentID",
		Method:             "PUT",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSnippetsWorkspaceEncodedIDCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSnippetsWorkspaceEncodedIDCommentsCommentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutSnippetsWorkspaceEncodedIDCommentsCommentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutSnippetsWorkspaceEncodedIDNodeID Identical to `UPDATE /snippets/encoded_id`, except that this endpoint
takes an explicit commit revision. Only the snippet's "HEAD"/"tip"
(most recent) version can be updated and requests on all other,
older revisions fail by returning a 405 status.

Usage of this endpoint over the unrestricted `/snippets/encoded_id`
could be desired if the caller wants to be sure no concurrent
modifications have taken place between the moment of the UPDATE
request and the original GET.

This can be considered a so-called "Compare And Swap", or CAS
operation.

Other than that, the two endpoints are identical in behavior.
*/
func (a *Client) PutSnippetsWorkspaceEncodedIDNodeID(params *PutSnippetsWorkspaceEncodedIDNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSnippetsWorkspaceEncodedIDNodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSnippetsWorkspaceEncodedIDNodeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSnippetsWorkspaceEncodedIDNodeID",
		Method:             "PUT",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/{node_id}",
		ProducesMediaTypes: []string{"application/json", "multipart/form-data", "multipart/related"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data", "multipart/related"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSnippetsWorkspaceEncodedIDNodeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSnippetsWorkspaceEncodedIDNodeIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutSnippetsWorkspaceEncodedIDNodeID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutSnippetsWorkspaceEncodedIDWatch Used to start watching a specific snippet. Returns 204 (No Content).
*/
func (a *Client) PutSnippetsWorkspaceEncodedIDWatch(params *PutSnippetsWorkspaceEncodedIDWatchParams, authInfo runtime.ClientAuthInfoWriter) (*PutSnippetsWorkspaceEncodedIDWatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSnippetsWorkspaceEncodedIDWatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSnippetsWorkspaceEncodedIDWatch",
		Method:             "PUT",
		PathPattern:        "/snippets/{workspace}/{encoded_id}/watch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSnippetsWorkspaceEncodedIDWatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSnippetsWorkspaceEncodedIDWatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutSnippetsWorkspaceEncodedIDWatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
