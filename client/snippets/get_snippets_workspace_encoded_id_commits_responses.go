// Code generated by go-swagger; DO NOT EDIT.

package snippets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetSnippetsWorkspaceEncodedIDCommitsReader is a Reader for the GetSnippetsWorkspaceEncodedIDCommits structure.
type GetSnippetsWorkspaceEncodedIDCommitsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSnippetsWorkspaceEncodedIDCommitsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSnippetsWorkspaceEncodedIDCommitsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetSnippetsWorkspaceEncodedIDCommitsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSnippetsWorkspaceEncodedIDCommitsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSnippetsWorkspaceEncodedIDCommitsOK creates a GetSnippetsWorkspaceEncodedIDCommitsOK with default headers values
func NewGetSnippetsWorkspaceEncodedIDCommitsOK() *GetSnippetsWorkspaceEncodedIDCommitsOK {
	return &GetSnippetsWorkspaceEncodedIDCommitsOK{}
}

/*GetSnippetsWorkspaceEncodedIDCommitsOK handles this case with default header values.

The paginated list of snippet commits.
*/
type GetSnippetsWorkspaceEncodedIDCommitsOK struct {
	Payload *models.PaginatedSnippetCommit
}

func (o *GetSnippetsWorkspaceEncodedIDCommitsOK) Error() string {
	return fmt.Sprintf("[GET /snippets/{workspace}/{encoded_id}/commits][%d] getSnippetsWorkspaceEncodedIdCommitsOK  %+v", 200, o.Payload)
}

func (o *GetSnippetsWorkspaceEncodedIDCommitsOK) GetPayload() *models.PaginatedSnippetCommit {
	return o.Payload
}

func (o *GetSnippetsWorkspaceEncodedIDCommitsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedSnippetCommit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSnippetsWorkspaceEncodedIDCommitsForbidden creates a GetSnippetsWorkspaceEncodedIDCommitsForbidden with default headers values
func NewGetSnippetsWorkspaceEncodedIDCommitsForbidden() *GetSnippetsWorkspaceEncodedIDCommitsForbidden {
	return &GetSnippetsWorkspaceEncodedIDCommitsForbidden{}
}

/*GetSnippetsWorkspaceEncodedIDCommitsForbidden handles this case with default header values.

If the authenticated user does not have access to the snippet.
*/
type GetSnippetsWorkspaceEncodedIDCommitsForbidden struct {
	Payload *models.Error
}

func (o *GetSnippetsWorkspaceEncodedIDCommitsForbidden) Error() string {
	return fmt.Sprintf("[GET /snippets/{workspace}/{encoded_id}/commits][%d] getSnippetsWorkspaceEncodedIdCommitsForbidden  %+v", 403, o.Payload)
}

func (o *GetSnippetsWorkspaceEncodedIDCommitsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSnippetsWorkspaceEncodedIDCommitsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSnippetsWorkspaceEncodedIDCommitsNotFound creates a GetSnippetsWorkspaceEncodedIDCommitsNotFound with default headers values
func NewGetSnippetsWorkspaceEncodedIDCommitsNotFound() *GetSnippetsWorkspaceEncodedIDCommitsNotFound {
	return &GetSnippetsWorkspaceEncodedIDCommitsNotFound{}
}

/*GetSnippetsWorkspaceEncodedIDCommitsNotFound handles this case with default header values.

If the snippet does not exist.
*/
type GetSnippetsWorkspaceEncodedIDCommitsNotFound struct {
	Payload *models.Error
}

func (o *GetSnippetsWorkspaceEncodedIDCommitsNotFound) Error() string {
	return fmt.Sprintf("[GET /snippets/{workspace}/{encoded_id}/commits][%d] getSnippetsWorkspaceEncodedIdCommitsNotFound  %+v", 404, o.Payload)
}

func (o *GetSnippetsWorkspaceEncodedIDCommitsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSnippetsWorkspaceEncodedIDCommitsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
