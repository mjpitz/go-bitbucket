// Code generated by go-swagger; DO NOT EDIT.

package snippets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetSnippetsWorkspaceEncodedIDNodeIDFilesPathReader is a Reader for the GetSnippetsWorkspaceEncodedIDNodeIDFilesPath structure.
type GetSnippetsWorkspaceEncodedIDNodeIDFilesPathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK creates a GetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK with default headers values
func NewGetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK() *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK {
	return &GetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK{}
}

/*GetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK handles this case with default header values.

Returns the contents of the specified file.
*/
type GetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK struct {
	/*attachment
	 */
	ContentDisposition string
	/*The mime type as derived from the filename
	 */
	ContentType string
}

func (o *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK) Error() string {
	return fmt.Sprintf("[GET /snippets/{workspace}/{encoded_id}/{node_id}/files/{path}][%d] getSnippetsWorkspaceEncodedIdNodeIdFilesPathOK ", 200)
}

func (o *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Disposition
	o.ContentDisposition = response.GetHeader("Content-Disposition")

	// response header Content-Type
	o.ContentType = response.GetHeader("Content-Type")

	return nil
}

// NewGetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden creates a GetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden with default headers values
func NewGetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden() *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden {
	return &GetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden{}
}

/*GetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden handles this case with default header values.

If the authenticated user does not have access to the snippet.
*/
type GetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden struct {
	Payload *models.Error
}

func (o *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden) Error() string {
	return fmt.Sprintf("[GET /snippets/{workspace}/{encoded_id}/{node_id}/files/{path}][%d] getSnippetsWorkspaceEncodedIdNodeIdFilesPathForbidden  %+v", 403, o.Payload)
}

func (o *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound creates a GetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound with default headers values
func NewGetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound() *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound {
	return &GetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound{}
}

/*GetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound handles this case with default header values.

If the file or snippet does not exist.
*/
type GetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound struct {
	Payload *models.Error
}

func (o *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound) Error() string {
	return fmt.Sprintf("[GET /snippets/{workspace}/{encoded_id}/{node_id}/files/{path}][%d] getSnippetsWorkspaceEncodedIdNodeIdFilesPathNotFound  %+v", 404, o.Payload)
}

func (o *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSnippetsWorkspaceEncodedIDNodeIDFilesPathNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
