// Code generated by go-swagger; DO NOT EDIT.

package snippets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutSnippetsWorkspaceEncodedIDReader is a Reader for the PutSnippetsWorkspaceEncodedID structure.
type PutSnippetsWorkspaceEncodedIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSnippetsWorkspaceEncodedIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutSnippetsWorkspaceEncodedIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutSnippetsWorkspaceEncodedIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSnippetsWorkspaceEncodedIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSnippetsWorkspaceEncodedIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutSnippetsWorkspaceEncodedIDOK creates a PutSnippetsWorkspaceEncodedIDOK with default headers values
func NewPutSnippetsWorkspaceEncodedIDOK() *PutSnippetsWorkspaceEncodedIDOK {
	return &PutSnippetsWorkspaceEncodedIDOK{}
}

/*PutSnippetsWorkspaceEncodedIDOK handles this case with default header values.

The updated snippet object.
*/
type PutSnippetsWorkspaceEncodedIDOK struct {
	Payload *models.Snippet
}

func (o *PutSnippetsWorkspaceEncodedIDOK) Error() string {
	return fmt.Sprintf("[PUT /snippets/{workspace}/{encoded_id}][%d] putSnippetsWorkspaceEncodedIdOK  %+v", 200, o.Payload)
}

func (o *PutSnippetsWorkspaceEncodedIDOK) GetPayload() *models.Snippet {
	return o.Payload
}

func (o *PutSnippetsWorkspaceEncodedIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Snippet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSnippetsWorkspaceEncodedIDUnauthorized creates a PutSnippetsWorkspaceEncodedIDUnauthorized with default headers values
func NewPutSnippetsWorkspaceEncodedIDUnauthorized() *PutSnippetsWorkspaceEncodedIDUnauthorized {
	return &PutSnippetsWorkspaceEncodedIDUnauthorized{}
}

/*PutSnippetsWorkspaceEncodedIDUnauthorized handles this case with default header values.

If the snippet is private and the request was not authenticated.
*/
type PutSnippetsWorkspaceEncodedIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutSnippetsWorkspaceEncodedIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /snippets/{workspace}/{encoded_id}][%d] putSnippetsWorkspaceEncodedIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutSnippetsWorkspaceEncodedIDUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutSnippetsWorkspaceEncodedIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSnippetsWorkspaceEncodedIDForbidden creates a PutSnippetsWorkspaceEncodedIDForbidden with default headers values
func NewPutSnippetsWorkspaceEncodedIDForbidden() *PutSnippetsWorkspaceEncodedIDForbidden {
	return &PutSnippetsWorkspaceEncodedIDForbidden{}
}

/*PutSnippetsWorkspaceEncodedIDForbidden handles this case with default header values.

If authenticated user does not have permission to update the private snippet.
*/
type PutSnippetsWorkspaceEncodedIDForbidden struct {
	Payload *models.Error
}

func (o *PutSnippetsWorkspaceEncodedIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /snippets/{workspace}/{encoded_id}][%d] putSnippetsWorkspaceEncodedIdForbidden  %+v", 403, o.Payload)
}

func (o *PutSnippetsWorkspaceEncodedIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutSnippetsWorkspaceEncodedIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSnippetsWorkspaceEncodedIDNotFound creates a PutSnippetsWorkspaceEncodedIDNotFound with default headers values
func NewPutSnippetsWorkspaceEncodedIDNotFound() *PutSnippetsWorkspaceEncodedIDNotFound {
	return &PutSnippetsWorkspaceEncodedIDNotFound{}
}

/*PutSnippetsWorkspaceEncodedIDNotFound handles this case with default header values.

If the snippet does not exist.
*/
type PutSnippetsWorkspaceEncodedIDNotFound struct {
	Payload *models.Error
}

func (o *PutSnippetsWorkspaceEncodedIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /snippets/{workspace}/{encoded_id}][%d] putSnippetsWorkspaceEncodedIdNotFound  %+v", 404, o.Payload)
}

func (o *PutSnippetsWorkspaceEncodedIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutSnippetsWorkspaceEncodedIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
