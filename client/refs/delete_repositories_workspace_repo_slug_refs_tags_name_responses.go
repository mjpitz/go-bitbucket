// Code generated by go-swagger; DO NOT EDIT.

package refs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameReader is a Reader for the DeleteRepositoriesWorkspaceRepoSlugRefsTagsName structure.
type DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent creates a DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent() *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent {
	return &DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent{}
}

/*DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent handles this case with default header values.

Indicates the specified tag was successfully deleted.
*/
type DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent struct {
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/refs/tags/{name}][%d] deleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent ", 204)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden creates a DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden() *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden {
	return &DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden{}
}

/*DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden handles this case with default header values.

If the repository is private and the authenticated user does not have
access to it.

*/
type DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden struct {
	Payload *models.Error
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/refs/tags/{name}][%d] deleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound creates a DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound() *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound {
	return &DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound{}
}

/*DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound handles this case with default header values.

The specified repository or tag does not exist.
*/
type DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound struct {
	Payload *models.Error
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/refs/tags/{name}][%d] deleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
