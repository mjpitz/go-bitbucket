// Code generated by go-swagger; DO NOT EDIT.

package refs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugRefsBranchesNameReader is a Reader for the GetRepositoriesWorkspaceRepoSlugRefsBranchesName structure.
type GetRepositoriesWorkspaceRepoSlugRefsBranchesNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK creates a GetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK() *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK {
	return &GetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK handles this case with default header values.

The branch object.
*/
type GetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK struct {
	Payload *models.Branch
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs/branches/{name}][%d] getRepositoriesWorkspaceRepoSlugRefsBranchesNameOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK) GetPayload() *models.Branch {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Branch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden creates a GetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden() *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden {
	return &GetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden handles this case with default header values.

If the repository is private and the authenticated user does not have
access to it.

*/
type GetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs/branches/{name}][%d] getRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden  %+v", 403, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound creates a GetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound() *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound {
	return &GetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound handles this case with default header values.

The specified repository or branch does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs/branches/{name}][%d] getRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
