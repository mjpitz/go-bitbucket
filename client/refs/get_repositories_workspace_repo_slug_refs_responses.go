// Code generated by go-swagger; DO NOT EDIT.

package refs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugRefsReader is a Reader for the GetRepositoriesWorkspaceRepoSlugRefs structure.
type GetRepositoriesWorkspaceRepoSlugRefsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugRefsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugRefsOK creates a GetRepositoriesWorkspaceRepoSlugRefsOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsOK() *GetRepositoriesWorkspaceRepoSlugRefsOK {
	return &GetRepositoriesWorkspaceRepoSlugRefsOK{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsOK handles this case with default header values.

A paginated list of refs matching any filter criteria that were provided.
*/
type GetRepositoriesWorkspaceRepoSlugRefsOK struct {
	Payload *models.PaginatedRefs
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs][%d] getRepositoriesWorkspaceRepoSlugRefsOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsOK) GetPayload() *models.PaginatedRefs {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedRefs)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsForbidden creates a GetRepositoriesWorkspaceRepoSlugRefsForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsForbidden() *GetRepositoriesWorkspaceRepoSlugRefsForbidden {
	return &GetRepositoriesWorkspaceRepoSlugRefsForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsForbidden handles this case with default header values.

If the repository is private and the authenticated user does not have
access to it.

*/
type GetRepositoriesWorkspaceRepoSlugRefsForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs][%d] getRepositoriesWorkspaceRepoSlugRefsForbidden  %+v", 403, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsNotFound creates a GetRepositoriesWorkspaceRepoSlugRefsNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsNotFound() *GetRepositoriesWorkspaceRepoSlugRefsNotFound {
	return &GetRepositoriesWorkspaceRepoSlugRefsNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsNotFound handles this case with default header values.

The specified repository does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugRefsNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs][%d] getRepositoriesWorkspaceRepoSlugRefsNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
