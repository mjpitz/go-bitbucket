// Code generated by go-swagger; DO NOT EDIT.

package refs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesParams creates a new GetRepositoriesWorkspaceRepoSlugRefsBranchesParams object
// with the default values initialized.
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesParams() *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugRefsBranchesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesParamsWithTimeout creates a new GetRepositoriesWorkspaceRepoSlugRefsBranchesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesParamsWithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugRefsBranchesParams{

		timeout: timeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesParamsWithContext creates a new GetRepositoriesWorkspaceRepoSlugRefsBranchesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesParamsWithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugRefsBranchesParams{

		Context: ctx,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesParamsWithHTTPClient creates a new GetRepositoriesWorkspaceRepoSlugRefsBranchesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesParamsWithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugRefsBranchesParams{
		HTTPClient: client,
	}
}

/*GetRepositoriesWorkspaceRepoSlugRefsBranchesParams contains all the parameters to send to the API endpoint
for the get repositories workspace repo slug refs branches operation typically these are written to a http.Request
*/
type GetRepositoriesWorkspaceRepoSlugRefsBranchesParams struct {

	/*Q

	Query string to narrow down the response as per
	[filtering and sorting](../../../../../meta/filtering).

	*/
	Q *string
	/*RepoSlug

	This can either be the repository slug or the UUID of the repository,
	surrounded by curly-braces, for example: `{repository UUID}`.


	*/
	RepoSlug string
	/*Sort

	Field by which the results should be sorted as per
	[filtering and sorting](../../../../../meta/filtering). The `name`
	field is handled specially for branches in that, if specified as the sort field, it
	uses a natural sort order instead of the default lexicographical sort order. For example,
	it will return ['branch1', 'branch2', 'branch10'] instead of ['branch1', 'branch10', 'branch2'].

	*/
	Sort *string
	/*Username

	This can either be the username or the UUID of the user,
	surrounded by curly-braces, for example: `{user UUID}`.


	*/
	Username string
	/*Workspace
	  This can either be the workspace ID (slug) or the workspace UUID
	surrounded by curly-braces, for example: `{workspace UUID}`.


	*/
	Workspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) WithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) WithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) WithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQ adds the q to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) WithQ(q *string) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) SetQ(q *string) {
	o.Q = q
}

// WithRepoSlug adds the repoSlug to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) WithRepoSlug(repoSlug string) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithSort adds the sort to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) WithSort(sort *string) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithUsername adds the username to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) WithUsername(username string) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) SetUsername(username string) {
	o.Username = username
}

// WithWorkspace adds the workspace to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) WithWorkspace(workspace string) *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams {
	o.SetWorkspace(workspace)
	return o
}

// SetWorkspace adds the workspace to the get repositories workspace repo slug refs branches params
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) SetWorkspace(workspace string) {
	o.Workspace = workspace
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	// path param workspace
	if err := r.SetPathParam("workspace", o.Workspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
