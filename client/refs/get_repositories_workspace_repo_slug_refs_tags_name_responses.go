// Code generated by go-swagger; DO NOT EDIT.

package refs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugRefsTagsNameReader is a Reader for the GetRepositoriesWorkspaceRepoSlugRefsTagsName structure.
type GetRepositoriesWorkspaceRepoSlugRefsTagsNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugRefsTagsNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameOK creates a GetRepositoriesWorkspaceRepoSlugRefsTagsNameOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameOK() *GetRepositoriesWorkspaceRepoSlugRefsTagsNameOK {
	return &GetRepositoriesWorkspaceRepoSlugRefsTagsNameOK{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsTagsNameOK handles this case with default header values.

The tag object.
*/
type GetRepositoriesWorkspaceRepoSlugRefsTagsNameOK struct {
	Payload *models.Tag
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsTagsNameOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs/tags/{name}][%d] getRepositoriesWorkspaceRepoSlugRefsTagsNameOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsTagsNameOK) GetPayload() *models.Tag {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsTagsNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Tag)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden creates a GetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden() *GetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden {
	return &GetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden handles this case with default header values.

If the repository is private and the authenticated user does not have
access to it.

*/
type GetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs/tags/{name}][%d] getRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden  %+v", 403, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsTagsNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound creates a GetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound() *GetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound {
	return &GetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound handles this case with default header values.

The specified repository or tag does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs/tags/{name}][%d] getRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsTagsNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
