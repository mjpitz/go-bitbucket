// Code generated by go-swagger; DO NOT EDIT.

package refs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugRefsBranchesReader is a Reader for the GetRepositoriesWorkspaceRepoSlugRefsBranches structure.
type GetRepositoriesWorkspaceRepoSlugRefsBranchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsBranchesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesOK creates a GetRepositoriesWorkspaceRepoSlugRefsBranchesOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesOK() *GetRepositoriesWorkspaceRepoSlugRefsBranchesOK {
	return &GetRepositoriesWorkspaceRepoSlugRefsBranchesOK{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsBranchesOK handles this case with default header values.

A paginated list of branches matching any filter criteria that were provided.
*/
type GetRepositoriesWorkspaceRepoSlugRefsBranchesOK struct {
	Payload *models.PaginatedBranches
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs/branches][%d] getRepositoriesWorkspaceRepoSlugRefsBranchesOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesOK) GetPayload() *models.PaginatedBranches {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedBranches)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden creates a GetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden() *GetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden {
	return &GetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden handles this case with default header values.

If the repository is private and the authenticated user does not have
access to it.

*/
type GetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs/branches][%d] getRepositoriesWorkspaceRepoSlugRefsBranchesForbidden  %+v", 403, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound creates a GetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound() *GetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound {
	return &GetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound handles this case with default header values.

The specified repository does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/refs/branches][%d] getRepositoriesWorkspaceRepoSlugRefsBranchesNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugRefsBranchesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
