// Code generated by go-swagger; DO NOT EDIT.

package refs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameReader is a Reader for the DeleteRepositoriesWorkspaceRepoSlugRefsBranchesName structure.
type DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent creates a DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent() *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent {
	return &DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent{}
}

/*DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent handles this case with default header values.

Indicates that the specified branch was successfully deleted.
*/
type DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent struct {
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/refs/branches/{name}][%d] deleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent ", 204)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden creates a DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden() *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden {
	return &DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden{}
}

/*DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden handles this case with default header values.

If the repository is private and the authenticated user does not have
access to it.

*/
type DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden struct {
	Payload *models.Error
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/refs/branches/{name}][%d] deleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound creates a DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound() *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound {
	return &DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound{}
}

/*DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound handles this case with default header values.

The specified repository or branch does not exist.
*/
type DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound struct {
	Payload *models.Error
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/refs/branches/{name}][%d] deleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
