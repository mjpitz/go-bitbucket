// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteUsersUsernameHooksUID(params *DeleteUsersUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUsersUsernameHooksUIDNoContent, error)

	GetTeamsUsernameRepositories(params *GetTeamsUsernameRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) error

	GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error)

	GetUserEmails(params *GetUserEmailsParams, authInfo runtime.ClientAuthInfoWriter) error

	GetUserEmailsEmail(params *GetUserEmailsEmailParams, authInfo runtime.ClientAuthInfoWriter) error

	GetUsersSelectedUser(params *GetUsersSelectedUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersSelectedUserOK, error)

	GetUsersUsernameHooks(params *GetUsersUsernameHooksParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersUsernameHooksOK, error)

	GetUsersUsernameHooksUID(params *GetUsersUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersUsernameHooksUIDOK, error)

	GetUsersUsernameMembers(params *GetUsersUsernameMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersUsernameMembersOK, error)

	GetUsersUsernameRepositories(params *GetUsersUsernameRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) error

	PostUsersUsernameHooks(params *PostUsersUsernameHooksParams, authInfo runtime.ClientAuthInfoWriter) (*PostUsersUsernameHooksCreated, error)

	PutUsersUsernameHooksUID(params *PutUsersUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutUsersUsernameHooksUIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteUsersUsernameHooksUID Deletes the specified webhook subscription from the given user
account.

Note that the username path parameter has been deprecated due to
[privacy changes](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#removal-of-usernames-from-user-referencing-apis).
Use the account's UUID or account_id instead.
*/
func (a *Client) DeleteUsersUsernameHooksUID(params *DeleteUsersUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUsersUsernameHooksUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersUsernameHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersUsernameHooksUID",
		Method:             "DELETE",
		PathPattern:        "/users/{username}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsersUsernameHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsersUsernameHooksUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUsersUsernameHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsUsernameRepositories All repositories owned by a user/team. This includes private
repositories, but filtered down to the ones that the calling user has
access to.

The teams and users endpoint have been deprecated, and you should ensure you are using the new workspaces endpoint.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
*/
func (a *Client) GetTeamsUsernameRepositories(params *GetTeamsUsernameRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsUsernameRepositoriesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsUsernameRepositories",
		Method:             "GET",
		PathPattern:        "/teams/{username}/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsUsernameRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetUser Returns the currently logged in user.
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUser",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserEmails Returns all the authenticated user's email addresses. Both
confirmed and unconfirmed.
*/
func (a *Client) GetUserEmails(params *GetUserEmailsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserEmailsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserEmails",
		Method:             "GET",
		PathPattern:        "/user/emails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserEmailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetUserEmailsEmail Returns details about a specific one of the authenticated user's
email addresses.

Details describe whether the address has been confirmed by the user and
whether it is the user's primary address or not.
*/
func (a *Client) GetUserEmailsEmail(params *GetUserEmailsEmailParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserEmailsEmailParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserEmailsEmail",
		Method:             "GET",
		PathPattern:        "/user/emails/{email}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserEmailsEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetUsersSelectedUser Gets the public information associated with a user account.

This endpoint has been deprecated, and you should use the new workspaces endpoint.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).

If the user's profile is private, `location`, `website` and
`created_on` elements are omitted.

Note that the user object returned by this operation is changing significantly, due to privacy changes.
See the [announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#changes-to-bitbucket-user-objects) for details.
*/
func (a *Client) GetUsersSelectedUser(params *GetUsersSelectedUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersSelectedUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersSelectedUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersSelectedUser",
		Method:             "GET",
		PathPattern:        "/users/{selected_user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersSelectedUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersSelectedUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersSelectedUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsernameHooks Returns a paginated list of webhooks installed on this user account.

Note that the username path parameter has been deprecated due to
[privacy changes](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#removal-of-usernames-from-user-referencing-apis).
Use the account's UUID or account_id instead.

Also note that the users endpoint has been deprecated, and the workspaces
endpoint should be used instead.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
*/
func (a *Client) GetUsersUsernameHooks(params *GetUsersUsernameHooksParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersUsernameHooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUsernameHooks",
		Method:             "GET",
		PathPattern:        "/users/{username}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsernameHooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersUsernameHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsernameHooksUID Returns the webhook with the specified id installed on the given
user account.

Note that the username path parameter has been deprecated due to
[privacy changes](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#removal-of-usernames-from-user-referencing-apis).
Use the account's UUID or account_id instead.
*/
func (a *Client) GetUsersUsernameHooksUID(params *GetUsersUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersUsernameHooksUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUsernameHooksUID",
		Method:             "GET",
		PathPattern:        "/users/{username}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsernameHooksUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersUsernameHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsernameMembers get users username members API
*/
func (a *Client) GetUsersUsernameMembers(params *GetUsersUsernameMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersUsernameMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUsernameMembers",
		Method:             "GET",
		PathPattern:        "/users/{username}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsernameMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersUsernameMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsernameRepositories All repositories owned by a user/team. This includes private
repositories, but filtered down to the ones that the calling user has
access to.

The teams and users endpoint have been deprecated, and you should ensure you are using the new workspaces endpoint.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
*/
func (a *Client) GetUsersUsernameRepositories(params *GetUsersUsernameRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameRepositoriesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUsernameRepositories",
		Method:             "GET",
		PathPattern:        "/users/{username}/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PostUsersUsernameHooks Creates a new webhook on the specified user account.

Account-level webhooks are fired for events from all repositories
belonging to that account.

Note that one can only register webhooks on one's own account, not that
of others.

Also, note that the username path parameter has been deprecated due to
[privacy changes](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#removal-of-usernames-from-user-referencing-apis).
Use the account's UUID or account_id instead.

The users endpoints have been deprecated, and the workspaces
endpoint should be used instead.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
*/
func (a *Client) PostUsersUsernameHooks(params *PostUsersUsernameHooksParams, authInfo runtime.ClientAuthInfoWriter) (*PostUsersUsernameHooksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersUsernameHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersUsernameHooks",
		Method:             "POST",
		PathPattern:        "/users/{username}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersUsernameHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUsersUsernameHooksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUsersUsernameHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutUsersUsernameHooksUID Updates the specified webhook subscription.

The following properties can be mutated:

* `description`
* `url`
* `active`
* `events`

Note that the username path parameter has been deprecated due to
[privacy changes](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#removal-of-usernames-from-user-referencing-apis).
Use the account's UUID or account_id instead.
*/
func (a *Client) PutUsersUsernameHooksUID(params *PutUsersUsernameHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutUsersUsernameHooksUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsersUsernameHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUsersUsernameHooksUID",
		Method:             "PUT",
		PathPattern:        "/users/{username}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUsersUsernameHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUsersUsernameHooksUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutUsersUsernameHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
