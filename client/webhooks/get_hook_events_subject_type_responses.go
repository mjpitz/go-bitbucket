// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetHookEventsSubjectTypeReader is a Reader for the GetHookEventsSubjectType structure.
type GetHookEventsSubjectTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHookEventsSubjectTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHookEventsSubjectTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetHookEventsSubjectTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetHookEventsSubjectTypeOK creates a GetHookEventsSubjectTypeOK with default headers values
func NewGetHookEventsSubjectTypeOK() *GetHookEventsSubjectTypeOK {
	return &GetHookEventsSubjectTypeOK{}
}

/*GetHookEventsSubjectTypeOK handles this case with default header values.

A paginated list of webhook types available to subscribe on.
*/
type GetHookEventsSubjectTypeOK struct {
	Payload *models.PaginatedHookEvents
}

func (o *GetHookEventsSubjectTypeOK) Error() string {
	return fmt.Sprintf("[GET /hook_events/{subject_type}][%d] getHookEventsSubjectTypeOK  %+v", 200, o.Payload)
}

func (o *GetHookEventsSubjectTypeOK) GetPayload() *models.PaginatedHookEvents {
	return o.Payload
}

func (o *GetHookEventsSubjectTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedHookEvents)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHookEventsSubjectTypeNotFound creates a GetHookEventsSubjectTypeNotFound with default headers values
func NewGetHookEventsSubjectTypeNotFound() *GetHookEventsSubjectTypeNotFound {
	return &GetHookEventsSubjectTypeNotFound{}
}

/*GetHookEventsSubjectTypeNotFound handles this case with default header values.

If an invalid `{subject_type}` value was specified.
*/
type GetHookEventsSubjectTypeNotFound struct {
	Payload *models.Error
}

func (o *GetHookEventsSubjectTypeNotFound) Error() string {
	return fmt.Sprintf("[GET /hook_events/{subject_type}][%d] getHookEventsSubjectTypeNotFound  %+v", 404, o.Payload)
}

func (o *GetHookEventsSubjectTypeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHookEventsSubjectTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
