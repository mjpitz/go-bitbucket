// Code generated by go-swagger; DO NOT EDIT.

package ssh

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutUsersUsernameSSHKeysReader is a Reader for the PutUsersUsernameSSHKeys structure.
type PutUsersUsernameSSHKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUsersUsernameSSHKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUsersUsernameSSHKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutUsersUsernameSSHKeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutUsersUsernameSSHKeysForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutUsersUsernameSSHKeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutUsersUsernameSSHKeysOK creates a PutUsersUsernameSSHKeysOK with default headers values
func NewPutUsersUsernameSSHKeysOK() *PutUsersUsernameSSHKeysOK {
	return &PutUsersUsernameSSHKeysOK{}
}

/*PutUsersUsernameSSHKeysOK handles this case with default header values.

The newly updated SSH key.
*/
type PutUsersUsernameSSHKeysOK struct {
	Payload *models.SSHAccountKey
}

func (o *PutUsersUsernameSSHKeysOK) Error() string {
	return fmt.Sprintf("[PUT /users/{username}/ssh-keys/][%d] putUsersUsernameSshKeysOK  %+v", 200, o.Payload)
}

func (o *PutUsersUsernameSSHKeysOK) GetPayload() *models.SSHAccountKey {
	return o.Payload
}

func (o *PutUsersUsernameSSHKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SSHAccountKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersUsernameSSHKeysBadRequest creates a PutUsersUsernameSSHKeysBadRequest with default headers values
func NewPutUsersUsernameSSHKeysBadRequest() *PutUsersUsernameSSHKeysBadRequest {
	return &PutUsersUsernameSSHKeysBadRequest{}
}

/*PutUsersUsernameSSHKeysBadRequest handles this case with default header values.

If the submitted key or related value is invalid
*/
type PutUsersUsernameSSHKeysBadRequest struct {
	Payload *models.Error
}

func (o *PutUsersUsernameSSHKeysBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/{username}/ssh-keys/][%d] putUsersUsernameSshKeysBadRequest  %+v", 400, o.Payload)
}

func (o *PutUsersUsernameSSHKeysBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutUsersUsernameSSHKeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersUsernameSSHKeysForbidden creates a PutUsersUsernameSSHKeysForbidden with default headers values
func NewPutUsersUsernameSSHKeysForbidden() *PutUsersUsernameSSHKeysForbidden {
	return &PutUsersUsernameSSHKeysForbidden{}
}

/*PutUsersUsernameSSHKeysForbidden handles this case with default header values.

If the current user does not have permission to add a key for the specified user
*/
type PutUsersUsernameSSHKeysForbidden struct {
}

func (o *PutUsersUsernameSSHKeysForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{username}/ssh-keys/][%d] putUsersUsernameSshKeysForbidden ", 403)
}

func (o *PutUsersUsernameSSHKeysForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUsersUsernameSSHKeysNotFound creates a PutUsersUsernameSSHKeysNotFound with default headers values
func NewPutUsersUsernameSSHKeysNotFound() *PutUsersUsernameSSHKeysNotFound {
	return &PutUsersUsernameSSHKeysNotFound{}
}

/*PutUsersUsernameSSHKeysNotFound handles this case with default header values.

If the specified user does not exist
*/
type PutUsersUsernameSSHKeysNotFound struct {
	Payload *models.Error
}

func (o *PutUsersUsernameSSHKeysNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{username}/ssh-keys/][%d] putUsersUsernameSshKeysNotFound  %+v", 404, o.Payload)
}

func (o *PutUsersUsernameSSHKeysNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutUsersUsernameSSHKeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
