// Code generated by go-swagger; DO NOT EDIT.

package ssh

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostUsersUsernameSSHKeysReader is a Reader for the PostUsersUsernameSSHKeys structure.
type PostUsersUsernameSSHKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUsersUsernameSSHKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostUsersUsernameSSHKeysCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUsersUsernameSSHKeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostUsersUsernameSSHKeysForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostUsersUsernameSSHKeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUsersUsernameSSHKeysCreated creates a PostUsersUsernameSSHKeysCreated with default headers values
func NewPostUsersUsernameSSHKeysCreated() *PostUsersUsernameSSHKeysCreated {
	return &PostUsersUsernameSSHKeysCreated{}
}

/*PostUsersUsernameSSHKeysCreated handles this case with default header values.

The newly created SSH key.
*/
type PostUsersUsernameSSHKeysCreated struct {
	Payload *models.SSHAccountKey
}

func (o *PostUsersUsernameSSHKeysCreated) Error() string {
	return fmt.Sprintf("[POST /users/{username}/ssh-keys][%d] postUsersUsernameSshKeysCreated  %+v", 201, o.Payload)
}

func (o *PostUsersUsernameSSHKeysCreated) GetPayload() *models.SSHAccountKey {
	return o.Payload
}

func (o *PostUsersUsernameSSHKeysCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SSHAccountKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersUsernameSSHKeysBadRequest creates a PostUsersUsernameSSHKeysBadRequest with default headers values
func NewPostUsersUsernameSSHKeysBadRequest() *PostUsersUsernameSSHKeysBadRequest {
	return &PostUsersUsernameSSHKeysBadRequest{}
}

/*PostUsersUsernameSSHKeysBadRequest handles this case with default header values.

If the submitted key or related value is invalid
*/
type PostUsersUsernameSSHKeysBadRequest struct {
	Payload *models.Error
}

func (o *PostUsersUsernameSSHKeysBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{username}/ssh-keys][%d] postUsersUsernameSshKeysBadRequest  %+v", 400, o.Payload)
}

func (o *PostUsersUsernameSSHKeysBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUsersUsernameSSHKeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUsersUsernameSSHKeysForbidden creates a PostUsersUsernameSSHKeysForbidden with default headers values
func NewPostUsersUsernameSSHKeysForbidden() *PostUsersUsernameSSHKeysForbidden {
	return &PostUsersUsernameSSHKeysForbidden{}
}

/*PostUsersUsernameSSHKeysForbidden handles this case with default header values.

If the current user does not have permission to add a key for the specified user
*/
type PostUsersUsernameSSHKeysForbidden struct {
}

func (o *PostUsersUsernameSSHKeysForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{username}/ssh-keys][%d] postUsersUsernameSshKeysForbidden ", 403)
}

func (o *PostUsersUsernameSSHKeysForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostUsersUsernameSSHKeysNotFound creates a PostUsersUsernameSSHKeysNotFound with default headers values
func NewPostUsersUsernameSSHKeysNotFound() *PostUsersUsernameSSHKeysNotFound {
	return &PostUsersUsernameSSHKeysNotFound{}
}

/*PostUsersUsernameSSHKeysNotFound handles this case with default header values.

If the specified user does not exist
*/
type PostUsersUsernameSSHKeysNotFound struct {
	Payload *models.Error
}

func (o *PostUsersUsernameSSHKeysNotFound) Error() string {
	return fmt.Sprintf("[POST /users/{username}/ssh-keys][%d] postUsersUsernameSshKeysNotFound  %+v", 404, o.Payload)
}

func (o *PostUsersUsernameSSHKeysNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUsersUsernameSSHKeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
