// Code generated by go-swagger; DO NOT EDIT.

package ssh

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetUsersUsernameSSHKeysReader is a Reader for the GetUsersUsernameSSHKeys structure.
type GetUsersUsernameSSHKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsersUsernameSSHKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsersUsernameSSHKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetUsersUsernameSSHKeysForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUsersUsernameSSHKeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUsersUsernameSSHKeysOK creates a GetUsersUsernameSSHKeysOK with default headers values
func NewGetUsersUsernameSSHKeysOK() *GetUsersUsernameSSHKeysOK {
	return &GetUsersUsernameSSHKeysOK{}
}

/*GetUsersUsernameSSHKeysOK handles this case with default header values.

The specific SSH key matching the user and UUID
*/
type GetUsersUsernameSSHKeysOK struct {
	Payload *models.SSHAccountKey
}

func (o *GetUsersUsernameSSHKeysOK) Error() string {
	return fmt.Sprintf("[GET /users/{username}/ssh-keys/][%d] getUsersUsernameSshKeysOK  %+v", 200, o.Payload)
}

func (o *GetUsersUsernameSSHKeysOK) GetPayload() *models.SSHAccountKey {
	return o.Payload
}

func (o *GetUsersUsernameSSHKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SSHAccountKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersUsernameSSHKeysForbidden creates a GetUsersUsernameSSHKeysForbidden with default headers values
func NewGetUsersUsernameSSHKeysForbidden() *GetUsersUsernameSSHKeysForbidden {
	return &GetUsersUsernameSSHKeysForbidden{}
}

/*GetUsersUsernameSSHKeysForbidden handles this case with default header values.

If the specified user or key is not accessible to the current user
*/
type GetUsersUsernameSSHKeysForbidden struct {
}

func (o *GetUsersUsernameSSHKeysForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{username}/ssh-keys/][%d] getUsersUsernameSshKeysForbidden ", 403)
}

func (o *GetUsersUsernameSSHKeysForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUsersUsernameSSHKeysNotFound creates a GetUsersUsernameSSHKeysNotFound with default headers values
func NewGetUsersUsernameSSHKeysNotFound() *GetUsersUsernameSSHKeysNotFound {
	return &GetUsersUsernameSSHKeysNotFound{}
}

/*GetUsersUsernameSSHKeysNotFound handles this case with default header values.

If the specified user or key does not exist
*/
type GetUsersUsernameSSHKeysNotFound struct {
	Payload *models.Error
}

func (o *GetUsersUsernameSSHKeysNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{username}/ssh-keys/][%d] getUsersUsernameSshKeysNotFound  %+v", 404, o.Payload)
}

func (o *GetUsersUsernameSSHKeysNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUsersUsernameSSHKeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
