// Code generated by go-swagger; DO NOT EDIT.

package downloads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new downloads API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for downloads API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteRepositoriesWorkspaceRepoSlugDownloadsFilename(params *DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameParams, authInfo runtime.ClientAuthInfoWriter) error

	GetRepositoriesWorkspaceRepoSlugDownloads(params *GetRepositoriesWorkspaceRepoSlugDownloadsParams, authInfo runtime.ClientAuthInfoWriter) error

	GetRepositoriesWorkspaceRepoSlugDownloadsFilename(params *GetRepositoriesWorkspaceRepoSlugDownloadsFilenameParams, authInfo runtime.ClientAuthInfoWriter) error

	PostRepositoriesWorkspaceRepoSlugDownloads(params *PostRepositoriesWorkspaceRepoSlugDownloadsParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteRepositoriesWorkspaceRepoSlugDownloadsFilename Deletes the specified download artifact from the repository.
*/
func (a *Client) DeleteRepositoriesWorkspaceRepoSlugDownloadsFilename(params *DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRepositoriesWorkspaceRepoSlugDownloadsFilename",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/downloads/{filename}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetRepositoriesWorkspaceRepoSlugDownloads Returns a list of download links associated with the repository.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugDownloads(params *GetRepositoriesWorkspaceRepoSlugDownloadsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugDownloadsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugDownloads",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/downloads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugDownloadsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetRepositoriesWorkspaceRepoSlugDownloadsFilename Return a redirect to the contents of a download artifact.

This endpoint returns the actual file contents and not the artifact's
metadata.

    $ curl -s -L https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads/hello.txt
    Hello World
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugDownloadsFilename(params *GetRepositoriesWorkspaceRepoSlugDownloadsFilenameParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugDownloadsFilenameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugDownloadsFilename",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/downloads/{filename}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugDownloadsFilenameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PostRepositoriesWorkspaceRepoSlugDownloads Upload new download artifacts.

To upload files, perform a `multipart/form-data` POST containing one
or more `files` fields:

    $ echo Hello World > hello.txt
    $ curl -s -u evzijst -X POST https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads -F files=@hello.txt

When a file is uploaded with the same name as an existing artifact,
then the existing file will be replaced.
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugDownloads(params *PostRepositoriesWorkspaceRepoSlugDownloadsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugDownloadsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugDownloads",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/downloads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugDownloadsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
