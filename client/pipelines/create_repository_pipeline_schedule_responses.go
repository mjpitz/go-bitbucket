// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// CreateRepositoryPipelineScheduleReader is a Reader for the CreateRepositoryPipelineSchedule structure.
type CreateRepositoryPipelineScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRepositoryPipelineScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateRepositoryPipelineScheduleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRepositoryPipelineScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateRepositoryPipelineScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateRepositoryPipelineScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateRepositoryPipelineScheduleCreated creates a CreateRepositoryPipelineScheduleCreated with default headers values
func NewCreateRepositoryPipelineScheduleCreated() *CreateRepositoryPipelineScheduleCreated {
	return &CreateRepositoryPipelineScheduleCreated{}
}

/*CreateRepositoryPipelineScheduleCreated handles this case with default header values.

The created schedule.
*/
type CreateRepositoryPipelineScheduleCreated struct {
	Payload *models.PipelineSchedule
}

func (o *CreateRepositoryPipelineScheduleCreated) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/pipelines_config/schedules/][%d] createRepositoryPipelineScheduleCreated  %+v", 201, o.Payload)
}

func (o *CreateRepositoryPipelineScheduleCreated) GetPayload() *models.PipelineSchedule {
	return o.Payload
}

func (o *CreateRepositoryPipelineScheduleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PipelineSchedule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRepositoryPipelineScheduleBadRequest creates a CreateRepositoryPipelineScheduleBadRequest with default headers values
func NewCreateRepositoryPipelineScheduleBadRequest() *CreateRepositoryPipelineScheduleBadRequest {
	return &CreateRepositoryPipelineScheduleBadRequest{}
}

/*CreateRepositoryPipelineScheduleBadRequest handles this case with default header values.

There were errors validating the request.
*/
type CreateRepositoryPipelineScheduleBadRequest struct {
	Payload *models.Error
}

func (o *CreateRepositoryPipelineScheduleBadRequest) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/pipelines_config/schedules/][%d] createRepositoryPipelineScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRepositoryPipelineScheduleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRepositoryPipelineScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRepositoryPipelineScheduleUnauthorized creates a CreateRepositoryPipelineScheduleUnauthorized with default headers values
func NewCreateRepositoryPipelineScheduleUnauthorized() *CreateRepositoryPipelineScheduleUnauthorized {
	return &CreateRepositoryPipelineScheduleUnauthorized{}
}

/*CreateRepositoryPipelineScheduleUnauthorized handles this case with default header values.

The maximum limit of schedules for this repository was reached.
*/
type CreateRepositoryPipelineScheduleUnauthorized struct {
	Payload *models.Error
}

func (o *CreateRepositoryPipelineScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/pipelines_config/schedules/][%d] createRepositoryPipelineScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateRepositoryPipelineScheduleUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRepositoryPipelineScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRepositoryPipelineScheduleNotFound creates a CreateRepositoryPipelineScheduleNotFound with default headers values
func NewCreateRepositoryPipelineScheduleNotFound() *CreateRepositoryPipelineScheduleNotFound {
	return &CreateRepositoryPipelineScheduleNotFound{}
}

/*CreateRepositoryPipelineScheduleNotFound handles this case with default header values.

The account or repository was not found.
*/
type CreateRepositoryPipelineScheduleNotFound struct {
	Payload *models.Error
}

func (o *CreateRepositoryPipelineScheduleNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/pipelines_config/schedules/][%d] createRepositoryPipelineScheduleNotFound  %+v", 404, o.Payload)
}

func (o *CreateRepositoryPipelineScheduleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRepositoryPipelineScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
