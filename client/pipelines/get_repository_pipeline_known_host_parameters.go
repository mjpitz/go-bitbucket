// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRepositoryPipelineKnownHostParams creates a new GetRepositoryPipelineKnownHostParams object
// with the default values initialized.
func NewGetRepositoryPipelineKnownHostParams() *GetRepositoryPipelineKnownHostParams {
	var ()
	return &GetRepositoryPipelineKnownHostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoryPipelineKnownHostParamsWithTimeout creates a new GetRepositoryPipelineKnownHostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepositoryPipelineKnownHostParamsWithTimeout(timeout time.Duration) *GetRepositoryPipelineKnownHostParams {
	var ()
	return &GetRepositoryPipelineKnownHostParams{

		timeout: timeout,
	}
}

// NewGetRepositoryPipelineKnownHostParamsWithContext creates a new GetRepositoryPipelineKnownHostParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepositoryPipelineKnownHostParamsWithContext(ctx context.Context) *GetRepositoryPipelineKnownHostParams {
	var ()
	return &GetRepositoryPipelineKnownHostParams{

		Context: ctx,
	}
}

// NewGetRepositoryPipelineKnownHostParamsWithHTTPClient creates a new GetRepositoryPipelineKnownHostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepositoryPipelineKnownHostParamsWithHTTPClient(client *http.Client) *GetRepositoryPipelineKnownHostParams {
	var ()
	return &GetRepositoryPipelineKnownHostParams{
		HTTPClient: client,
	}
}

/*GetRepositoryPipelineKnownHostParams contains all the parameters to send to the API endpoint
for the get repository pipeline known host operation typically these are written to a http.Request
*/
type GetRepositoryPipelineKnownHostParams struct {

	/*KnownHostUUID
	  The UUID of the known host to retrieve.

	*/
	KnownHostUUID string
	/*RepoSlug
	  The repository.

	*/
	RepoSlug string
	/*Username
	  The account.

	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) WithTimeout(timeout time.Duration) *GetRepositoryPipelineKnownHostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) WithContext(ctx context.Context) *GetRepositoryPipelineKnownHostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) WithHTTPClient(client *http.Client) *GetRepositoryPipelineKnownHostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKnownHostUUID adds the knownHostUUID to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) WithKnownHostUUID(knownHostUUID string) *GetRepositoryPipelineKnownHostParams {
	o.SetKnownHostUUID(knownHostUUID)
	return o
}

// SetKnownHostUUID adds the knownHostUuid to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) SetKnownHostUUID(knownHostUUID string) {
	o.KnownHostUUID = knownHostUUID
}

// WithRepoSlug adds the repoSlug to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) WithRepoSlug(repoSlug string) *GetRepositoryPipelineKnownHostParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithUsername adds the username to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) WithUsername(username string) *GetRepositoryPipelineKnownHostParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get repository pipeline known host params
func (o *GetRepositoryPipelineKnownHostParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoryPipelineKnownHostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param known_host_uuid
	if err := r.SetPathParam("known_host_uuid", o.KnownHostUUID); err != nil {
		return err
	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
