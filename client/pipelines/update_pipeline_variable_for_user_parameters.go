// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// NewUpdatePipelineVariableForUserParams creates a new UpdatePipelineVariableForUserParams object
// with the default values initialized.
func NewUpdatePipelineVariableForUserParams() *UpdatePipelineVariableForUserParams {
	var ()
	return &UpdatePipelineVariableForUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdatePipelineVariableForUserParamsWithTimeout creates a new UpdatePipelineVariableForUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdatePipelineVariableForUserParamsWithTimeout(timeout time.Duration) *UpdatePipelineVariableForUserParams {
	var ()
	return &UpdatePipelineVariableForUserParams{

		timeout: timeout,
	}
}

// NewUpdatePipelineVariableForUserParamsWithContext creates a new UpdatePipelineVariableForUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdatePipelineVariableForUserParamsWithContext(ctx context.Context) *UpdatePipelineVariableForUserParams {
	var ()
	return &UpdatePipelineVariableForUserParams{

		Context: ctx,
	}
}

// NewUpdatePipelineVariableForUserParamsWithHTTPClient creates a new UpdatePipelineVariableForUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdatePipelineVariableForUserParamsWithHTTPClient(client *http.Client) *UpdatePipelineVariableForUserParams {
	var ()
	return &UpdatePipelineVariableForUserParams{
		HTTPClient: client,
	}
}

/*UpdatePipelineVariableForUserParams contains all the parameters to send to the API endpoint
for the update pipeline variable for user operation typically these are written to a http.Request
*/
type UpdatePipelineVariableForUserParams struct {

	/*Body
	  The updated variable.

	*/
	Body *models.PipelineVariable
	/*SelectedUser
	  Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.

	*/
	SelectedUser string
	/*VariableUUID
	  The UUID of the variable.

	*/
	VariableUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) WithTimeout(timeout time.Duration) *UpdatePipelineVariableForUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) WithContext(ctx context.Context) *UpdatePipelineVariableForUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) WithHTTPClient(client *http.Client) *UpdatePipelineVariableForUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) WithBody(body *models.PipelineVariable) *UpdatePipelineVariableForUserParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) SetBody(body *models.PipelineVariable) {
	o.Body = body
}

// WithSelectedUser adds the selectedUser to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) WithSelectedUser(selectedUser string) *UpdatePipelineVariableForUserParams {
	o.SetSelectedUser(selectedUser)
	return o
}

// SetSelectedUser adds the selectedUser to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) SetSelectedUser(selectedUser string) {
	o.SelectedUser = selectedUser
}

// WithVariableUUID adds the variableUUID to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) WithVariableUUID(variableUUID string) *UpdatePipelineVariableForUserParams {
	o.SetVariableUUID(variableUUID)
	return o
}

// SetVariableUUID adds the variableUuid to the update pipeline variable for user params
func (o *UpdatePipelineVariableForUserParams) SetVariableUUID(variableUUID string) {
	o.VariableUUID = variableUUID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdatePipelineVariableForUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param selected_user
	if err := r.SetPathParam("selected_user", o.SelectedUser); err != nil {
		return err
	}

	// path param variable_uuid
	if err := r.SetPathParam("variable_uuid", o.VariableUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
