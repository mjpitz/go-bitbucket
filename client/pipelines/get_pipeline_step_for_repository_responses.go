// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetPipelineStepForRepositoryReader is a Reader for the GetPipelineStepForRepository structure.
type GetPipelineStepForRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPipelineStepForRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPipelineStepForRepositoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetPipelineStepForRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPipelineStepForRepositoryOK creates a GetPipelineStepForRepositoryOK with default headers values
func NewGetPipelineStepForRepositoryOK() *GetPipelineStepForRepositoryOK {
	return &GetPipelineStepForRepositoryOK{}
}

/*GetPipelineStepForRepositoryOK handles this case with default header values.

The step.
*/
type GetPipelineStepForRepositoryOK struct {
	Payload *models.PipelineStep
}

func (o *GetPipelineStepForRepositoryOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}][%d] getPipelineStepForRepositoryOK  %+v", 200, o.Payload)
}

func (o *GetPipelineStepForRepositoryOK) GetPayload() *models.PipelineStep {
	return o.Payload
}

func (o *GetPipelineStepForRepositoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PipelineStep)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPipelineStepForRepositoryNotFound creates a GetPipelineStepForRepositoryNotFound with default headers values
func NewGetPipelineStepForRepositoryNotFound() *GetPipelineStepForRepositoryNotFound {
	return &GetPipelineStepForRepositoryNotFound{}
}

/*GetPipelineStepForRepositoryNotFound handles this case with default header values.

No account, repository, pipeline or step with the UUID provided exists for the pipeline with the UUID provided.
*/
type GetPipelineStepForRepositoryNotFound struct {
	Payload *models.Error
}

func (o *GetPipelineStepForRepositoryNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}][%d] getPipelineStepForRepositoryNotFound  %+v", 404, o.Payload)
}

func (o *GetPipelineStepForRepositoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPipelineStepForRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
