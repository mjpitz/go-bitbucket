// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// CreateRepositoryPipelineKnownHostReader is a Reader for the CreateRepositoryPipelineKnownHost structure.
type CreateRepositoryPipelineKnownHostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRepositoryPipelineKnownHostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateRepositoryPipelineKnownHostCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewCreateRepositoryPipelineKnownHostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateRepositoryPipelineKnownHostConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateRepositoryPipelineKnownHostCreated creates a CreateRepositoryPipelineKnownHostCreated with default headers values
func NewCreateRepositoryPipelineKnownHostCreated() *CreateRepositoryPipelineKnownHostCreated {
	return &CreateRepositoryPipelineKnownHostCreated{}
}

/*CreateRepositoryPipelineKnownHostCreated handles this case with default header values.

The known host was created.
*/
type CreateRepositoryPipelineKnownHostCreated struct {
	/*The URL of the newly created pipeline known host.
	 */
	Location string

	Payload *models.PipelineKnownHost
}

func (o *CreateRepositoryPipelineKnownHostCreated) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/][%d] createRepositoryPipelineKnownHostCreated  %+v", 201, o.Payload)
}

func (o *CreateRepositoryPipelineKnownHostCreated) GetPayload() *models.PipelineKnownHost {
	return o.Payload
}

func (o *CreateRepositoryPipelineKnownHostCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.PipelineKnownHost)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRepositoryPipelineKnownHostNotFound creates a CreateRepositoryPipelineKnownHostNotFound with default headers values
func NewCreateRepositoryPipelineKnownHostNotFound() *CreateRepositoryPipelineKnownHostNotFound {
	return &CreateRepositoryPipelineKnownHostNotFound{}
}

/*CreateRepositoryPipelineKnownHostNotFound handles this case with default header values.

The account or repository does not exist.
*/
type CreateRepositoryPipelineKnownHostNotFound struct {
	Payload *models.Error
}

func (o *CreateRepositoryPipelineKnownHostNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/][%d] createRepositoryPipelineKnownHostNotFound  %+v", 404, o.Payload)
}

func (o *CreateRepositoryPipelineKnownHostNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRepositoryPipelineKnownHostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRepositoryPipelineKnownHostConflict creates a CreateRepositoryPipelineKnownHostConflict with default headers values
func NewCreateRepositoryPipelineKnownHostConflict() *CreateRepositoryPipelineKnownHostConflict {
	return &CreateRepositoryPipelineKnownHostConflict{}
}

/*CreateRepositoryPipelineKnownHostConflict handles this case with default header values.

A known host with the provided hostname already exists.
*/
type CreateRepositoryPipelineKnownHostConflict struct {
	Payload *models.Error
}

func (o *CreateRepositoryPipelineKnownHostConflict) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/][%d] createRepositoryPipelineKnownHostConflict  %+v", 409, o.Payload)
}

func (o *CreateRepositoryPipelineKnownHostConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRepositoryPipelineKnownHostConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
