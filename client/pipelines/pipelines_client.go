// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pipelines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pipelines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDeploymentVariable(params *CreateDeploymentVariableParams) (*CreateDeploymentVariableCreated, error)

	CreatePipelineForRepository(params *CreatePipelineForRepositoryParams) (*CreatePipelineForRepositoryCreated, error)

	CreatePipelineVariableForTeam(params *CreatePipelineVariableForTeamParams) (*CreatePipelineVariableForTeamCreated, error)

	CreatePipelineVariableForUser(params *CreatePipelineVariableForUserParams) (*CreatePipelineVariableForUserCreated, error)

	CreateRepositoryPipelineKnownHost(params *CreateRepositoryPipelineKnownHostParams) (*CreateRepositoryPipelineKnownHostCreated, error)

	CreateRepositoryPipelineSchedule(params *CreateRepositoryPipelineScheduleParams) (*CreateRepositoryPipelineScheduleCreated, error)

	CreateRepositoryPipelineVariable(params *CreateRepositoryPipelineVariableParams) (*CreateRepositoryPipelineVariableCreated, error)

	DeleteDeploymentVariable(params *DeleteDeploymentVariableParams) (*DeleteDeploymentVariableNoContent, error)

	DeletePipelineVariableForTeam(params *DeletePipelineVariableForTeamParams) (*DeletePipelineVariableForTeamNoContent, error)

	DeletePipelineVariableForUser(params *DeletePipelineVariableForUserParams) (*DeletePipelineVariableForUserNoContent, error)

	DeleteRepositoryPipelineKeyPair(params *DeleteRepositoryPipelineKeyPairParams) (*DeleteRepositoryPipelineKeyPairNoContent, error)

	DeleteRepositoryPipelineKnownHost(params *DeleteRepositoryPipelineKnownHostParams) (*DeleteRepositoryPipelineKnownHostNoContent, error)

	DeleteRepositoryPipelineSchedule(params *DeleteRepositoryPipelineScheduleParams) (*DeleteRepositoryPipelineScheduleNoContent, error)

	DeleteRepositoryPipelineVariable(params *DeleteRepositoryPipelineVariableParams) (*DeleteRepositoryPipelineVariableNoContent, error)

	GetDeploymentVariables(params *GetDeploymentVariablesParams) (*GetDeploymentVariablesOK, error)

	GetPipelineForRepository(params *GetPipelineForRepositoryParams) (*GetPipelineForRepositoryOK, error)

	GetPipelineStepForRepository(params *GetPipelineStepForRepositoryParams) (*GetPipelineStepForRepositoryOK, error)

	GetPipelineStepLogForRepository(params *GetPipelineStepLogForRepositoryParams) (*GetPipelineStepLogForRepositoryOK, error)

	GetPipelineStepsForRepository(params *GetPipelineStepsForRepositoryParams) (*GetPipelineStepsForRepositoryOK, error)

	GetPipelineVariableForTeam(params *GetPipelineVariableForTeamParams) (*GetPipelineVariableForTeamOK, error)

	GetPipelineVariableForUser(params *GetPipelineVariableForUserParams) (*GetPipelineVariableForUserOK, error)

	GetPipelineVariablesForTeam(params *GetPipelineVariablesForTeamParams) (*GetPipelineVariablesForTeamOK, error)

	GetPipelineVariablesForUser(params *GetPipelineVariablesForUserParams) (*GetPipelineVariablesForUserOK, error)

	GetPipelinesForRepository(params *GetPipelinesForRepositoryParams) (*GetPipelinesForRepositoryOK, error)

	GetRepositoryPipelineConfig(params *GetRepositoryPipelineConfigParams) (*GetRepositoryPipelineConfigOK, error)

	GetRepositoryPipelineKnownHost(params *GetRepositoryPipelineKnownHostParams) (*GetRepositoryPipelineKnownHostOK, error)

	GetRepositoryPipelineKnownHosts(params *GetRepositoryPipelineKnownHostsParams) (*GetRepositoryPipelineKnownHostsOK, error)

	GetRepositoryPipelineSchedule(params *GetRepositoryPipelineScheduleParams) (*GetRepositoryPipelineScheduleOK, error)

	GetRepositoryPipelineScheduleExecutions(params *GetRepositoryPipelineScheduleExecutionsParams) (*GetRepositoryPipelineScheduleExecutionsOK, error)

	GetRepositoryPipelineSchedules(params *GetRepositoryPipelineSchedulesParams) (*GetRepositoryPipelineSchedulesOK, error)

	GetRepositoryPipelineSSHKeyPair(params *GetRepositoryPipelineSSHKeyPairParams) (*GetRepositoryPipelineSSHKeyPairOK, error)

	GetRepositoryPipelineVariable(params *GetRepositoryPipelineVariableParams) (*GetRepositoryPipelineVariableOK, error)

	GetRepositoryPipelineVariables(params *GetRepositoryPipelineVariablesParams) (*GetRepositoryPipelineVariablesOK, error)

	StopPipeline(params *StopPipelineParams) (*StopPipelineNoContent, error)

	UpdateDeploymentVariable(params *UpdateDeploymentVariableParams) (*UpdateDeploymentVariableOK, error)

	UpdatePipelineVariableForTeam(params *UpdatePipelineVariableForTeamParams) (*UpdatePipelineVariableForTeamOK, error)

	UpdatePipelineVariableForUser(params *UpdatePipelineVariableForUserParams) (*UpdatePipelineVariableForUserOK, error)

	UpdateRepositoryBuildNumber(params *UpdateRepositoryBuildNumberParams) (*UpdateRepositoryBuildNumberOK, error)

	UpdateRepositoryPipelineConfig(params *UpdateRepositoryPipelineConfigParams) (*UpdateRepositoryPipelineConfigOK, error)

	UpdateRepositoryPipelineKeyPair(params *UpdateRepositoryPipelineKeyPairParams) (*UpdateRepositoryPipelineKeyPairOK, error)

	UpdateRepositoryPipelineKnownHost(params *UpdateRepositoryPipelineKnownHostParams) (*UpdateRepositoryPipelineKnownHostOK, error)

	UpdateRepositoryPipelineSchedule(params *UpdateRepositoryPipelineScheduleParams) (*UpdateRepositoryPipelineScheduleOK, error)

	UpdateRepositoryPipelineVariable(params *UpdateRepositoryPipelineVariableParams) (*UpdateRepositoryPipelineVariableOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateDeploymentVariable Create a deployment environment level variable.
*/
func (a *Client) CreateDeploymentVariable(params *CreateDeploymentVariableParams) (*CreateDeploymentVariableCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeploymentVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDeploymentVariable",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDeploymentVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeploymentVariableCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDeploymentVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePipelineForRepository Endpoint to create and initiate a pipeline.
There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated.
# Trigger a Pipeline for a branch
One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline.
The specified branch will be used to determine which pipeline definition from the `bitbucket-pipelines.yml` file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.

### Example

```
$ curl -X POST -is -u username:password \
  -H 'Content-Type: application/json' \
 https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \
  -d '
  {
    "target": {
      "ref_type": "branch",
      "type": "pipeline_ref_target",
      "ref_name": "master"
    }
  }'
```
# Trigger a Pipeline for a commit on a branch or tag
You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark).
The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.

The following reference types are supported:

* `branch`
* `named_branch`
* `bookmark`
 * `tag`

### Example

```
$ curl -X POST -is -u username:password \
  -H 'Content-Type: application/json' \
  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \
  -d '
  {
    "target": {
      "commit": {
        "type": "commit",
        "hash": "ce5b7431602f7cbba007062eeb55225c6e18e956"
      },
      "ref_type": "branch",
      "type": "pipeline_ref_target",
      "ref_name": "master"
    }
  }'
```
# Trigger a specific pipeline definition for a commit
You can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit.
In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.

### Example

```
$ curl -X POST -is -u username:password \
  -H 'Content-Type: application/json' \
 https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \
 -d '
  {
     "target": {
      "commit": {
         "hash":"a3c4e02c9a3755eccdc3764e6ea13facdf30f923",
         "type":"commit"
       },
        "selector": {
           "type":"custom",
              "pattern":"Deploy to production"
          },
        "type":"pipeline_commit_target"
   }
  }'
```
# Trigger a specific pipeline definition for a commit on a branch or tag
You can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit in the context of a specified reference.
In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.

### Example

```
$ curl -X POST -is -u username:password \
  -H 'Content-Type: application/json' \
 https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \
 -d '
  {
     "target": {
      "commit": {
         "hash":"a3c4e02c9a3755eccdc3764e6ea13facdf30f923",
         "type":"commit"
       },
       "selector": {
          "type": "custom",
          "pattern": "Deploy to production"
       },
       "type": "pipeline_ref_target",
       "ref_name": "master",
       "ref_type": "branch"
     }
  }'
```


# Trigger a custom pipeline with variables
In addition to triggering a custom pipeline that is defined in your `bitbucket-pipelines.yml` file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).

### Example

```
$ curl -X POST -is -u username:password \
  -H 'Content-Type: application/json' \
 https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \
 -d '
  {
    "target": {
      "type": "pipeline_ref_target",
      "ref_type": "branch",
      "ref_name": "master",
      "selector": {
        "type": "custom",
        "pattern": "Deploy to production"
      }
    },
    "variables": [
      {
        "key": "var1key",
        "value": "var1value",
        "secured": true
      },
      {
        "key": "var2key",
        "value": "var2value"
      }
    ]
  }'
```

# Trigger a pull request pipeline

You can also initiate a pipeline for a specific pull request.

### Example

```
$ curl -X POST -is -u username:password \
  -H 'Content-Type: application/json' \
 https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \
 -d '
  {
	"target": {
      "type": "pipeline_pullrequest_target",
	  "source": "pull-request-branch",
      "destination": "master",
      "destination_commit": {
      	 "hash" : "9f848b7"
      },
      "commit": {
      	"hash" : "1a372fc"
      },
      "pullrequest" : {
      	"id" : "3"
      },
	  "selector": {
        "type": "pull-requests",
        "pattern": "**"
      }
    }
  }'
```

*/
func (a *Client) CreatePipelineForRepository(params *CreatePipelineForRepositoryParams) (*CreatePipelineForRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePipelineForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPipelineForRepository",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePipelineForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePipelineForRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPipelineForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePipelineVariableForTeam Create an account level variable.
*/
func (a *Client) CreatePipelineVariableForTeam(params *CreatePipelineVariableForTeamParams) (*CreatePipelineVariableForTeamCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePipelineVariableForTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPipelineVariableForTeam",
		Method:             "POST",
		PathPattern:        "/teams/{username}/pipelines_config/variables/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePipelineVariableForTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePipelineVariableForTeamCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPipelineVariableForTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePipelineVariableForUser Create a user level variable.
*/
func (a *Client) CreatePipelineVariableForUser(params *CreatePipelineVariableForUserParams) (*CreatePipelineVariableForUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePipelineVariableForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPipelineVariableForUser",
		Method:             "POST",
		PathPattern:        "/users/{selected_user}/pipelines_config/variables/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePipelineVariableForUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePipelineVariableForUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPipelineVariableForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRepositoryPipelineKnownHost Create a repository level known host.
*/
func (a *Client) CreateRepositoryPipelineKnownHost(params *CreateRepositoryPipelineKnownHostParams) (*CreateRepositoryPipelineKnownHostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRepositoryPipelineKnownHostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRepositoryPipelineKnownHost",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRepositoryPipelineKnownHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRepositoryPipelineKnownHostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepositoryPipelineKnownHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRepositoryPipelineSchedule Create a schedule for the given repository.
*/
func (a *Client) CreateRepositoryPipelineSchedule(params *CreateRepositoryPipelineScheduleParams) (*CreateRepositoryPipelineScheduleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRepositoryPipelineScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRepositoryPipelineSchedule",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRepositoryPipelineScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRepositoryPipelineScheduleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepositoryPipelineSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRepositoryPipelineVariable Create a repository level variable.
*/
func (a *Client) CreateRepositoryPipelineVariable(params *CreateRepositoryPipelineVariableParams) (*CreateRepositoryPipelineVariableCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRepositoryPipelineVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRepositoryPipelineVariable",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/variables/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRepositoryPipelineVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRepositoryPipelineVariableCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRepositoryPipelineVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDeploymentVariable Delete a deployment environment level variable.
*/
func (a *Client) DeleteDeploymentVariable(params *DeleteDeploymentVariableParams) (*DeleteDeploymentVariableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeploymentVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeploymentVariable",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeploymentVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeploymentVariableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDeploymentVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePipelineVariableForTeam Delete a team level variable.
*/
func (a *Client) DeletePipelineVariableForTeam(params *DeletePipelineVariableForTeamParams) (*DeletePipelineVariableForTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePipelineVariableForTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePipelineVariableForTeam",
		Method:             "DELETE",
		PathPattern:        "/teams/{username}/pipelines_config/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePipelineVariableForTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePipelineVariableForTeamNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePipelineVariableForTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePipelineVariableForUser Delete an account level variable.
*/
func (a *Client) DeletePipelineVariableForUser(params *DeletePipelineVariableForUserParams) (*DeletePipelineVariableForUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePipelineVariableForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePipelineVariableForUser",
		Method:             "DELETE",
		PathPattern:        "/users/{selected_user}/pipelines_config/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePipelineVariableForUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePipelineVariableForUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePipelineVariableForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRepositoryPipelineKeyPair Delete the repository SSH key pair.
*/
func (a *Client) DeleteRepositoryPipelineKeyPair(params *DeleteRepositoryPipelineKeyPairParams) (*DeleteRepositoryPipelineKeyPairNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoryPipelineKeyPairParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRepositoryPipelineKeyPair",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoryPipelineKeyPairReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoryPipelineKeyPairNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRepositoryPipelineKeyPair: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRepositoryPipelineKnownHost Delete a repository level known host.
*/
func (a *Client) DeleteRepositoryPipelineKnownHost(params *DeleteRepositoryPipelineKnownHostParams) (*DeleteRepositoryPipelineKnownHostNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoryPipelineKnownHostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRepositoryPipelineKnownHost",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoryPipelineKnownHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoryPipelineKnownHostNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRepositoryPipelineKnownHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRepositoryPipelineSchedule Delete a schedule.
*/
func (a *Client) DeleteRepositoryPipelineSchedule(params *DeleteRepositoryPipelineScheduleParams) (*DeleteRepositoryPipelineScheduleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoryPipelineScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRepositoryPipelineSchedule",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoryPipelineScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoryPipelineScheduleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRepositoryPipelineSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRepositoryPipelineVariable Delete a repository level variable.
*/
func (a *Client) DeleteRepositoryPipelineVariable(params *DeleteRepositoryPipelineVariableParams) (*DeleteRepositoryPipelineVariableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoryPipelineVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRepositoryPipelineVariable",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoryPipelineVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoryPipelineVariableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRepositoryPipelineVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentVariables Find deployment environment level variables.
*/
func (a *Client) GetDeploymentVariables(params *GetDeploymentVariablesParams) (*GetDeploymentVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentVariablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentVariables",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentVariablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPipelineForRepository Retrieve a specified pipeline
*/
func (a *Client) GetPipelineForRepository(params *GetPipelineForRepositoryParams) (*GetPipelineForRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelineForRepository",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineForRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPipelineStepForRepository Retrieve a given step of a pipeline.
*/
func (a *Client) GetPipelineStepForRepository(params *GetPipelineStepForRepositoryParams) (*GetPipelineStepForRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineStepForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelineStepForRepository",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineStepForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineStepForRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineStepForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPipelineStepLogForRepository Retrieve the log file for a given step of a pipeline.

This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
*/
func (a *Client) GetPipelineStepLogForRepository(params *GetPipelineStepLogForRepositoryParams) (*GetPipelineStepLogForRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineStepLogForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelineStepLogForRepository",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/log",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineStepLogForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineStepLogForRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineStepLogForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPipelineStepsForRepository Find steps for the given pipeline.
*/
func (a *Client) GetPipelineStepsForRepository(params *GetPipelineStepsForRepositoryParams) (*GetPipelineStepsForRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineStepsForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelineStepsForRepository",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineStepsForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineStepsForRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineStepsForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPipelineVariableForTeam Retrieve a team level variable.
*/
func (a *Client) GetPipelineVariableForTeam(params *GetPipelineVariableForTeamParams) (*GetPipelineVariableForTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineVariableForTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelineVariableForTeam",
		Method:             "GET",
		PathPattern:        "/teams/{username}/pipelines_config/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineVariableForTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineVariableForTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineVariableForTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPipelineVariableForUser Retrieve a user level variable.
*/
func (a *Client) GetPipelineVariableForUser(params *GetPipelineVariableForUserParams) (*GetPipelineVariableForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineVariableForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelineVariableForUser",
		Method:             "GET",
		PathPattern:        "/users/{selected_user}/pipelines_config/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineVariableForUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineVariableForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineVariableForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPipelineVariablesForTeam Find account level variables.
*/
func (a *Client) GetPipelineVariablesForTeam(params *GetPipelineVariablesForTeamParams) (*GetPipelineVariablesForTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineVariablesForTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelineVariablesForTeam",
		Method:             "GET",
		PathPattern:        "/teams/{username}/pipelines_config/variables/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineVariablesForTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineVariablesForTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineVariablesForTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPipelineVariablesForUser Find user level variables.
*/
func (a *Client) GetPipelineVariablesForUser(params *GetPipelineVariablesForUserParams) (*GetPipelineVariablesForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineVariablesForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelineVariablesForUser",
		Method:             "GET",
		PathPattern:        "/users/{selected_user}/pipelines_config/variables/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineVariablesForUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineVariablesForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineVariablesForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPipelinesForRepository Find pipelines
*/
func (a *Client) GetPipelinesForRepository(params *GetPipelinesForRepositoryParams) (*GetPipelinesForRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelinesForRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelinesForRepository",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelinesForRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelinesForRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelinesForRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryPipelineConfig Retrieve the repository pipelines configuration.
*/
func (a *Client) GetRepositoryPipelineConfig(params *GetRepositoryPipelineConfigParams) (*GetRepositoryPipelineConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryPipelineConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryPipelineConfig",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryPipelineConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryPipelineConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryPipelineConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryPipelineKnownHost Retrieve a repository level known host.
*/
func (a *Client) GetRepositoryPipelineKnownHost(params *GetRepositoryPipelineKnownHostParams) (*GetRepositoryPipelineKnownHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryPipelineKnownHostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryPipelineKnownHost",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryPipelineKnownHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryPipelineKnownHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryPipelineKnownHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryPipelineKnownHosts Find repository level known hosts.
*/
func (a *Client) GetRepositoryPipelineKnownHosts(params *GetRepositoryPipelineKnownHostsParams) (*GetRepositoryPipelineKnownHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryPipelineKnownHostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryPipelineKnownHosts",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryPipelineKnownHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryPipelineKnownHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryPipelineKnownHosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryPipelineSchedule Retrieve a schedule by its UUID.
*/
func (a *Client) GetRepositoryPipelineSchedule(params *GetRepositoryPipelineScheduleParams) (*GetRepositoryPipelineScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryPipelineScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryPipelineSchedule",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryPipelineScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryPipelineScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryPipelineSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryPipelineScheduleExecutions Retrieve the executions of a given schedule.
*/
func (a *Client) GetRepositoryPipelineScheduleExecutions(params *GetRepositoryPipelineScheduleExecutionsParams) (*GetRepositoryPipelineScheduleExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryPipelineScheduleExecutionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryPipelineScheduleExecutions",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}/executions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryPipelineScheduleExecutionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryPipelineScheduleExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryPipelineScheduleExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryPipelineSchedules Retrieve the configured schedules for the given repository.
*/
func (a *Client) GetRepositoryPipelineSchedules(params *GetRepositoryPipelineSchedulesParams) (*GetRepositoryPipelineSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryPipelineSchedulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryPipelineSchedules",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryPipelineSchedulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryPipelineSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryPipelineSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryPipelineSSHKeyPair Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
*/
func (a *Client) GetRepositoryPipelineSSHKeyPair(params *GetRepositoryPipelineSSHKeyPairParams) (*GetRepositoryPipelineSSHKeyPairOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryPipelineSSHKeyPairParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryPipelineSshKeyPair",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryPipelineSSHKeyPairReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryPipelineSSHKeyPairOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryPipelineSshKeyPair: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryPipelineVariable Retrieve a repository level variable.
*/
func (a *Client) GetRepositoryPipelineVariable(params *GetRepositoryPipelineVariableParams) (*GetRepositoryPipelineVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryPipelineVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryPipelineVariable",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryPipelineVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryPipelineVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryPipelineVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryPipelineVariables Find repository level variables.
*/
func (a *Client) GetRepositoryPipelineVariables(params *GetRepositoryPipelineVariablesParams) (*GetRepositoryPipelineVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryPipelineVariablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryPipelineVariables",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/variables/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryPipelineVariablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryPipelineVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryPipelineVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopPipeline Signal the stop of a pipeline and all of its steps that not have completed yet.
*/
func (a *Client) StopPipeline(params *StopPipelineParams) (*StopPipelineNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPipelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopPipeline",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/stopPipeline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPipelineNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeploymentVariable Update a deployment environment level variable.
*/
func (a *Client) UpdateDeploymentVariable(params *UpdateDeploymentVariableParams) (*UpdateDeploymentVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeploymentVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeploymentVariable",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeploymentVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeploymentVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeploymentVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePipelineVariableForTeam Update a team level variable.
*/
func (a *Client) UpdatePipelineVariableForTeam(params *UpdatePipelineVariableForTeamParams) (*UpdatePipelineVariableForTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePipelineVariableForTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePipelineVariableForTeam",
		Method:             "PUT",
		PathPattern:        "/teams/{username}/pipelines_config/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePipelineVariableForTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePipelineVariableForTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePipelineVariableForTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePipelineVariableForUser Update a user level variable.
*/
func (a *Client) UpdatePipelineVariableForUser(params *UpdatePipelineVariableForUserParams) (*UpdatePipelineVariableForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePipelineVariableForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePipelineVariableForUser",
		Method:             "PUT",
		PathPattern:        "/users/{selected_user}/pipelines_config/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePipelineVariableForUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePipelineVariableForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePipelineVariableForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRepositoryBuildNumber Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
*/
func (a *Client) UpdateRepositoryBuildNumber(params *UpdateRepositoryBuildNumberParams) (*UpdateRepositoryBuildNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRepositoryBuildNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRepositoryBuildNumber",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/build_number",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRepositoryBuildNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRepositoryBuildNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepositoryBuildNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRepositoryPipelineConfig Update the pipelines configuration for a repository.
*/
func (a *Client) UpdateRepositoryPipelineConfig(params *UpdateRepositoryPipelineConfigParams) (*UpdateRepositoryPipelineConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRepositoryPipelineConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRepositoryPipelineConfig",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRepositoryPipelineConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRepositoryPipelineConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepositoryPipelineConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRepositoryPipelineKeyPair Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
*/
func (a *Client) UpdateRepositoryPipelineKeyPair(params *UpdateRepositoryPipelineKeyPairParams) (*UpdateRepositoryPipelineKeyPairOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRepositoryPipelineKeyPairParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRepositoryPipelineKeyPair",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRepositoryPipelineKeyPairReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRepositoryPipelineKeyPairOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepositoryPipelineKeyPair: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRepositoryPipelineKnownHost Update a repository level known host.
*/
func (a *Client) UpdateRepositoryPipelineKnownHost(params *UpdateRepositoryPipelineKnownHostParams) (*UpdateRepositoryPipelineKnownHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRepositoryPipelineKnownHostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRepositoryPipelineKnownHost",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRepositoryPipelineKnownHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRepositoryPipelineKnownHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepositoryPipelineKnownHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRepositoryPipelineSchedule Update a schedule.
*/
func (a *Client) UpdateRepositoryPipelineSchedule(params *UpdateRepositoryPipelineScheduleParams) (*UpdateRepositoryPipelineScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRepositoryPipelineScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRepositoryPipelineSchedule",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRepositoryPipelineScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRepositoryPipelineScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepositoryPipelineSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRepositoryPipelineVariable Update a repository level variable.
*/
func (a *Client) UpdateRepositoryPipelineVariable(params *UpdateRepositoryPipelineVariableParams) (*UpdateRepositoryPipelineVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRepositoryPipelineVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRepositoryPipelineVariable",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRepositoryPipelineVariableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRepositoryPipelineVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRepositoryPipelineVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
