// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// CreatePipelineVariableForUserReader is a Reader for the CreatePipelineVariableForUser structure.
type CreatePipelineVariableForUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePipelineVariableForUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreatePipelineVariableForUserCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewCreatePipelineVariableForUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreatePipelineVariableForUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreatePipelineVariableForUserCreated creates a CreatePipelineVariableForUserCreated with default headers values
func NewCreatePipelineVariableForUserCreated() *CreatePipelineVariableForUserCreated {
	return &CreatePipelineVariableForUserCreated{}
}

/*CreatePipelineVariableForUserCreated handles this case with default header values.

The created variable.
*/
type CreatePipelineVariableForUserCreated struct {
	/*The URL of the newly created pipeline variable.
	 */
	Location string

	Payload *models.PipelineVariable
}

func (o *CreatePipelineVariableForUserCreated) Error() string {
	return fmt.Sprintf("[POST /users/{selected_user}/pipelines_config/variables/][%d] createPipelineVariableForUserCreated  %+v", 201, o.Payload)
}

func (o *CreatePipelineVariableForUserCreated) GetPayload() *models.PipelineVariable {
	return o.Payload
}

func (o *CreatePipelineVariableForUserCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.PipelineVariable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePipelineVariableForUserNotFound creates a CreatePipelineVariableForUserNotFound with default headers values
func NewCreatePipelineVariableForUserNotFound() *CreatePipelineVariableForUserNotFound {
	return &CreatePipelineVariableForUserNotFound{}
}

/*CreatePipelineVariableForUserNotFound handles this case with default header values.

The account does not exist.
*/
type CreatePipelineVariableForUserNotFound struct {
	Payload *models.Error
}

func (o *CreatePipelineVariableForUserNotFound) Error() string {
	return fmt.Sprintf("[POST /users/{selected_user}/pipelines_config/variables/][%d] createPipelineVariableForUserNotFound  %+v", 404, o.Payload)
}

func (o *CreatePipelineVariableForUserNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreatePipelineVariableForUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePipelineVariableForUserConflict creates a CreatePipelineVariableForUserConflict with default headers values
func NewCreatePipelineVariableForUserConflict() *CreatePipelineVariableForUserConflict {
	return &CreatePipelineVariableForUserConflict{}
}

/*CreatePipelineVariableForUserConflict handles this case with default header values.

A variable with the provided key already exists.
*/
type CreatePipelineVariableForUserConflict struct {
	Payload *models.Error
}

func (o *CreatePipelineVariableForUserConflict) Error() string {
	return fmt.Sprintf("[POST /users/{selected_user}/pipelines_config/variables/][%d] createPipelineVariableForUserConflict  %+v", 409, o.Payload)
}

func (o *CreatePipelineVariableForUserConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreatePipelineVariableForUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
