// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// UpdateRepositoryPipelineScheduleReader is a Reader for the UpdateRepositoryPipelineSchedule structure.
type UpdateRepositoryPipelineScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRepositoryPipelineScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRepositoryPipelineScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateRepositoryPipelineScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRepositoryPipelineScheduleOK creates a UpdateRepositoryPipelineScheduleOK with default headers values
func NewUpdateRepositoryPipelineScheduleOK() *UpdateRepositoryPipelineScheduleOK {
	return &UpdateRepositoryPipelineScheduleOK{}
}

/*UpdateRepositoryPipelineScheduleOK handles this case with default header values.

The schedule is updated.
*/
type UpdateRepositoryPipelineScheduleOK struct {
	Payload *models.PipelineSchedule
}

func (o *UpdateRepositoryPipelineScheduleOK) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}][%d] updateRepositoryPipelineScheduleOK  %+v", 200, o.Payload)
}

func (o *UpdateRepositoryPipelineScheduleOK) GetPayload() *models.PipelineSchedule {
	return o.Payload
}

func (o *UpdateRepositoryPipelineScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PipelineSchedule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRepositoryPipelineScheduleNotFound creates a UpdateRepositoryPipelineScheduleNotFound with default headers values
func NewUpdateRepositoryPipelineScheduleNotFound() *UpdateRepositoryPipelineScheduleNotFound {
	return &UpdateRepositoryPipelineScheduleNotFound{}
}

/*UpdateRepositoryPipelineScheduleNotFound handles this case with default header values.

The account, repository or schedule was not found.
*/
type UpdateRepositoryPipelineScheduleNotFound struct {
	Payload *models.Error
}

func (o *UpdateRepositoryPipelineScheduleNotFound) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}][%d] updateRepositoryPipelineScheduleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRepositoryPipelineScheduleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRepositoryPipelineScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
