// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// NewCreateDeploymentVariableParams creates a new CreateDeploymentVariableParams object
// with the default values initialized.
func NewCreateDeploymentVariableParams() *CreateDeploymentVariableParams {
	var ()
	return &CreateDeploymentVariableParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateDeploymentVariableParamsWithTimeout creates a new CreateDeploymentVariableParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateDeploymentVariableParamsWithTimeout(timeout time.Duration) *CreateDeploymentVariableParams {
	var ()
	return &CreateDeploymentVariableParams{

		timeout: timeout,
	}
}

// NewCreateDeploymentVariableParamsWithContext creates a new CreateDeploymentVariableParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateDeploymentVariableParamsWithContext(ctx context.Context) *CreateDeploymentVariableParams {
	var ()
	return &CreateDeploymentVariableParams{

		Context: ctx,
	}
}

// NewCreateDeploymentVariableParamsWithHTTPClient creates a new CreateDeploymentVariableParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateDeploymentVariableParamsWithHTTPClient(client *http.Client) *CreateDeploymentVariableParams {
	var ()
	return &CreateDeploymentVariableParams{
		HTTPClient: client,
	}
}

/*CreateDeploymentVariableParams contains all the parameters to send to the API endpoint
for the create deployment variable operation typically these are written to a http.Request
*/
type CreateDeploymentVariableParams struct {

	/*Body
	  The variable to create

	*/
	Body *models.DeploymentVariable
	/*EnvironmentUUID
	  The environment.

	*/
	EnvironmentUUID string
	/*RepoSlug
	  The repository.

	*/
	RepoSlug string
	/*Username
	  The account.

	*/
	Username string
	/*VariableUUID
	  The UUID of the variable to update.

	*/
	VariableUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create deployment variable params
func (o *CreateDeploymentVariableParams) WithTimeout(timeout time.Duration) *CreateDeploymentVariableParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create deployment variable params
func (o *CreateDeploymentVariableParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create deployment variable params
func (o *CreateDeploymentVariableParams) WithContext(ctx context.Context) *CreateDeploymentVariableParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create deployment variable params
func (o *CreateDeploymentVariableParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create deployment variable params
func (o *CreateDeploymentVariableParams) WithHTTPClient(client *http.Client) *CreateDeploymentVariableParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create deployment variable params
func (o *CreateDeploymentVariableParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the create deployment variable params
func (o *CreateDeploymentVariableParams) WithBody(body *models.DeploymentVariable) *CreateDeploymentVariableParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create deployment variable params
func (o *CreateDeploymentVariableParams) SetBody(body *models.DeploymentVariable) {
	o.Body = body
}

// WithEnvironmentUUID adds the environmentUUID to the create deployment variable params
func (o *CreateDeploymentVariableParams) WithEnvironmentUUID(environmentUUID string) *CreateDeploymentVariableParams {
	o.SetEnvironmentUUID(environmentUUID)
	return o
}

// SetEnvironmentUUID adds the environmentUuid to the create deployment variable params
func (o *CreateDeploymentVariableParams) SetEnvironmentUUID(environmentUUID string) {
	o.EnvironmentUUID = environmentUUID
}

// WithRepoSlug adds the repoSlug to the create deployment variable params
func (o *CreateDeploymentVariableParams) WithRepoSlug(repoSlug string) *CreateDeploymentVariableParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the create deployment variable params
func (o *CreateDeploymentVariableParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithUsername adds the username to the create deployment variable params
func (o *CreateDeploymentVariableParams) WithUsername(username string) *CreateDeploymentVariableParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the create deployment variable params
func (o *CreateDeploymentVariableParams) SetUsername(username string) {
	o.Username = username
}

// WithVariableUUID adds the variableUUID to the create deployment variable params
func (o *CreateDeploymentVariableParams) WithVariableUUID(variableUUID string) *CreateDeploymentVariableParams {
	o.SetVariableUUID(variableUUID)
	return o
}

// SetVariableUUID adds the variableUuid to the create deployment variable params
func (o *CreateDeploymentVariableParams) SetVariableUUID(variableUUID string) {
	o.VariableUUID = variableUUID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateDeploymentVariableParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param environment_uuid
	if err := r.SetPathParam("environment_uuid", o.EnvironmentUUID); err != nil {
		return err
	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	// path param variable_uuid
	if err := r.SetPathParam("variable_uuid", o.VariableUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
