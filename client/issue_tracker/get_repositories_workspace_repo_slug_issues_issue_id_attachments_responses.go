// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsReader is a Reader for the GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachments structure.
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK handles this case with default header values.

A paginated list of all attachments for this issue.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK struct {
	Payload *models.PaginatedIssueAttachments
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK) GetPayload() *models.PaginatedIssueAttachments {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedIssueAttachments)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized handles this case with default header values.

If the issue tracker is private and the request was not authenticated.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized struct {
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsUnauthorized ", 401)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound handles this case with default header values.

The specified repository or issue does not exist or does not have the issue tracker enabled.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
