// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteReader is a Reader for the GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVote structure.
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent handles this case with default header values.

If the authenticated user has not voted for this issue.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteNoContent  %+v", 204, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized handles this case with default header values.

When the request wasn't authenticated.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound handles this case with default header values.

If the authenticated user has not voted for this issue, or when the repo does not exist, or does not have an issue tracker.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
