// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutRepositoriesWorkspaceRepoSlugIssuesIssueIDReader is a Reader for the PutRepositoriesWorkspaceRepoSlugIssuesIssueID structure.
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK creates a PutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK with default headers values
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK() *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK {
	return &PutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK{}
}

/*PutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK handles this case with default header values.

The updated issue object.
*/
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK struct {
	Payload *models.Issue
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/issues/{issue_id}][%d] putRepositoriesWorkspaceRepoSlugIssuesIssueIdOK  %+v", 200, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK) GetPayload() *models.Issue {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Issue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden creates a PutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden with default headers values
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden() *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden {
	return &PutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden{}
}

/*PutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden handles this case with default header values.

When the authenticated user isn't authorized to access the issue.
*/
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/issues/{issue_id}][%d] putRepositoriesWorkspaceRepoSlugIssuesIssueIdForbidden  %+v", 403, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound creates a PutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound with default headers values
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound() *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound {
	return &PutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound{}
}

/*PutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound handles this case with default header values.

The specified repository or issue does not exist or does not have the issue tracker enabled.
*/
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/issues/{issue_id}][%d] putRepositoriesWorkspaceRepoSlugIssuesIssueIdNotFound  %+v", 404, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
