// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIDReader is a Reader for the GetRepositoriesWorkspaceRepoSlugIssuesIssueID structure.
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK handles this case with default header values.

The issue object.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK struct {
	Payload *models.Issue
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK) GetPayload() *models.Issue {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Issue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden handles this case with default header values.

When the authenticated user isn't authorized to access the issue.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdForbidden  %+v", 403, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound handles this case with default header values.

The specified repository or issue does not exist or does not have the issue tracker enabled.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone handles this case with default header values.

The specified issue is unavailable.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdGone  %+v", 410, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
