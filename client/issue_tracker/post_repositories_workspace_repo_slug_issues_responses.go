// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostRepositoriesWorkspaceRepoSlugIssuesReader is a Reader for the PostRepositoriesWorkspaceRepoSlugIssues structure.
type PostRepositoriesWorkspaceRepoSlugIssuesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesWorkspaceRepoSlugIssuesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesCreated creates a PostRepositoriesWorkspaceRepoSlugIssuesCreated with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesCreated() *PostRepositoriesWorkspaceRepoSlugIssuesCreated {
	return &PostRepositoriesWorkspaceRepoSlugIssuesCreated{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesCreated handles this case with default header values.

The newly created issue.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesCreated struct {
	/*The (absolute) URL of the newly created issue.
	 */
	Location string

	Payload *models.Issue
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesCreated) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues][%d] postRepositoriesWorkspaceRepoSlugIssuesCreated  %+v", 201, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesCreated) GetPayload() *models.Issue {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.Issue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesUnauthorized creates a PostRepositoriesWorkspaceRepoSlugIssuesUnauthorized with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesUnauthorized() *PostRepositoriesWorkspaceRepoSlugIssuesUnauthorized {
	return &PostRepositoriesWorkspaceRepoSlugIssuesUnauthorized{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesUnauthorized handles this case with default header values.

When the request wasn't authenticated.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesUnauthorized struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues][%d] postRepositoriesWorkspaceRepoSlugIssuesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesForbidden creates a PostRepositoriesWorkspaceRepoSlugIssuesForbidden with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesForbidden() *PostRepositoriesWorkspaceRepoSlugIssuesForbidden {
	return &PostRepositoriesWorkspaceRepoSlugIssuesForbidden{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesForbidden handles this case with default header values.

When the authenticated user isn't authorized to create the issue.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesForbidden struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesForbidden) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues][%d] postRepositoriesWorkspaceRepoSlugIssuesForbidden  %+v", 403, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesNotFound creates a PostRepositoriesWorkspaceRepoSlugIssuesNotFound with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesNotFound() *PostRepositoriesWorkspaceRepoSlugIssuesNotFound {
	return &PostRepositoriesWorkspaceRepoSlugIssuesNotFound{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesNotFound handles this case with default header values.

The specified repository does not exist or does not have the issue tracker enabled.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesNotFound struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues][%d] postRepositoriesWorkspaceRepoSlugIssuesNotFound  %+v", 404, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
