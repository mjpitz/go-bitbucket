// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesReader is a Reader for the GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChanges structure.
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK handles this case with default header values.

Returns all the issue changes that were made on the specified issue.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK struct {
	Payload *models.PaginatedLogEntries
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK) GetPayload() *models.PaginatedLogEntries {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedLogEntries)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound creates a GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound {
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound handles this case with default header values.

The specified repository or issue does not exist or does not have the issue tracker enabled.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes][%d] getRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
