// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteReader is a Reader for the PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVote structure.
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent creates a PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent with default headers values
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent() *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent {
	return &PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent{}
}

/*PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent handles this case with default header values.

Indicating the authenticated user has cast their vote successfully.
*/
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote][%d] putRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteNoContent  %+v", 204, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized creates a PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized with default headers values
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized() *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized {
	return &PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized{}
}

/*PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized handles this case with default header values.

When the request wasn't authenticated.
*/
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote][%d] putRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound creates a PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound with default headers values
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound() *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound {
	return &PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound{}
}

/*PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound handles this case with default header values.

The specified repository or issue does not exist or does not have the issue tracker enabled.
*/
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote][%d] putRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteNotFound  %+v", 404, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
