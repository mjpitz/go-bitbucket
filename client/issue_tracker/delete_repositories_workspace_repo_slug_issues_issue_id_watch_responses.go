// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchReader is a Reader for the DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatch structure.
type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent creates a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent() *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent {
	return &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent{}
}

/*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent handles this case with default header values.

Indicates that the authenticated user successfully stopped watching this issue.
*/
type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent struct {
	Payload *models.Error
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/issues/{issue_id}/watch][%d] deleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchNoContent  %+v", 204, o.Payload)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized creates a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized() *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized {
	return &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized{}
}

/*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized handles this case with default header values.

When the request wasn't authenticated.
*/
type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/issues/{issue_id}/watch][%d] deleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound creates a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound() *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound {
	return &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound{}
}

/*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound handles this case with default header values.

The specified repository or issue does not exist or does not have the issue tracker enabled.
*/
type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound struct {
	Payload *models.Error
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/issues/{issue_id}/watch][%d] deleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDWatchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
