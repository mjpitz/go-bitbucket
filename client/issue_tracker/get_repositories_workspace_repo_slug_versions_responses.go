// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugVersionsReader is a Reader for the GetRepositoriesWorkspaceRepoSlugVersions structure.
type GetRepositoriesWorkspaceRepoSlugVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugVersionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugVersionsOK creates a GetRepositoriesWorkspaceRepoSlugVersionsOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugVersionsOK() *GetRepositoriesWorkspaceRepoSlugVersionsOK {
	return &GetRepositoriesWorkspaceRepoSlugVersionsOK{}
}

/*GetRepositoriesWorkspaceRepoSlugVersionsOK handles this case with default header values.

The versions that have been defined in the issue tracker.
*/
type GetRepositoriesWorkspaceRepoSlugVersionsOK struct {
	Payload *models.PaginatedVersions
}

func (o *GetRepositoriesWorkspaceRepoSlugVersionsOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/versions][%d] getRepositoriesWorkspaceRepoSlugVersionsOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugVersionsOK) GetPayload() *models.PaginatedVersions {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedVersions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugVersionsNotFound creates a GetRepositoriesWorkspaceRepoSlugVersionsNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugVersionsNotFound() *GetRepositoriesWorkspaceRepoSlugVersionsNotFound {
	return &GetRepositoriesWorkspaceRepoSlugVersionsNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugVersionsNotFound handles this case with default header values.

The specified repository does not exist or does not have the issue tracker enabled.
*/
type GetRepositoriesWorkspaceRepoSlugVersionsNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugVersionsNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/versions][%d] getRepositoriesWorkspaceRepoSlugVersionsNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugVersionsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugVersionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
