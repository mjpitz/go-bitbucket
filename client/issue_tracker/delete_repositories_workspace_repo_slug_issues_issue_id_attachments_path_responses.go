// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathReader is a Reader for the DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPath structure.
type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNoContent creates a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNoContent with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNoContent() *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNoContent {
	return &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNoContent{}
}

/*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNoContent handles this case with default header values.

Indicates that the deletion was successful
*/
type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNoContent struct {
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments/{path}][%d] deleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathNoContent ", 204)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathUnauthorized creates a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathUnauthorized with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathUnauthorized() *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathUnauthorized {
	return &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathUnauthorized{}
}

/*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathUnauthorized handles this case with default header values.

If the issue tracker is private and the request was not authenticated.
*/
type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathUnauthorized struct {
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments/{path}][%d] deleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathUnauthorized ", 401)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound creates a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound with default headers values
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound() *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound {
	return &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound{}
}

/*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound handles this case with default header values.

The specified repository or issue does not exist or does not have the issue tracker enabled.
*/
type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound struct {
	Payload *models.Error
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments/{path}][%d] deleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsPathNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
