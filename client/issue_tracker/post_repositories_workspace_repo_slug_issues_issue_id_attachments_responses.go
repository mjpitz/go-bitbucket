// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsReader is a Reader for the PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachments structure.
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsCreated creates a PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsCreated with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsCreated() *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsCreated {
	return &PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsCreated{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsCreated handles this case with default header values.

An empty response document.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsCreated struct {
	/*The URL to the issue's collection of attachments.
	 */
	Location string
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsCreated) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments][%d] postRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsCreated ", 201)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsBadRequest creates a PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsBadRequest with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsBadRequest() *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsBadRequest {
	return &PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsBadRequest{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsBadRequest handles this case with default header values.

If no files were uploaded, or if the wrong `Content-Type` was used.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsBadRequest struct {
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsBadRequest) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments][%d] postRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsBadRequest ", 400)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized creates a PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized() *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized {
	return &PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized handles this case with default header values.

If the issue tracker is private and the request was not authenticated.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized struct {
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments][%d] postRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsUnauthorized ", 401)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound creates a PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound() *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound {
	return &PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound handles this case with default header values.

The specified repository or issue does not exist or does not have the issue tracker enabled.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments][%d] postRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsNotFound  %+v", 404, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDAttachmentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
