// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDReader is a Reader for the PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentID structure.
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK creates a PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK with default headers values
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK() *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK {
	return &PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK{}
}

/*PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK handles this case with default header values.

The updated issue comment.
*/
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK struct {
	Payload *models.IssueComment
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments/{comment_id}][%d] putRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdOK  %+v", 200, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK) GetPayload() *models.IssueComment {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IssueComment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest creates a PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest with default headers values
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest() *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest {
	return &PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest{}
}

/*PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest handles this case with default header values.

If the input was invalid, or if the update to the comment is detected as spam
*/
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments/{comment_id}][%d] putRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCommentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
