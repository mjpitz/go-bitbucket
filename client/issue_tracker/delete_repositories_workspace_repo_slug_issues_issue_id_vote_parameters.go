// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams creates a new DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams object
// with the default values initialized.
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams() *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams {
	var ()
	return &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParamsWithTimeout creates a new DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParamsWithTimeout(timeout time.Duration) *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams {
	var ()
	return &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams{

		timeout: timeout,
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParamsWithContext creates a new DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParamsWithContext(ctx context.Context) *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams {
	var ()
	return &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams{

		Context: ctx,
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParamsWithHTTPClient creates a new DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParamsWithHTTPClient(client *http.Client) *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams {
	var ()
	return &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams{
		HTTPClient: client,
	}
}

/*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams contains all the parameters to send to the API endpoint
for the delete repositories workspace repo slug issues issue ID vote operation typically these are written to a http.Request
*/
type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams struct {

	/*IssueID
	  The issue id

	*/
	IssueID string
	/*RepoSlug
	  This can either be the repository slug or the UUID of the repository,
	surrounded by curly-braces, for example: `{repository UUID}`.


	*/
	RepoSlug string
	/*Workspace
	  This can either be the workspace ID (slug) or the workspace UUID
	surrounded by curly-braces, for example: `{workspace UUID}`.


	*/
	Workspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) WithTimeout(timeout time.Duration) *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) WithContext(ctx context.Context) *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) WithHTTPClient(client *http.Client) *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIssueID adds the issueID to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) WithIssueID(issueID string) *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams {
	o.SetIssueID(issueID)
	return o
}

// SetIssueID adds the issueId to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) SetIssueID(issueID string) {
	o.IssueID = issueID
}

// WithRepoSlug adds the repoSlug to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) WithRepoSlug(repoSlug string) *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithWorkspace adds the workspace to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) WithWorkspace(workspace string) *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams {
	o.SetWorkspace(workspace)
	return o
}

// SetWorkspace adds the workspace to the delete repositories workspace repo slug issues issue ID vote params
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) SetWorkspace(workspace string) {
	o.Workspace = workspace
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIDVoteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param issue_id
	if err := r.SetPathParam("issue_id", o.IssueID); err != nil {
		return err
	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	// path param workspace
	if err := r.SetPathParam("workspace", o.Workspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
