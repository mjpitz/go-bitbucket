// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesReader is a Reader for the PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChanges structure.
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated creates a PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated() *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated {
	return &PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated handles this case with default header values.

The newly created issue change.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated struct {
	/*The (absolute) URL of the newly created issue change.
	 */
	Location string

	Payload *models.IssueChange
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes][%d] postRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesCreated  %+v", 201, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated) GetPayload() *models.IssueChange {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.IssueChange)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized creates a PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized() *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized {
	return &PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized handles this case with default header values.

When the request wasn't authenticated.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes][%d] postRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden creates a PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden() *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden {
	return &PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden handles this case with default header values.

When the authenticated user isn't authorized to modify the issue.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes][%d] postRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesForbidden  %+v", 403, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound creates a PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound() *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound {
	return &PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound handles this case with default header values.

The specified repository or issue does not exist or does not have the issue tracker enabled.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes][%d] postRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesNotFound  %+v", 404, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDChangesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
