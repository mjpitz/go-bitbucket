// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugIssuesReader is a Reader for the GetRepositoriesWorkspaceRepoSlugIssues structure.
type GetRepositoriesWorkspaceRepoSlugIssuesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugIssuesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesOK creates a GetRepositoriesWorkspaceRepoSlugIssuesOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesOK() *GetRepositoriesWorkspaceRepoSlugIssuesOK {
	return &GetRepositoriesWorkspaceRepoSlugIssuesOK{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesOK handles this case with default header values.

A paginated list of the issues matching any filter criteria that were provided.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesOK struct {
	Payload *models.PaginatedIssues
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues][%d] getRepositoriesWorkspaceRepoSlugIssuesOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesOK) GetPayload() *models.PaginatedIssues {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedIssues)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesNotFound creates a GetRepositoriesWorkspaceRepoSlugIssuesNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesNotFound() *GetRepositoriesWorkspaceRepoSlugIssuesNotFound {
	return &GetRepositoriesWorkspaceRepoSlugIssuesNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesNotFound handles this case with default header values.

The specified repository does not exist or does not have the issue tracker enabled.
*/
type GetRepositoriesWorkspaceRepoSlugIssuesNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues][%d] getRepositoriesWorkspaceRepoSlugIssuesNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
