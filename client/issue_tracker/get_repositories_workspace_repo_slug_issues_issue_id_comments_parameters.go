// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams creates a new GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams object
// with the default values initialized.
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams() *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParamsWithTimeout creates a new GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParamsWithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams{

		timeout: timeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParamsWithContext creates a new GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParamsWithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams{

		Context: ctx,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParamsWithHTTPClient creates a new GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParamsWithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams{
		HTTPClient: client,
	}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams contains all the parameters to send to the API endpoint
for the get repositories workspace repo slug issues issue ID comments operation typically these are written to a http.Request
*/
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams struct {

	/*IssueID*/
	IssueID string
	/*Q

	Query string to narrow down the response as per
	[filtering and sorting](../../../../../../meta/filtering).

	*/
	Q *string
	/*RepoSlug
	  This can either be the repository slug or the UUID of the repository,
	surrounded by curly-braces, for example: `{repository UUID}`.


	*/
	RepoSlug string
	/*Username
	  This can either be the username or the UUID of the user,
	surrounded by curly-braces, for example: `{user UUID}`.


	*/
	Username string
	/*Workspace
	  This can either be the workspace ID (slug) or the workspace UUID
	surrounded by curly-braces, for example: `{workspace UUID}`.


	*/
	Workspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) WithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) WithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) WithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIssueID adds the issueID to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) WithIssueID(issueID string) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	o.SetIssueID(issueID)
	return o
}

// SetIssueID adds the issueId to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) SetIssueID(issueID string) {
	o.IssueID = issueID
}

// WithQ adds the q to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) WithQ(q *string) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) SetQ(q *string) {
	o.Q = q
}

// WithRepoSlug adds the repoSlug to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) WithRepoSlug(repoSlug string) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithUsername adds the username to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) WithUsername(username string) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) SetUsername(username string) {
	o.Username = username
}

// WithWorkspace adds the workspace to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) WithWorkspace(workspace string) *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams {
	o.SetWorkspace(workspace)
	return o
}

// SetWorkspace adds the workspace to the get repositories workspace repo slug issues issue ID comments params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) SetWorkspace(workspace string) {
	o.Workspace = workspace
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param issue_id
	if err := r.SetPathParam("issue_id", o.IssueID); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	// path param workspace
	if err := r.SetPathParam("workspace", o.Workspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
