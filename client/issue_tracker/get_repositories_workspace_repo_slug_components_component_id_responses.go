// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugComponentsComponentIDReader is a Reader for the GetRepositoriesWorkspaceRepoSlugComponentsComponentID structure.
type GetRepositoriesWorkspaceRepoSlugComponentsComponentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugComponentsComponentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK creates a GetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK() *GetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK {
	return &GetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK{}
}

/*GetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK handles this case with default header values.

The specified component object.
*/
type GetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK struct {
	Payload *models.Component
}

func (o *GetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/components/{component_id}][%d] getRepositoriesWorkspaceRepoSlugComponentsComponentIdOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK) GetPayload() *models.Component {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugComponentsComponentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Component)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound creates a GetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound() *GetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound {
	return &GetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound handles this case with default header values.

The specified repository or component does not exist or does not have the issue tracker enabled.
*/
type GetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/components/{component_id}][%d] getRepositoriesWorkspaceRepoSlugComponentsComponentIdNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugComponentsComponentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
