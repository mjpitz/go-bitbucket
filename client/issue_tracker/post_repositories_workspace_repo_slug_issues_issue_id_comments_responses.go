// Code generated by go-swagger; DO NOT EDIT.

package issue_tracker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsReader is a Reader for the PostRepositoriesWorkspaceRepoSlugIssuesIssueIDComments structure.
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCreated creates a PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCreated with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCreated() *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCreated {
	return &PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCreated{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCreated handles this case with default header values.

The newly created comment.
*/
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCreated struct {
	/*The location of the newly issue comment.
	 */
	Location string
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCreated) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments][%d] postRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCreated ", 201)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest creates a PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest() *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest {
	return &PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest handles this case with default header values.

If the input was invalid, or if the comment being created is detected as spam
*/
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments][%d] postRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsBadRequest  %+v", 400, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesIssueIDCommentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
