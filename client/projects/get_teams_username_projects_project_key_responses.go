// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetTeamsUsernameProjectsProjectKeyReader is a Reader for the GetTeamsUsernameProjectsProjectKey structure.
type GetTeamsUsernameProjectsProjectKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTeamsUsernameProjectsProjectKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTeamsUsernameProjectsProjectKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetTeamsUsernameProjectsProjectKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTeamsUsernameProjectsProjectKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTeamsUsernameProjectsProjectKeyOK creates a GetTeamsUsernameProjectsProjectKeyOK with default headers values
func NewGetTeamsUsernameProjectsProjectKeyOK() *GetTeamsUsernameProjectsProjectKeyOK {
	return &GetTeamsUsernameProjectsProjectKeyOK{}
}

/*GetTeamsUsernameProjectsProjectKeyOK handles this case with default header values.

The project object.
*/
type GetTeamsUsernameProjectsProjectKeyOK struct {
	Payload *models.Project
}

func (o *GetTeamsUsernameProjectsProjectKeyOK) Error() string {
	return fmt.Sprintf("[GET /teams/{username}/projects/{project_key}][%d] getTeamsUsernameProjectsProjectKeyOK  %+v", 200, o.Payload)
}

func (o *GetTeamsUsernameProjectsProjectKeyOK) GetPayload() *models.Project {
	return o.Payload
}

func (o *GetTeamsUsernameProjectsProjectKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsUsernameProjectsProjectKeyForbidden creates a GetTeamsUsernameProjectsProjectKeyForbidden with default headers values
func NewGetTeamsUsernameProjectsProjectKeyForbidden() *GetTeamsUsernameProjectsProjectKeyForbidden {
	return &GetTeamsUsernameProjectsProjectKeyForbidden{}
}

/*GetTeamsUsernameProjectsProjectKeyForbidden handles this case with default header values.

The requesting user isn't authorized to access the project.
*/
type GetTeamsUsernameProjectsProjectKeyForbidden struct {
	Payload *models.Error
}

func (o *GetTeamsUsernameProjectsProjectKeyForbidden) Error() string {
	return fmt.Sprintf("[GET /teams/{username}/projects/{project_key}][%d] getTeamsUsernameProjectsProjectKeyForbidden  %+v", 403, o.Payload)
}

func (o *GetTeamsUsernameProjectsProjectKeyForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTeamsUsernameProjectsProjectKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsUsernameProjectsProjectKeyNotFound creates a GetTeamsUsernameProjectsProjectKeyNotFound with default headers values
func NewGetTeamsUsernameProjectsProjectKeyNotFound() *GetTeamsUsernameProjectsProjectKeyNotFound {
	return &GetTeamsUsernameProjectsProjectKeyNotFound{}
}

/*GetTeamsUsernameProjectsProjectKeyNotFound handles this case with default header values.

A project isn't hosted at this location.
*/
type GetTeamsUsernameProjectsProjectKeyNotFound struct {
	Payload *models.Error
}

func (o *GetTeamsUsernameProjectsProjectKeyNotFound) Error() string {
	return fmt.Sprintf("[GET /teams/{username}/projects/{project_key}][%d] getTeamsUsernameProjectsProjectKeyNotFound  %+v", 404, o.Payload)
}

func (o *GetTeamsUsernameProjectsProjectKeyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTeamsUsernameProjectsProjectKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
