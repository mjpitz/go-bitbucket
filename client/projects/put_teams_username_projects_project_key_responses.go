// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutTeamsUsernameProjectsProjectKeyReader is a Reader for the PutTeamsUsernameProjectsProjectKey structure.
type PutTeamsUsernameProjectsProjectKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutTeamsUsernameProjectsProjectKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutTeamsUsernameProjectsProjectKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPutTeamsUsernameProjectsProjectKeyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPutTeamsUsernameProjectsProjectKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutTeamsUsernameProjectsProjectKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutTeamsUsernameProjectsProjectKeyOK creates a PutTeamsUsernameProjectsProjectKeyOK with default headers values
func NewPutTeamsUsernameProjectsProjectKeyOK() *PutTeamsUsernameProjectsProjectKeyOK {
	return &PutTeamsUsernameProjectsProjectKeyOK{}
}

/*PutTeamsUsernameProjectsProjectKeyOK handles this case with default header values.

The existing project is has been updated.
*/
type PutTeamsUsernameProjectsProjectKeyOK struct {
	/*The location of the project. This header is only provided
	when the project key is updated.
	*/
	Location string

	Payload *models.Project
}

func (o *PutTeamsUsernameProjectsProjectKeyOK) Error() string {
	return fmt.Sprintf("[PUT /teams/{username}/projects/{project_key}][%d] putTeamsUsernameProjectsProjectKeyOK  %+v", 200, o.Payload)
}

func (o *PutTeamsUsernameProjectsProjectKeyOK) GetPayload() *models.Project {
	return o.Payload
}

func (o *PutTeamsUsernameProjectsProjectKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTeamsUsernameProjectsProjectKeyCreated creates a PutTeamsUsernameProjectsProjectKeyCreated with default headers values
func NewPutTeamsUsernameProjectsProjectKeyCreated() *PutTeamsUsernameProjectsProjectKeyCreated {
	return &PutTeamsUsernameProjectsProjectKeyCreated{}
}

/*PutTeamsUsernameProjectsProjectKeyCreated handles this case with default header values.

A new project has been created.
*/
type PutTeamsUsernameProjectsProjectKeyCreated struct {
	/*The location of the newly created project
	 */
	Location string

	Payload *models.Project
}

func (o *PutTeamsUsernameProjectsProjectKeyCreated) Error() string {
	return fmt.Sprintf("[PUT /teams/{username}/projects/{project_key}][%d] putTeamsUsernameProjectsProjectKeyCreated  %+v", 201, o.Payload)
}

func (o *PutTeamsUsernameProjectsProjectKeyCreated) GetPayload() *models.Project {
	return o.Payload
}

func (o *PutTeamsUsernameProjectsProjectKeyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTeamsUsernameProjectsProjectKeyForbidden creates a PutTeamsUsernameProjectsProjectKeyForbidden with default headers values
func NewPutTeamsUsernameProjectsProjectKeyForbidden() *PutTeamsUsernameProjectsProjectKeyForbidden {
	return &PutTeamsUsernameProjectsProjectKeyForbidden{}
}

/*PutTeamsUsernameProjectsProjectKeyForbidden handles this case with default header values.

The requesting user isn't authorized to update or create the project.
*/
type PutTeamsUsernameProjectsProjectKeyForbidden struct {
	Payload *models.Error
}

func (o *PutTeamsUsernameProjectsProjectKeyForbidden) Error() string {
	return fmt.Sprintf("[PUT /teams/{username}/projects/{project_key}][%d] putTeamsUsernameProjectsProjectKeyForbidden  %+v", 403, o.Payload)
}

func (o *PutTeamsUsernameProjectsProjectKeyForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutTeamsUsernameProjectsProjectKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTeamsUsernameProjectsProjectKeyNotFound creates a PutTeamsUsernameProjectsProjectKeyNotFound with default headers values
func NewPutTeamsUsernameProjectsProjectKeyNotFound() *PutTeamsUsernameProjectsProjectKeyNotFound {
	return &PutTeamsUsernameProjectsProjectKeyNotFound{}
}

/*PutTeamsUsernameProjectsProjectKeyNotFound handles this case with default header values.

A team doesn't exist at the location. Note that the project's absence from this location doesn't raise a 404, since a PUT at a non-existent location can be used to create a new project.
*/
type PutTeamsUsernameProjectsProjectKeyNotFound struct {
	Payload *models.Error
}

func (o *PutTeamsUsernameProjectsProjectKeyNotFound) Error() string {
	return fmt.Sprintf("[PUT /teams/{username}/projects/{project_key}][%d] putTeamsUsernameProjectsProjectKeyNotFound  %+v", 404, o.Payload)
}

func (o *PutTeamsUsernameProjectsProjectKeyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutTeamsUsernameProjectsProjectKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
