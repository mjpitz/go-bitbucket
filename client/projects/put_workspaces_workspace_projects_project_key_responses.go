// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutWorkspacesWorkspaceProjectsProjectKeyReader is a Reader for the PutWorkspacesWorkspaceProjectsProjectKey structure.
type PutWorkspacesWorkspaceProjectsProjectKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutWorkspacesWorkspaceProjectsProjectKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutWorkspacesWorkspaceProjectsProjectKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPutWorkspacesWorkspaceProjectsProjectKeyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPutWorkspacesWorkspaceProjectsProjectKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutWorkspacesWorkspaceProjectsProjectKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyOK creates a PutWorkspacesWorkspaceProjectsProjectKeyOK with default headers values
func NewPutWorkspacesWorkspaceProjectsProjectKeyOK() *PutWorkspacesWorkspaceProjectsProjectKeyOK {
	return &PutWorkspacesWorkspaceProjectsProjectKeyOK{}
}

/*PutWorkspacesWorkspaceProjectsProjectKeyOK handles this case with default header values.

The existing project is has been updated.
*/
type PutWorkspacesWorkspaceProjectsProjectKeyOK struct {
	/*The location of the project. This header is only provided
	when the project key is updated.
	*/
	Location string

	Payload *models.Project
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyOK) Error() string {
	return fmt.Sprintf("[PUT /workspaces/{workspace}/projects/{project_key}][%d] putWorkspacesWorkspaceProjectsProjectKeyOK  %+v", 200, o.Payload)
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyOK) GetPayload() *models.Project {
	return o.Payload
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyCreated creates a PutWorkspacesWorkspaceProjectsProjectKeyCreated with default headers values
func NewPutWorkspacesWorkspaceProjectsProjectKeyCreated() *PutWorkspacesWorkspaceProjectsProjectKeyCreated {
	return &PutWorkspacesWorkspaceProjectsProjectKeyCreated{}
}

/*PutWorkspacesWorkspaceProjectsProjectKeyCreated handles this case with default header values.

A new project has been created.
*/
type PutWorkspacesWorkspaceProjectsProjectKeyCreated struct {
	/*The location of the newly created project
	 */
	Location string

	Payload *models.Project
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyCreated) Error() string {
	return fmt.Sprintf("[PUT /workspaces/{workspace}/projects/{project_key}][%d] putWorkspacesWorkspaceProjectsProjectKeyCreated  %+v", 201, o.Payload)
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyCreated) GetPayload() *models.Project {
	return o.Payload
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyForbidden creates a PutWorkspacesWorkspaceProjectsProjectKeyForbidden with default headers values
func NewPutWorkspacesWorkspaceProjectsProjectKeyForbidden() *PutWorkspacesWorkspaceProjectsProjectKeyForbidden {
	return &PutWorkspacesWorkspaceProjectsProjectKeyForbidden{}
}

/*PutWorkspacesWorkspaceProjectsProjectKeyForbidden handles this case with default header values.

The requesting user isn't authorized to update or create the project.
*/
type PutWorkspacesWorkspaceProjectsProjectKeyForbidden struct {
	Payload *models.Error
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyForbidden) Error() string {
	return fmt.Sprintf("[PUT /workspaces/{workspace}/projects/{project_key}][%d] putWorkspacesWorkspaceProjectsProjectKeyForbidden  %+v", 403, o.Payload)
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyNotFound creates a PutWorkspacesWorkspaceProjectsProjectKeyNotFound with default headers values
func NewPutWorkspacesWorkspaceProjectsProjectKeyNotFound() *PutWorkspacesWorkspaceProjectsProjectKeyNotFound {
	return &PutWorkspacesWorkspaceProjectsProjectKeyNotFound{}
}

/*PutWorkspacesWorkspaceProjectsProjectKeyNotFound handles this case with default header values.

A workspace doesn't exist at the location. Note that the project's absence from this location doesn't raise a 404, since a PUT at a non-existent location can be used to create a new project.
*/
type PutWorkspacesWorkspaceProjectsProjectKeyNotFound struct {
	Payload *models.Error
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyNotFound) Error() string {
	return fmt.Sprintf("[PUT /workspaces/{workspace}/projects/{project_key}][%d] putWorkspacesWorkspaceProjectsProjectKeyNotFound  %+v", 404, o.Payload)
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutWorkspacesWorkspaceProjectsProjectKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
