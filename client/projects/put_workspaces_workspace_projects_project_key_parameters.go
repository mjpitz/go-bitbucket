// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// NewPutWorkspacesWorkspaceProjectsProjectKeyParams creates a new PutWorkspacesWorkspaceProjectsProjectKeyParams object
// with the default values initialized.
func NewPutWorkspacesWorkspaceProjectsProjectKeyParams() *PutWorkspacesWorkspaceProjectsProjectKeyParams {
	var ()
	return &PutWorkspacesWorkspaceProjectsProjectKeyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyParamsWithTimeout creates a new PutWorkspacesWorkspaceProjectsProjectKeyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutWorkspacesWorkspaceProjectsProjectKeyParamsWithTimeout(timeout time.Duration) *PutWorkspacesWorkspaceProjectsProjectKeyParams {
	var ()
	return &PutWorkspacesWorkspaceProjectsProjectKeyParams{

		timeout: timeout,
	}
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyParamsWithContext creates a new PutWorkspacesWorkspaceProjectsProjectKeyParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutWorkspacesWorkspaceProjectsProjectKeyParamsWithContext(ctx context.Context) *PutWorkspacesWorkspaceProjectsProjectKeyParams {
	var ()
	return &PutWorkspacesWorkspaceProjectsProjectKeyParams{

		Context: ctx,
	}
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyParamsWithHTTPClient creates a new PutWorkspacesWorkspaceProjectsProjectKeyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutWorkspacesWorkspaceProjectsProjectKeyParamsWithHTTPClient(client *http.Client) *PutWorkspacesWorkspaceProjectsProjectKeyParams {
	var ()
	return &PutWorkspacesWorkspaceProjectsProjectKeyParams{
		HTTPClient: client,
	}
}

/*PutWorkspacesWorkspaceProjectsProjectKeyParams contains all the parameters to send to the API endpoint
for the put workspaces workspace projects project key operation typically these are written to a http.Request
*/
type PutWorkspacesWorkspaceProjectsProjectKeyParams struct {

	/*Body*/
	Body *models.Project
	/*ProjectKey
	  The project in question. This is the actual `key` assigned
	to the project.


	*/
	ProjectKey string
	/*Workspace
	  This can either be the workspace ID (slug) or the workspace UUID
	surrounded by curly-braces, for example: `{workspace UUID}`.


	*/
	Workspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) WithTimeout(timeout time.Duration) *PutWorkspacesWorkspaceProjectsProjectKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) WithContext(ctx context.Context) *PutWorkspacesWorkspaceProjectsProjectKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) WithHTTPClient(client *http.Client) *PutWorkspacesWorkspaceProjectsProjectKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) WithBody(body *models.Project) *PutWorkspacesWorkspaceProjectsProjectKeyParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) SetBody(body *models.Project) {
	o.Body = body
}

// WithProjectKey adds the projectKey to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) WithProjectKey(projectKey string) *PutWorkspacesWorkspaceProjectsProjectKeyParams {
	o.SetProjectKey(projectKey)
	return o
}

// SetProjectKey adds the projectKey to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) SetProjectKey(projectKey string) {
	o.ProjectKey = projectKey
}

// WithWorkspace adds the workspace to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) WithWorkspace(workspace string) *PutWorkspacesWorkspaceProjectsProjectKeyParams {
	o.SetWorkspace(workspace)
	return o
}

// SetWorkspace adds the workspace to the put workspaces workspace projects project key params
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) SetWorkspace(workspace string) {
	o.Workspace = workspace
}

// WriteToRequest writes these params to a swagger request
func (o *PutWorkspacesWorkspaceProjectsProjectKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param project_key
	if err := r.SetPathParam("project_key", o.ProjectKey); err != nil {
		return err
	}

	// path param workspace
	if err := r.SetPathParam("workspace", o.Workspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
