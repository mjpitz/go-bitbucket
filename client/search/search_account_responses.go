// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// SearchAccountReader is a Reader for the SearchAccount structure.
type SearchAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSearchAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchAccountOK creates a SearchAccountOK with default headers values
func NewSearchAccountOK() *SearchAccountOK {
	return &SearchAccountOK{}
}

/*SearchAccountOK handles this case with default header values.

Successful search
*/
type SearchAccountOK struct {
	Payload *models.SearchResultPage
}

func (o *SearchAccountOK) Error() string {
	return fmt.Sprintf("[GET /workspaces/{workspace}/search/code][%d] searchAccountOK  %+v", 200, o.Payload)
}

func (o *SearchAccountOK) GetPayload() *models.SearchResultPage {
	return o.Payload
}

func (o *SearchAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SearchResultPage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchAccountBadRequest creates a SearchAccountBadRequest with default headers values
func NewSearchAccountBadRequest() *SearchAccountBadRequest {
	return &SearchAccountBadRequest{}
}

/*SearchAccountBadRequest handles this case with default header values.

If the search request was invalid due to one of the
following reasons:

* the specified type of target account doesn''t match the actual
account type;

* malformed pagination properties;

* missing or malformed search query, in the latter case an error
key will be returned in `error.data.key` property.

*/
type SearchAccountBadRequest struct {
	Payload *models.Error
}

func (o *SearchAccountBadRequest) Error() string {
	return fmt.Sprintf("[GET /workspaces/{workspace}/search/code][%d] searchAccountBadRequest  %+v", 400, o.Payload)
}

func (o *SearchAccountBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SearchAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchAccountNotFound creates a SearchAccountNotFound with default headers values
func NewSearchAccountNotFound() *SearchAccountNotFound {
	return &SearchAccountNotFound{}
}

/*SearchAccountNotFound handles this case with default header values.

Search is not enabled for the requested workspace, navigate to [https://bitbucket.org/search](https://bitbucket.org/search) to turn it on
*/
type SearchAccountNotFound struct {
	Payload *models.Error
}

func (o *SearchAccountNotFound) Error() string {
	return fmt.Sprintf("[GET /workspaces/{workspace}/search/code][%d] searchAccountNotFound  %+v", 404, o.Payload)
}

func (o *SearchAccountNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SearchAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchAccountTooManyRequests creates a SearchAccountTooManyRequests with default headers values
func NewSearchAccountTooManyRequests() *SearchAccountTooManyRequests {
	return &SearchAccountTooManyRequests{}
}

/*SearchAccountTooManyRequests handles this case with default header values.

Too many requests, try again later
*/
type SearchAccountTooManyRequests struct {
	Payload *models.Error
}

func (o *SearchAccountTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /workspaces/{workspace}/search/code][%d] searchAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchAccountTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *SearchAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
