// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchAccountParams creates a new SearchAccountParams object
// with the default values initialized.
func NewSearchAccountParams() *SearchAccountParams {
	var (
		pageDefault    = int32(1)
		pagelenDefault = int32(10)
	)
	return &SearchAccountParams{
		Page:    &pageDefault,
		Pagelen: &pagelenDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchAccountParamsWithTimeout creates a new SearchAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchAccountParamsWithTimeout(timeout time.Duration) *SearchAccountParams {
	var (
		pageDefault    = int32(1)
		pagelenDefault = int32(10)
	)
	return &SearchAccountParams{
		Page:    &pageDefault,
		Pagelen: &pagelenDefault,

		timeout: timeout,
	}
}

// NewSearchAccountParamsWithContext creates a new SearchAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchAccountParamsWithContext(ctx context.Context) *SearchAccountParams {
	var (
		pageDefault    = int32(1)
		pagelenDefault = int32(10)
	)
	return &SearchAccountParams{
		Page:    &pageDefault,
		Pagelen: &pagelenDefault,

		Context: ctx,
	}
}

// NewSearchAccountParamsWithHTTPClient creates a new SearchAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchAccountParamsWithHTTPClient(client *http.Client) *SearchAccountParams {
	var (
		pageDefault    = int32(1)
		pagelenDefault = int32(10)
	)
	return &SearchAccountParams{
		Page:       &pageDefault,
		Pagelen:    &pagelenDefault,
		HTTPClient: client,
	}
}

/*SearchAccountParams contains all the parameters to send to the API endpoint
for the search account operation typically these are written to a http.Request
*/
type SearchAccountParams struct {

	/*Page
	  Which page of the search results to retrieve

	*/
	Page *int32
	/*Pagelen
	  How many search results to retrieve per page

	*/
	Pagelen *int32
	/*SearchQuery
	  The search query

	*/
	SearchQuery string
	/*Workspace
	  The workspace to search in; either the slug or the UUID in curly braces

	*/
	Workspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search account params
func (o *SearchAccountParams) WithTimeout(timeout time.Duration) *SearchAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search account params
func (o *SearchAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search account params
func (o *SearchAccountParams) WithContext(ctx context.Context) *SearchAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search account params
func (o *SearchAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search account params
func (o *SearchAccountParams) WithHTTPClient(client *http.Client) *SearchAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search account params
func (o *SearchAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the search account params
func (o *SearchAccountParams) WithPage(page *int32) *SearchAccountParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the search account params
func (o *SearchAccountParams) SetPage(page *int32) {
	o.Page = page
}

// WithPagelen adds the pagelen to the search account params
func (o *SearchAccountParams) WithPagelen(pagelen *int32) *SearchAccountParams {
	o.SetPagelen(pagelen)
	return o
}

// SetPagelen adds the pagelen to the search account params
func (o *SearchAccountParams) SetPagelen(pagelen *int32) {
	o.Pagelen = pagelen
}

// WithSearchQuery adds the searchQuery to the search account params
func (o *SearchAccountParams) WithSearchQuery(searchQuery string) *SearchAccountParams {
	o.SetSearchQuery(searchQuery)
	return o
}

// SetSearchQuery adds the searchQuery to the search account params
func (o *SearchAccountParams) SetSearchQuery(searchQuery string) {
	o.SearchQuery = searchQuery
}

// WithWorkspace adds the workspace to the search account params
func (o *SearchAccountParams) WithWorkspace(workspace string) *SearchAccountParams {
	o.SetWorkspace(workspace)
	return o
}

// SetWorkspace adds the workspace to the search account params
func (o *SearchAccountParams) SetWorkspace(workspace string) {
	o.Workspace = workspace
}

// WriteToRequest writes these params to a swagger request
func (o *SearchAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Pagelen != nil {

		// query param pagelen
		var qrPagelen int32
		if o.Pagelen != nil {
			qrPagelen = *o.Pagelen
		}
		qPagelen := swag.FormatInt32(qrPagelen)
		if qPagelen != "" {
			if err := r.SetQueryParam("pagelen", qPagelen); err != nil {
				return err
			}
		}

	}

	// query param search_query
	qrSearchQuery := o.SearchQuery
	qSearchQuery := qrSearchQuery
	if qSearchQuery != "" {
		if err := r.SetQueryParam("search_query", qSearchQuery); err != nil {
			return err
		}
	}

	// path param workspace
	if err := r.SetPathParam("workspace", o.Workspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
