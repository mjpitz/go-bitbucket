// Code generated by go-swagger; DO NOT EDIT.

package commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugCommitNodeReader is a Reader for the GetRepositoriesWorkspaceRepoSlugCommitNode structure.
type GetRepositoriesWorkspaceRepoSlugCommitNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugCommitNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugCommitNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugCommitNodeOK creates a GetRepositoriesWorkspaceRepoSlugCommitNodeOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugCommitNodeOK() *GetRepositoriesWorkspaceRepoSlugCommitNodeOK {
	return &GetRepositoriesWorkspaceRepoSlugCommitNodeOK{}
}

/*GetRepositoriesWorkspaceRepoSlugCommitNodeOK handles this case with default header values.

The commit object
*/
type GetRepositoriesWorkspaceRepoSlugCommitNodeOK struct {
	Payload *models.Commit
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/commit/{node}][%d] getRepositoriesWorkspaceRepoSlugCommitNodeOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeOK) GetPayload() *models.Commit {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Commit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugCommitNodeNotFound creates a GetRepositoriesWorkspaceRepoSlugCommitNodeNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugCommitNodeNotFound() *GetRepositoriesWorkspaceRepoSlugCommitNodeNotFound {
	return &GetRepositoriesWorkspaceRepoSlugCommitNodeNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugCommitNodeNotFound handles this case with default header values.

If the specified commit or repository does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugCommitNodeNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/commit/{node}][%d] getRepositoriesWorkspaceRepoSlugCommitNodeNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
