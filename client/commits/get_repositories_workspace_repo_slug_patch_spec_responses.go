// Code generated by go-swagger; DO NOT EDIT.

package commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugPatchSpecReader is a Reader for the GetRepositoriesWorkspaceRepoSlugPatchSpec structure.
type GetRepositoriesWorkspaceRepoSlugPatchSpecReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugPatchSpecReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugPatchSpecOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 555:
		result := NewGetRepositoriesWorkspaceRepoSlugPatchSpecStatus555()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugPatchSpecOK creates a GetRepositoriesWorkspaceRepoSlugPatchSpecOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPatchSpecOK() *GetRepositoriesWorkspaceRepoSlugPatchSpecOK {
	return &GetRepositoriesWorkspaceRepoSlugPatchSpecOK{}
}

/*GetRepositoriesWorkspaceRepoSlugPatchSpecOK handles this case with default header values.

The raw patches
*/
type GetRepositoriesWorkspaceRepoSlugPatchSpecOK struct {
}

func (o *GetRepositoriesWorkspaceRepoSlugPatchSpecOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/patch/{spec}][%d] getRepositoriesWorkspaceRepoSlugPatchSpecOK ", 200)
}

func (o *GetRepositoriesWorkspaceRepoSlugPatchSpecOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugPatchSpecStatus555 creates a GetRepositoriesWorkspaceRepoSlugPatchSpecStatus555 with default headers values
func NewGetRepositoriesWorkspaceRepoSlugPatchSpecStatus555() *GetRepositoriesWorkspaceRepoSlugPatchSpecStatus555 {
	return &GetRepositoriesWorkspaceRepoSlugPatchSpecStatus555{}
}

/*GetRepositoriesWorkspaceRepoSlugPatchSpecStatus555 handles this case with default header values.

If the diff was too large and timed out.

Since this endpoint does not employ any form of pagination, but
instead returns the diff as a single document, it can run into
trouble on very large diffs. If Bitbucket times out in cases
like these, a 555 status code is returned.
*/
type GetRepositoriesWorkspaceRepoSlugPatchSpecStatus555 struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugPatchSpecStatus555) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/patch/{spec}][%d] getRepositoriesWorkspaceRepoSlugPatchSpecStatus555  %+v", 555, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugPatchSpecStatus555) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugPatchSpecStatus555) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
