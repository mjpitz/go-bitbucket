// Code generated by go-swagger; DO NOT EDIT.

package commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecReader is a Reader for the GetRepositoriesWorkspaceRepoSlugMergeBaseRevspec structure.
type GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK creates a GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK() *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK {
	return &GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK{}
}

/*GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK handles this case with default header values.

The merge base of the provided spec.
*/
type GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK struct {
	Payload *models.Commit
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/merge-base/{revspec}][%d] getRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK) GetPayload() *models.Commit {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Commit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized creates a GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized with default headers values
func NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized() *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized {
	return &GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized{}
}

/*GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized handles this case with default header values.

If the request was not authenticated.
*/
type GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/merge-base/{revspec}][%d] getRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden creates a GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden() *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden {
	return &GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden handles this case with default header values.

If the authenticated user does not have access to any of the repositories specified.
*/
type GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/merge-base/{revspec}][%d] getRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden  %+v", 403, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound creates a GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound() *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound {
	return &GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound handles this case with default header values.

If the repository or ref in the spec does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/merge-base/{revspec}][%d] getRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
