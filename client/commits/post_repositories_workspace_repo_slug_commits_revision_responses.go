// Code generated by go-swagger; DO NOT EDIT.

package commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostRepositoriesWorkspaceRepoSlugCommitsRevisionReader is a Reader for the PostRepositoriesWorkspaceRepoSlugCommitsRevision structure.
type PostRepositoriesWorkspaceRepoSlugCommitsRevisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesWorkspaceRepoSlugCommitsRevisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	result := NewPostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault(response.Code())
	if err := result.readResponse(response, consumer, o.formats); err != nil {
		return nil, err
	}
	if response.Code()/100 == 2 {
		return result, nil
	}
	return nil, result
}

// NewPostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault creates a PostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault with default headers values
func NewPostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault(code int) *PostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault {
	return &PostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault{
		_statusCode: code,
	}
}

/*PostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault handles this case with default header values.

Unexpected error.
*/
type PostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the post repositories workspace repo slug commits revision default response
func (o *PostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault) Code() int {
	return o._statusCode
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/commits/{revision}][%d] PostRepositoriesWorkspaceRepoSlugCommitsRevision default  %+v", o._statusCode, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitsRevisionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
