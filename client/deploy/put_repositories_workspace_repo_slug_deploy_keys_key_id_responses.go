// Code generated by go-swagger; DO NOT EDIT.

package deploy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDReader is a Reader for the PutRepositoriesWorkspaceRepoSlugDeployKeysKeyID structure.
type PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK creates a PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK with default headers values
func NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK() *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK {
	return &PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK{}
}

/*PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK handles this case with default header values.

The newly updated deploy key.
*/
type PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK struct {
	Payload *models.DeployKey
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}][%d] putRepositoriesWorkspaceRepoSlugDeployKeysKeyIdOK  %+v", 200, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK) GetPayload() *models.DeployKey {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeployKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest creates a PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest with default headers values
func NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest() *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest {
	return &PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest{}
}

/*PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest handles this case with default header values.

If the submitted key or related value is invalid
*/
type PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}][%d] putRepositoriesWorkspaceRepoSlugDeployKeysKeyIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden creates a PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden with default headers values
func NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden() *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden {
	return &PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden{}
}

/*PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden handles this case with default header values.

If the current user does not have permission to add a key for the specified user
*/
type PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden struct {
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}][%d] putRepositoriesWorkspaceRepoSlugDeployKeysKeyIdForbidden ", 403)
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound creates a PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound with default headers values
func NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound() *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound {
	return &PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound{}
}

/*PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound handles this case with default header values.

If the specified user, repository, or deploy key does not exist
*/
type PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}][%d] putRepositoriesWorkspaceRepoSlugDeployKeysKeyIdNotFound  %+v", 404, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
