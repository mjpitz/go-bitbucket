// Code generated by go-swagger; DO NOT EDIT.

package deploy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostRepositoriesWorkspaceRepoSlugDeployKeysReader is a Reader for the PostRepositoriesWorkspaceRepoSlugDeployKeys structure.
type PostRepositoriesWorkspaceRepoSlugDeployKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRepositoriesWorkspaceRepoSlugDeployKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRepositoriesWorkspaceRepoSlugDeployKeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRepositoriesWorkspaceRepoSlugDeployKeysForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRepositoriesWorkspaceRepoSlugDeployKeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRepositoriesWorkspaceRepoSlugDeployKeysOK creates a PostRepositoriesWorkspaceRepoSlugDeployKeysOK with default headers values
func NewPostRepositoriesWorkspaceRepoSlugDeployKeysOK() *PostRepositoriesWorkspaceRepoSlugDeployKeysOK {
	return &PostRepositoriesWorkspaceRepoSlugDeployKeysOK{}
}

/*PostRepositoriesWorkspaceRepoSlugDeployKeysOK handles this case with default header values.

The deploy key that was created
*/
type PostRepositoriesWorkspaceRepoSlugDeployKeysOK struct {
	Payload *models.DeployKey
}

func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysOK) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/deploy-keys][%d] postRepositoriesWorkspaceRepoSlugDeployKeysOK  %+v", 200, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysOK) GetPayload() *models.DeployKey {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeployKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugDeployKeysBadRequest creates a PostRepositoriesWorkspaceRepoSlugDeployKeysBadRequest with default headers values
func NewPostRepositoriesWorkspaceRepoSlugDeployKeysBadRequest() *PostRepositoriesWorkspaceRepoSlugDeployKeysBadRequest {
	return &PostRepositoriesWorkspaceRepoSlugDeployKeysBadRequest{}
}

/*PostRepositoriesWorkspaceRepoSlugDeployKeysBadRequest handles this case with default header values.

Invalid deploy key inputs
*/
type PostRepositoriesWorkspaceRepoSlugDeployKeysBadRequest struct {
}

func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysBadRequest) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/deploy-keys][%d] postRepositoriesWorkspaceRepoSlugDeployKeysBadRequest ", 400)
}

func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugDeployKeysForbidden creates a PostRepositoriesWorkspaceRepoSlugDeployKeysForbidden with default headers values
func NewPostRepositoriesWorkspaceRepoSlugDeployKeysForbidden() *PostRepositoriesWorkspaceRepoSlugDeployKeysForbidden {
	return &PostRepositoriesWorkspaceRepoSlugDeployKeysForbidden{}
}

/*PostRepositoriesWorkspaceRepoSlugDeployKeysForbidden handles this case with default header values.

If the specified user or repository is not accessible to the current user
*/
type PostRepositoriesWorkspaceRepoSlugDeployKeysForbidden struct {
}

func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysForbidden) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/deploy-keys][%d] postRepositoriesWorkspaceRepoSlugDeployKeysForbidden ", 403)
}

func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugDeployKeysNotFound creates a PostRepositoriesWorkspaceRepoSlugDeployKeysNotFound with default headers values
func NewPostRepositoriesWorkspaceRepoSlugDeployKeysNotFound() *PostRepositoriesWorkspaceRepoSlugDeployKeysNotFound {
	return &PostRepositoriesWorkspaceRepoSlugDeployKeysNotFound{}
}

/*PostRepositoriesWorkspaceRepoSlugDeployKeysNotFound handles this case with default header values.

If the specified user or repository does not exist
*/
type PostRepositoriesWorkspaceRepoSlugDeployKeysNotFound struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/deploy-keys][%d] postRepositoriesWorkspaceRepoSlugDeployKeysNotFound  %+v", 404, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugDeployKeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
