// Code generated by go-swagger; DO NOT EDIT.

package deploy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDReader is a Reader for the GetRepositoriesWorkspaceRepoSlugDeployKeysKeyID structure.
type GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK creates a GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK() *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK {
	return &GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK{}
}

/*GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK handles this case with default header values.

Deploy key matching the key ID
*/
type GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK struct {
	Payload *models.DeployKey
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}][%d] getRepositoriesWorkspaceRepoSlugDeployKeysKeyIdOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK) GetPayload() *models.DeployKey {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeployKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden creates a GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden() *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden {
	return &GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden handles this case with default header values.

If the specified user or repository is not accessible to the current user
*/
type GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden struct {
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}][%d] getRepositoriesWorkspaceRepoSlugDeployKeysKeyIdForbidden ", 403)
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound creates a GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound() *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound {
	return &GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound handles this case with default header values.

If the specified user or repository does not exist
*/
type GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}][%d] getRepositoriesWorkspaceRepoSlugDeployKeysKeyIdNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
