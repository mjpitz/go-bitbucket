// Code generated by go-swagger; DO NOT EDIT.

package deploy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugDeployKeysReader is a Reader for the GetRepositoriesWorkspaceRepoSlugDeployKeys structure.
type GetRepositoriesWorkspaceRepoSlugDeployKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugDeployKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugDeployKeysForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugDeployKeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugDeployKeysOK creates a GetRepositoriesWorkspaceRepoSlugDeployKeysOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugDeployKeysOK() *GetRepositoriesWorkspaceRepoSlugDeployKeysOK {
	return &GetRepositoriesWorkspaceRepoSlugDeployKeysOK{}
}

/*GetRepositoriesWorkspaceRepoSlugDeployKeysOK handles this case with default header values.

Deploy keys matching the repository
*/
type GetRepositoriesWorkspaceRepoSlugDeployKeysOK struct {
	Payload *models.PaginatedDeployKeys
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/deploy-keys][%d] getRepositoriesWorkspaceRepoSlugDeployKeysOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysOK) GetPayload() *models.PaginatedDeployKeys {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedDeployKeys)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugDeployKeysForbidden creates a GetRepositoriesWorkspaceRepoSlugDeployKeysForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugDeployKeysForbidden() *GetRepositoriesWorkspaceRepoSlugDeployKeysForbidden {
	return &GetRepositoriesWorkspaceRepoSlugDeployKeysForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugDeployKeysForbidden handles this case with default header values.

If the specified user or repository is not accessible to the current user
*/
type GetRepositoriesWorkspaceRepoSlugDeployKeysForbidden struct {
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/deploy-keys][%d] getRepositoriesWorkspaceRepoSlugDeployKeysForbidden ", 403)
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugDeployKeysNotFound creates a GetRepositoriesWorkspaceRepoSlugDeployKeysNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugDeployKeysNotFound() *GetRepositoriesWorkspaceRepoSlugDeployKeysNotFound {
	return &GetRepositoriesWorkspaceRepoSlugDeployKeysNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugDeployKeysNotFound handles this case with default header values.

If the specified user or repository does not exist
*/
type GetRepositoriesWorkspaceRepoSlugDeployKeysNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/deploy-keys][%d] getRepositoriesWorkspaceRepoSlugDeployKeysNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugDeployKeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
