// Code generated by go-swagger; DO NOT EDIT.

package addon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new addon API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for addon API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAddon(params *DeleteAddonParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAddonNoContent, error)

	DeleteAddonLinkersLinkerKeyValues(params *DeleteAddonLinkersLinkerKeyValuesParams, authInfo runtime.ClientAuthInfoWriter) error

	GetAddonLinkers(params *GetAddonLinkersParams, authInfo runtime.ClientAuthInfoWriter) error

	GetAddonLinkersLinkerKey(params *GetAddonLinkersLinkerKeyParams, authInfo runtime.ClientAuthInfoWriter) error

	GetAddonLinkersLinkerKeyValues(params *GetAddonLinkersLinkerKeyValuesParams, authInfo runtime.ClientAuthInfoWriter) error

	PostAddonLinkersLinkerKeyValues(params *PostAddonLinkersLinkerKeyValuesParams, authInfo runtime.ClientAuthInfoWriter) error

	PostAddonUsersTargetUserEventsEventKey(params *PostAddonUsersTargetUserEventsEventKeyParams, authInfo runtime.ClientAuthInfoWriter) (*PostAddonUsersTargetUserEventsEventKeyNoContent, error)

	PutAddon(params *PutAddonParams, authInfo runtime.ClientAuthInfoWriter) (*PutAddonNoContent, error)

	PutAddonLinkersLinkerKeyValues(params *PutAddonLinkersLinkerKeyValuesParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAddon Deletes the application for the user.

This endpoint is intended to be used by Bitbucket Connect apps
and only supports JWT authentication -- that is how Bitbucket
identifies the particular installation of the app. Developers
with applications registered in the "Develop Apps" section
of Bitbucket Marketplace need not use this endpoint as
updates for those applications can be sent out via the
UI of that section.

```
$ curl -X DELETE https://api.bitbucket.org/2.0/addon \
  -H "Authorization: JWT <JWT Token>"
```
*/
func (a *Client) DeleteAddon(params *DeleteAddonParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAddonNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAddonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAddon",
		Method:             "DELETE",
		PathPattern:        "/addon",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAddonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAddonNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAddon: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAddonLinkersLinkerKeyValues delete addon linkers linker key values API
*/
func (a *Client) DeleteAddonLinkersLinkerKeyValues(params *DeleteAddonLinkersLinkerKeyValuesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAddonLinkersLinkerKeyValuesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAddonLinkersLinkerKeyValues",
		Method:             "DELETE",
		PathPattern:        "/addon/linkers/{linker_key}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAddonLinkersLinkerKeyValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAddonLinkers get addon linkers API
*/
func (a *Client) GetAddonLinkers(params *GetAddonLinkersParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddonLinkersParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAddonLinkers",
		Method:             "GET",
		PathPattern:        "/addon/linkers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAddonLinkersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAddonLinkersLinkerKey get addon linkers linker key API
*/
func (a *Client) GetAddonLinkersLinkerKey(params *GetAddonLinkersLinkerKeyParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddonLinkersLinkerKeyParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAddonLinkersLinkerKey",
		Method:             "GET",
		PathPattern:        "/addon/linkers/{linker_key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAddonLinkersLinkerKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAddonLinkersLinkerKeyValues get addon linkers linker key values API
*/
func (a *Client) GetAddonLinkersLinkerKeyValues(params *GetAddonLinkersLinkerKeyValuesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddonLinkersLinkerKeyValuesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAddonLinkersLinkerKeyValues",
		Method:             "GET",
		PathPattern:        "/addon/linkers/{linker_key}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAddonLinkersLinkerKeyValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PostAddonLinkersLinkerKeyValues post addon linkers linker key values API
*/
func (a *Client) PostAddonLinkersLinkerKeyValues(params *PostAddonLinkersLinkerKeyValuesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAddonLinkersLinkerKeyValuesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAddonLinkersLinkerKeyValues",
		Method:             "POST",
		PathPattern:        "/addon/linkers/{linker_key}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAddonLinkersLinkerKeyValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PostAddonUsersTargetUserEventsEventKey POST a new custom event.

The data within the event body will be hydrated by Bitbucket. For example, the following event
submission would result in subscribers for the event receiving the full repository object
corresponding to the UUID.

```
$ curl -X POST -H "Content-Type: application/json" -d '{
    "mynumdata": "12345",
    "repository": {
        "type": "repository",
        "uuid": "{be95aa1f-c0b2-47f6-99d1-bf5d3a0f850f}"
}}' https://api.bitbucket.org/2.0/addon/users/myuser/events/com.example.app%3Amyevent
```

Use the optional `fields` property of the custom event Connect
module where the event is defined to add additional
fields to the expanded payload sent to listeners.

For example, the `customEvents` module in the app descriptor for the previous example would look like this:

```
'modules': {
    'customEvents': {
        'com.example.app:myevent': {
            'schema': {
                'properties': {
                    'mynumdata': {'type': 'number'},
                    'repository': {'$ref': '#/definitions/repository'}
                }
            },
            'fields': ['repository.owner']
        }
    }
}
```

By specifying fields as above, the repository owner
will also be sent to subscribers of the event.
*/
func (a *Client) PostAddonUsersTargetUserEventsEventKey(params *PostAddonUsersTargetUserEventsEventKeyParams, authInfo runtime.ClientAuthInfoWriter) (*PostAddonUsersTargetUserEventsEventKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAddonUsersTargetUserEventsEventKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAddonUsersTargetUserEventsEventKey",
		Method:             "POST",
		PathPattern:        "/addon/users/{target_user}/events/{event_key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAddonUsersTargetUserEventsEventKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAddonUsersTargetUserEventsEventKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAddonUsersTargetUserEventsEventKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAddon Updates the application installation for the user.

This endpoint is intended to be used by Bitbucket Connect apps
and only supports JWT authentication -- that is how Bitbucket
identifies the particular installation of the app. Developers
with applications registered in the "Develop Apps" section
of Bitbucket Marketplace need not use this endpoint as
updates for those applications can be sent out via the
UI of that section.

A new, valid descriptor must be provided in the body of the
PUT request.

```
$ curl -X PUT https://api.bitbucket.org/2.0/addon \
  -H "Authorization: JWT <JWT Token>" \
  --header "Content-Type: application/json" \
  --data '{"descriptor": $NEW_DESCRIPTOR}'
```

Note that the scopes of the application cannot be increased
in the new descriptor nor reduced to none.
*/
func (a *Client) PutAddon(params *PutAddonParams, authInfo runtime.ClientAuthInfoWriter) (*PutAddonNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAddonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAddon",
		Method:             "PUT",
		PathPattern:        "/addon",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAddonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAddonNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAddon: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAddonLinkersLinkerKeyValues put addon linkers linker key values API
*/
func (a *Client) PutAddonLinkersLinkerKeyValues(params *PutAddonLinkersLinkerKeyValuesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAddonLinkersLinkerKeyValuesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAddonLinkersLinkerKeyValues",
		Method:             "PUT",
		PathPattern:        "/addon/linkers/{linker_key}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAddonLinkersLinkerKeyValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
