// Code generated by go-swagger; DO NOT EDIT.

package addon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutAddonReader is a Reader for the PutAddon structure.
type PutAddonReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAddonReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutAddonNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutAddonBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutAddonUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutAddonForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutAddonNoContent creates a PutAddonNoContent with default headers values
func NewPutAddonNoContent() *PutAddonNoContent {
	return &PutAddonNoContent{}
}

/*PutAddonNoContent handles this case with default header values.

Request has succeeded. The installation has been updated to the new descriptor.
*/
type PutAddonNoContent struct {
}

func (o *PutAddonNoContent) Error() string {
	return fmt.Sprintf("[PUT /addon][%d] putAddonNoContent ", 204)
}

func (o *PutAddonNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAddonBadRequest creates a PutAddonBadRequest with default headers values
func NewPutAddonBadRequest() *PutAddonBadRequest {
	return &PutAddonBadRequest{}
}

/*PutAddonBadRequest handles this case with default header values.

Scopes have increased or decreased to none.
*/
type PutAddonBadRequest struct {
	Payload *models.Error
}

func (o *PutAddonBadRequest) Error() string {
	return fmt.Sprintf("[PUT /addon][%d] putAddonBadRequest  %+v", 400, o.Payload)
}

func (o *PutAddonBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutAddonBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAddonUnauthorized creates a PutAddonUnauthorized with default headers values
func NewPutAddonUnauthorized() *PutAddonUnauthorized {
	return &PutAddonUnauthorized{}
}

/*PutAddonUnauthorized handles this case with default header values.

No authorization.
*/
type PutAddonUnauthorized struct {
	Payload *models.Error
}

func (o *PutAddonUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /addon][%d] putAddonUnauthorized  %+v", 401, o.Payload)
}

func (o *PutAddonUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutAddonUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAddonForbidden creates a PutAddonForbidden with default headers values
func NewPutAddonForbidden() *PutAddonForbidden {
	return &PutAddonForbidden{}
}

/*PutAddonForbidden handles this case with default header values.

Improper authentication.
*/
type PutAddonForbidden struct {
	Payload *models.Error
}

func (o *PutAddonForbidden) Error() string {
	return fmt.Sprintf("[PUT /addon][%d] putAddonForbidden  %+v", 403, o.Payload)
}

func (o *PutAddonForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutAddonForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
