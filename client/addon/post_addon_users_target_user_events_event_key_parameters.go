// Code generated by go-swagger; DO NOT EDIT.

package addon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostAddonUsersTargetUserEventsEventKeyParams creates a new PostAddonUsersTargetUserEventsEventKeyParams object
// with the default values initialized.
func NewPostAddonUsersTargetUserEventsEventKeyParams() *PostAddonUsersTargetUserEventsEventKeyParams {
	var ()
	return &PostAddonUsersTargetUserEventsEventKeyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostAddonUsersTargetUserEventsEventKeyParamsWithTimeout creates a new PostAddonUsersTargetUserEventsEventKeyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostAddonUsersTargetUserEventsEventKeyParamsWithTimeout(timeout time.Duration) *PostAddonUsersTargetUserEventsEventKeyParams {
	var ()
	return &PostAddonUsersTargetUserEventsEventKeyParams{

		timeout: timeout,
	}
}

// NewPostAddonUsersTargetUserEventsEventKeyParamsWithContext creates a new PostAddonUsersTargetUserEventsEventKeyParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostAddonUsersTargetUserEventsEventKeyParamsWithContext(ctx context.Context) *PostAddonUsersTargetUserEventsEventKeyParams {
	var ()
	return &PostAddonUsersTargetUserEventsEventKeyParams{

		Context: ctx,
	}
}

// NewPostAddonUsersTargetUserEventsEventKeyParamsWithHTTPClient creates a new PostAddonUsersTargetUserEventsEventKeyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostAddonUsersTargetUserEventsEventKeyParamsWithHTTPClient(client *http.Client) *PostAddonUsersTargetUserEventsEventKeyParams {
	var ()
	return &PostAddonUsersTargetUserEventsEventKeyParams{
		HTTPClient: client,
	}
}

/*PostAddonUsersTargetUserEventsEventKeyParams contains all the parameters to send to the API endpoint
for the post addon users target user events event key operation typically these are written to a http.Request
*/
type PostAddonUsersTargetUserEventsEventKeyParams struct {

	/*EventKey
	  The key of the event, which corresponds to an event
	defined in the connect app descriptor.


	*/
	EventKey string
	/*TargetUser
	  The account the app is installed in.

	This can either be the username or the UUID of the account,
	surrounded by curly-braces, for example: `{account UUID}`. An account
	is either a team or user.


	*/
	TargetUser string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post addon users target user events event key params
func (o *PostAddonUsersTargetUserEventsEventKeyParams) WithTimeout(timeout time.Duration) *PostAddonUsersTargetUserEventsEventKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post addon users target user events event key params
func (o *PostAddonUsersTargetUserEventsEventKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post addon users target user events event key params
func (o *PostAddonUsersTargetUserEventsEventKeyParams) WithContext(ctx context.Context) *PostAddonUsersTargetUserEventsEventKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post addon users target user events event key params
func (o *PostAddonUsersTargetUserEventsEventKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post addon users target user events event key params
func (o *PostAddonUsersTargetUserEventsEventKeyParams) WithHTTPClient(client *http.Client) *PostAddonUsersTargetUserEventsEventKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post addon users target user events event key params
func (o *PostAddonUsersTargetUserEventsEventKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventKey adds the eventKey to the post addon users target user events event key params
func (o *PostAddonUsersTargetUserEventsEventKeyParams) WithEventKey(eventKey string) *PostAddonUsersTargetUserEventsEventKeyParams {
	o.SetEventKey(eventKey)
	return o
}

// SetEventKey adds the eventKey to the post addon users target user events event key params
func (o *PostAddonUsersTargetUserEventsEventKeyParams) SetEventKey(eventKey string) {
	o.EventKey = eventKey
}

// WithTargetUser adds the targetUser to the post addon users target user events event key params
func (o *PostAddonUsersTargetUserEventsEventKeyParams) WithTargetUser(targetUser string) *PostAddonUsersTargetUserEventsEventKeyParams {
	o.SetTargetUser(targetUser)
	return o
}

// SetTargetUser adds the targetUser to the post addon users target user events event key params
func (o *PostAddonUsersTargetUserEventsEventKeyParams) SetTargetUser(targetUser string) {
	o.TargetUser = targetUser
}

// WriteToRequest writes these params to a swagger request
func (o *PostAddonUsersTargetUserEventsEventKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param event_key
	if err := r.SetPathParam("event_key", o.EventKey); err != nil {
		return err
	}

	// path param target_user
	if err := r.SetPathParam("target_user", o.TargetUser); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
