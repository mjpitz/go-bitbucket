// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugHooksReader is a Reader for the GetRepositoriesWorkspaceRepoSlugHooks structure.
type GetRepositoriesWorkspaceRepoSlugHooksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugHooksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugHooksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugHooksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugHooksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugHooksOK creates a GetRepositoriesWorkspaceRepoSlugHooksOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugHooksOK() *GetRepositoriesWorkspaceRepoSlugHooksOK {
	return &GetRepositoriesWorkspaceRepoSlugHooksOK{}
}

/*GetRepositoriesWorkspaceRepoSlugHooksOK handles this case with default header values.

The paginated list of installed webhooks.
*/
type GetRepositoriesWorkspaceRepoSlugHooksOK struct {
	Payload *models.PaginatedWebhookSubscriptions
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/hooks][%d] getRepositoriesWorkspaceRepoSlugHooksOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksOK) GetPayload() *models.PaginatedWebhookSubscriptions {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedWebhookSubscriptions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugHooksForbidden creates a GetRepositoriesWorkspaceRepoSlugHooksForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugHooksForbidden() *GetRepositoriesWorkspaceRepoSlugHooksForbidden {
	return &GetRepositoriesWorkspaceRepoSlugHooksForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugHooksForbidden handles this case with default header values.

If the authenticated user does not have permission to access the webhooks.
*/
type GetRepositoriesWorkspaceRepoSlugHooksForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/hooks][%d] getRepositoriesWorkspaceRepoSlugHooksForbidden  %+v", 403, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugHooksNotFound creates a GetRepositoriesWorkspaceRepoSlugHooksNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugHooksNotFound() *GetRepositoriesWorkspaceRepoSlugHooksNotFound {
	return &GetRepositoriesWorkspaceRepoSlugHooksNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugHooksNotFound handles this case with default header values.

If the repository does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugHooksNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/hooks][%d] getRepositoriesWorkspaceRepoSlugHooksNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
