// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugReader is a Reader for the GetRepositoriesWorkspaceRepoSlug structure.
type GetRepositoriesWorkspaceRepoSlugReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugOK creates a GetRepositoriesWorkspaceRepoSlugOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugOK() *GetRepositoriesWorkspaceRepoSlugOK {
	return &GetRepositoriesWorkspaceRepoSlugOK{}
}

/*GetRepositoriesWorkspaceRepoSlugOK handles this case with default header values.

The repository object.
*/
type GetRepositoriesWorkspaceRepoSlugOK struct {
	Payload *models.Repository
}

func (o *GetRepositoriesWorkspaceRepoSlugOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}][%d] getRepositoriesWorkspaceRepoSlugOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugOK) GetPayload() *models.Repository {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Repository)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugForbidden creates a GetRepositoriesWorkspaceRepoSlugForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugForbidden() *GetRepositoriesWorkspaceRepoSlugForbidden {
	return &GetRepositoriesWorkspaceRepoSlugForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugForbidden handles this case with default header values.

If the repository is private and the authenticated user does not have access to it.
*/
type GetRepositoriesWorkspaceRepoSlugForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}][%d] getRepositoriesWorkspaceRepoSlugForbidden  %+v", 403, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugNotFound creates a GetRepositoriesWorkspaceRepoSlugNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugNotFound() *GetRepositoriesWorkspaceRepoSlugNotFound {
	return &GetRepositoriesWorkspaceRepoSlugNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugNotFound handles this case with default header values.

If no repository exists at this location.
*/
type GetRepositoriesWorkspaceRepoSlugNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}][%d] getRepositoriesWorkspaceRepoSlugNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
