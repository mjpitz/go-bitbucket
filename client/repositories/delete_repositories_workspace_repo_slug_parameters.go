// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteRepositoriesWorkspaceRepoSlugParams creates a new DeleteRepositoriesWorkspaceRepoSlugParams object
// with the default values initialized.
func NewDeleteRepositoriesWorkspaceRepoSlugParams() *DeleteRepositoriesWorkspaceRepoSlugParams {
	var ()
	return &DeleteRepositoriesWorkspaceRepoSlugParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugParamsWithTimeout creates a new DeleteRepositoriesWorkspaceRepoSlugParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteRepositoriesWorkspaceRepoSlugParamsWithTimeout(timeout time.Duration) *DeleteRepositoriesWorkspaceRepoSlugParams {
	var ()
	return &DeleteRepositoriesWorkspaceRepoSlugParams{

		timeout: timeout,
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugParamsWithContext creates a new DeleteRepositoriesWorkspaceRepoSlugParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteRepositoriesWorkspaceRepoSlugParamsWithContext(ctx context.Context) *DeleteRepositoriesWorkspaceRepoSlugParams {
	var ()
	return &DeleteRepositoriesWorkspaceRepoSlugParams{

		Context: ctx,
	}
}

// NewDeleteRepositoriesWorkspaceRepoSlugParamsWithHTTPClient creates a new DeleteRepositoriesWorkspaceRepoSlugParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteRepositoriesWorkspaceRepoSlugParamsWithHTTPClient(client *http.Client) *DeleteRepositoriesWorkspaceRepoSlugParams {
	var ()
	return &DeleteRepositoriesWorkspaceRepoSlugParams{
		HTTPClient: client,
	}
}

/*DeleteRepositoriesWorkspaceRepoSlugParams contains all the parameters to send to the API endpoint
for the delete repositories workspace repo slug operation typically these are written to a http.Request
*/
type DeleteRepositoriesWorkspaceRepoSlugParams struct {

	/*RedirectTo
	  If a repository has been moved to a new location, use this parameter to
	show users a friendly message in the Bitbucket UI that the repository
	has moved to a new location. However, a GET to this endpoint will still
	return a 404.


	*/
	RedirectTo *string
	/*RepoSlug
	  This can either be the repository slug or the UUID of the repository,
	surrounded by curly-braces, for example: `{repository UUID}`.


	*/
	RepoSlug string
	/*Workspace
	  This can either be the workspace ID (slug) or the workspace UUID
	surrounded by curly-braces, for example: `{workspace UUID}`.


	*/
	Workspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) WithTimeout(timeout time.Duration) *DeleteRepositoriesWorkspaceRepoSlugParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) WithContext(ctx context.Context) *DeleteRepositoriesWorkspaceRepoSlugParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) WithHTTPClient(client *http.Client) *DeleteRepositoriesWorkspaceRepoSlugParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRedirectTo adds the redirectTo to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) WithRedirectTo(redirectTo *string) *DeleteRepositoriesWorkspaceRepoSlugParams {
	o.SetRedirectTo(redirectTo)
	return o
}

// SetRedirectTo adds the redirectTo to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) SetRedirectTo(redirectTo *string) {
	o.RedirectTo = redirectTo
}

// WithRepoSlug adds the repoSlug to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) WithRepoSlug(repoSlug string) *DeleteRepositoriesWorkspaceRepoSlugParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithWorkspace adds the workspace to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) WithWorkspace(workspace string) *DeleteRepositoriesWorkspaceRepoSlugParams {
	o.SetWorkspace(workspace)
	return o
}

// SetWorkspace adds the workspace to the delete repositories workspace repo slug params
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) SetWorkspace(workspace string) {
	o.Workspace = workspace
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRepositoriesWorkspaceRepoSlugParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RedirectTo != nil {

		// query param redirect_to
		var qrRedirectTo string
		if o.RedirectTo != nil {
			qrRedirectTo = *o.RedirectTo
		}
		qRedirectTo := qrRedirectTo
		if qRedirectTo != "" {
			if err := r.SetQueryParam("redirect_to", qRedirectTo); err != nil {
				return err
			}
		}

	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	// path param workspace
	if err := r.SetPathParam("workspace", o.Workspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
