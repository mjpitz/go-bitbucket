// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesReader is a Reader for the GetRepositoriesWorkspaceRepoSlugCommitNodeStatuses structure.
type GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK creates a GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK() *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK {
	return &GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK{}
}

/*GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK handles this case with default header values.

A paginated list of all commit statuses for this commit.
*/
type GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK struct {
	Payload *models.PaginatedCommitstatuses
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/commit/{node}/statuses][%d] getRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK) GetPayload() *models.PaginatedCommitstatuses {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedCommitstatuses)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized creates a GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized with default headers values
func NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized() *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized {
	return &GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized{}
}

/*GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized handles this case with default header values.

If the repository is private and the request was not authenticated.
*/
type GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized struct {
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/commit/{node}/statuses][%d] getRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized ", 401)
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound creates a GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound() *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound {
	return &GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound handles this case with default header values.

If the repository or commit does not exist
*/
type GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/commit/{node}/statuses][%d] getRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
