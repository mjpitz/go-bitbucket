// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new repositories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repositories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteRepositoriesWorkspaceRepoSlug(params *DeleteRepositoriesWorkspaceRepoSlugParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRepositoriesWorkspaceRepoSlugNoContent, error)

	DeleteRepositoriesWorkspaceRepoSlugHooksUID(params *DeleteRepositoriesWorkspaceRepoSlugHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRepositoriesWorkspaceRepoSlugHooksUIDNoContent, error)

	GetRepositories(params *GetRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesOK, error)

	GetRepositoriesWorkspace(params *GetRepositoriesWorkspaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceOK, error)

	GetRepositoriesWorkspaceRepoSlug(params *GetRepositoriesWorkspaceRepoSlugParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugOK, error)

	GetRepositoriesWorkspaceRepoSlugCommitNodeStatuses(params *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK, error)

	GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey(params *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK, error)

	GetRepositoriesWorkspaceRepoSlugForks(params *GetRepositoriesWorkspaceRepoSlugForksParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugForksOK, error)

	GetRepositoriesWorkspaceRepoSlugHooks(params *GetRepositoriesWorkspaceRepoSlugHooksParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugHooksOK, error)

	GetRepositoriesWorkspaceRepoSlugHooksUID(params *GetRepositoriesWorkspaceRepoSlugHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugHooksUIDOK, error)

	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatuses(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesOK, error)

	GetRepositoriesWorkspaceRepoSlugWatchers(params *GetRepositoriesWorkspaceRepoSlugWatchersParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugWatchersOK, error)

	GetUserPermissionsRepositories(params *GetUserPermissionsRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPermissionsRepositoriesOK, error)

	PostRepositoriesWorkspaceRepoSlug(params *PostRepositoriesWorkspaceRepoSlugParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugOK, error)

	PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuild(params *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated, error)

	PostRepositoriesWorkspaceRepoSlugForks(params *PostRepositoriesWorkspaceRepoSlugForksParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugForksCreated, error)

	PostRepositoriesWorkspaceRepoSlugHooks(params *PostRepositoriesWorkspaceRepoSlugHooksParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugHooksCreated, error)

	PutRepositoriesWorkspaceRepoSlug(params *PutRepositoriesWorkspaceRepoSlugParams, authInfo runtime.ClientAuthInfoWriter) (*PutRepositoriesWorkspaceRepoSlugOK, *PutRepositoriesWorkspaceRepoSlugCreated, error)

	PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey(params *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyParams, authInfo runtime.ClientAuthInfoWriter) (*PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK, error)

	PutRepositoriesWorkspaceRepoSlugHooksUID(params *PutRepositoriesWorkspaceRepoSlugHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutRepositoriesWorkspaceRepoSlugHooksUIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteRepositoriesWorkspaceRepoSlug Deletes the repository. This is an irreversible operation.

This does not affect its forks.
*/
func (a *Client) DeleteRepositoriesWorkspaceRepoSlug(params *DeleteRepositoriesWorkspaceRepoSlugParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRepositoriesWorkspaceRepoSlugNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoriesWorkspaceRepoSlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRepositoriesWorkspaceRepoSlug",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoriesWorkspaceRepoSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoriesWorkspaceRepoSlugNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRepositoriesWorkspaceRepoSlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRepositoriesWorkspaceRepoSlugHooksUID Deletes the specified webhook subscription from the given
repository.
*/
func (a *Client) DeleteRepositoriesWorkspaceRepoSlugHooksUID(params *DeleteRepositoriesWorkspaceRepoSlugHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRepositoriesWorkspaceRepoSlugHooksUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoriesWorkspaceRepoSlugHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRepositoriesWorkspaceRepoSlugHooksUID",
		Method:             "DELETE",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoriesWorkspaceRepoSlugHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoriesWorkspaceRepoSlugHooksUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRepositoriesWorkspaceRepoSlugHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositories Returns a paginated list of all public repositories.

This endpoint also supports filtering and sorting of the results. See
[filtering and sorting](../meta/filtering) for more details.
*/
func (a *Client) GetRepositories(params *GetRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositories",
		Method:             "GET",
		PathPattern:        "/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspace Returns a paginated list of all repositories owned by the specified
account or UUID.

The result can be narrowed down based on the authenticated user's role.

E.g. with `?role=contributor`, only those repositories that the
authenticated user has write access to are returned (this includes any
repo the user is an admin on, as that implies write access).

This endpoint also supports filtering and sorting of the results. See
[filtering and sorting](../../meta/filtering) for more details.
*/
func (a *Client) GetRepositoriesWorkspace(params *GetRepositoriesWorkspaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspace",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlug Returns the object describing this repository.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlug(params *GetRepositoriesWorkspaceRepoSlugParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlug",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugCommitNodeStatuses Returns all statuses (e.g. build results) for a specific commit.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugCommitNodeStatuses(params *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugCommitNodeStatuses",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{node}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugCommitNodeStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey Returns the specified build status for a commit.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey(params *GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{node}/statuses/build/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugForks Returns a paginated list of all the forks of the specified
repository.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugForks(params *GetRepositoriesWorkspaceRepoSlugForksParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugForksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugForksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugForks",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/forks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugForksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugForksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugForks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugHooks Returns a paginated list of webhooks installed on this repository.

The teams endpoint for projects has been deprecated, and you should
ensure you are using the workspaces endpoint.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugHooks(params *GetRepositoriesWorkspaceRepoSlugHooksParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugHooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugHooks",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugHooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugHooksUID Returns the webhook with the specified id installed on the specified
repository.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugHooksUID(params *GetRepositoriesWorkspaceRepoSlugHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugHooksUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugHooksUID",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugHooksUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatuses Returns all statuses (e.g. build results) for the given pull
request.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatuses(params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatuses",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIDStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugWatchers Returns a paginated list of all the watchers on the specified
repository.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugWatchers(params *GetRepositoriesWorkspaceRepoSlugWatchersParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugWatchersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugWatchersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugWatchers",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/watchers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugWatchersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugWatchersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugWatchers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserPermissionsRepositories Returns an object for each repository the caller has explicit access
to and their effective permission — the highest level of permission the
caller has. This does not return public repositories that the user was
not granted any specific permission in, and does not distinguish between
direct and indirect privileges.

Permissions can be:

* `admin`
* `write`
* `read`

Example:

```
$ curl https://api.bitbucket.org/2.0/user/permissions/repositories

{
  "pagelen": 10,
  "values": [
    {
      "type": "repository_permission",
      "user": {
        "type": "user",
        "nickname": "evzijst",
        "display_name": "Erik van Zijst",
        "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}"
      },
      "repository": {
        "type": "repository",
        "name": "geordi",
        "full_name": "bitbucket/geordi",
        "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
      },
      "permission": "admin"
    }
  ],
  "page": 1,
  "size": 1
}
```

Results may be further [filtered or sorted](../../../meta/filtering) by
repository or permission by adding the following query string
parameters:

* `q=repository.name="geordi"` or `q=permission>"read"`
* `sort=repository.name`

Note that the query parameter values need to be URL escaped so that `=`
would become `%3D`.
*/
func (a *Client) GetUserPermissionsRepositories(params *GetUserPermissionsRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPermissionsRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPermissionsRepositoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserPermissionsRepositories",
		Method:             "GET",
		PathPattern:        "/user/permissions/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPermissionsRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPermissionsRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserPermissionsRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRepositoriesWorkspaceRepoSlug Creates a new repository.

Note: In order to set the project for the newly created repository,
pass in either the project key or the project UUID as part of the
request body as shown in the examples below:

```
$ curl -X POST -H "Content-Type: application/json" -d '{
    "scm": "git",
    "project": {
        "key": "MARS"
    }
}' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding
```

or

```
$ curl -X POST -H "Content-Type: application/json" -d '{
    "scm": "git",
    "project": {
        "key": "{ba516952-992a-4c2d-acbd-17d502922f96}"
    }
}' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding
```

The project must only be assigned for repositories belonging to a team.
If the repository owner is a team and the project is not provided, the
repository is automatically assigned to the oldest project in the team.

Note: In the examples above, the username `teamsinspace`,
and/or the repository name `hablanding` can be replaced by UUIDs.
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlug(params *PostRepositoriesWorkspaceRepoSlugParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlug",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesWorkspaceRepoSlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesWorkspaceRepoSlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuild Creates a new build status against the specified commit.

If the specified key already exists, the existing status object will
be overwritten.

When creating a new commit status, you can use a URI template for the URL.
Templates are URLs that contain variable names that Bitbucket will
evaluate at runtime whenever the URL is displayed anywhere similar to
parameter substitution in
[Bitbucket Connect](https://developer.atlassian.com/bitbucket/concepts/context-parameters.html).
For example, one could use `https://foo.com/builds/{repository.full_name}`
which Bitbucket will turn into `https://foo.com/builds/foo/bar` at render time.
The context variables available are `repository` and `commit`.
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuild(params *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuild",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{node}/statuses/build",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRepositoriesWorkspaceRepoSlugForks Creates a new fork of the specified repository.

## Forking a repository

To create a fork, specify the workspace explicitly as part of the
request body:

```
$ curl -X POST -u jdoe https://api.bitbucket.org/2.0/repositories/atlassian/bbql/forks \
  -H 'Content-Type: application/json' -d '{
    "name": "bbql_fork",
    "workspace": {
      "slug": "atlassian"
    }
}'
```

To fork a repository into the same workspace, also specify a new `name`.

When you specify a value for `name`, it will also affect the `slug`.
The `slug` is reflected in the repository URL of the new fork. It is
derived from `name` by substituting non-ASCII characters, removes
whitespace, and changes characters to lower case. For example,
`My repo` would turn into `my_repo`.

You need contributor access to create new forks within a workspace.


## Change the properties of a new fork

By default the fork inherits most of its properties from the parent.
However, since the optional POST body document follows the normal
`repository` JSON schema and you can override the new fork's
properties.

Properties that can be overridden include:

* description
* fork_policy
* language
* mainbranch
* is_private (note that a private repo's fork_policy might prohibit
  the creation of public forks, in which `is_private=False` would fail)
* has_issues (to initialize or disable the new repo's issue tracker --
  note that the actual contents of the parent repository's issue
  tracker are not copied during forking)
* has_wiki (to initialize or disable the new repo's wiki --
  note that the actual contents of the parent repository's wiki are not
  copied during forking)
* project (when forking into a private project, the fork's `is_private`
  must be `true`)

Properties that cannot be modified include:

* scm
* parent
* full_name
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugForks(params *PostRepositoriesWorkspaceRepoSlugForksParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugForksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugForksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugForks",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/forks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugForksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesWorkspaceRepoSlugForksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesWorkspaceRepoSlugForks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRepositoriesWorkspaceRepoSlugHooks Creates a new webhook on the specified repository.

The teams endpoint for projects has been deprecated, and you should
ensure you are using the workspaces endpoint.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).

Example:

```
$ curl -X POST -u credentials -H 'Content-Type: application/json'           https://api.bitbucket.org/2.0/repositories/username/slug/hooks           -d '
    {
      "description": "Webhook Description",
      "url": "https://example.com/",
      "active": true,
      "events": [
        "repo:push",
        "issue:created",
        "issue:updated"
      ]
    }'
```

Note that this call requires the webhook scope, as well as any scope
that applies to the events that the webhook subscribes to. In the
example above that means: `webhook`, `repository` and `issue`.

Also note that the `url` must properly resolve and cannot be an
internal, non-routed address.
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugHooks(params *PostRepositoriesWorkspaceRepoSlugHooksParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugHooksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugHooks",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesWorkspaceRepoSlugHooksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesWorkspaceRepoSlugHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutRepositoriesWorkspaceRepoSlug Since this endpoint can be used to both update and to create a
repository, the request body depends on the intent.

### Creation

See the POST documentation for the repository endpoint for an example
of the request body.

### Update

Note: Changing the `name` of the repository will cause the location to
be changed. This is because the URL of the repo is derived from the
name (a process called slugification). In such a scenario, it is
possible for the request to fail if the newly created slug conflicts
with an existing repository's slug. But if there is no conflict,
the new location will be returned in the `Location` header of the
response.
*/
func (a *Client) PutRepositoriesWorkspaceRepoSlug(params *PutRepositoriesWorkspaceRepoSlugParams, authInfo runtime.ClientAuthInfoWriter) (*PutRepositoriesWorkspaceRepoSlugOK, *PutRepositoriesWorkspaceRepoSlugCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesWorkspaceRepoSlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutRepositoriesWorkspaceRepoSlug",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRepositoriesWorkspaceRepoSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PutRepositoriesWorkspaceRepoSlugOK:
		return value, nil, nil
	case *PutRepositoriesWorkspaceRepoSlugCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey Used to update the current status of a build status object on the
specific commit.

This operation can also be used to change other properties of the
build status:

* `state`
* `name`
* `description`
* `url`
* `refname`

The `key` cannot be changed.
*/
func (a *Client) PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey(params *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyParams, authInfo runtime.ClientAuthInfoWriter) (*PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/commit/{node}/statuses/build/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutRepositoriesWorkspaceRepoSlugHooksUID Updates the specified webhook subscription.

The following properties can be mutated:

* `description`
* `url`
* `active`
* `events`
*/
func (a *Client) PutRepositoriesWorkspaceRepoSlugHooksUID(params *PutRepositoriesWorkspaceRepoSlugHooksUIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutRepositoriesWorkspaceRepoSlugHooksUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRepositoriesWorkspaceRepoSlugHooksUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutRepositoriesWorkspaceRepoSlugHooksUID",
		Method:             "PUT",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/hooks/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRepositoriesWorkspaceRepoSlugHooksUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRepositoriesWorkspaceRepoSlugHooksUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutRepositoriesWorkspaceRepoSlugHooksUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
