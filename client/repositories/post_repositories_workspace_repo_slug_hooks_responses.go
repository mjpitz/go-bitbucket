// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostRepositoriesWorkspaceRepoSlugHooksReader is a Reader for the PostRepositoriesWorkspaceRepoSlugHooks structure.
type PostRepositoriesWorkspaceRepoSlugHooksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesWorkspaceRepoSlugHooksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostRepositoriesWorkspaceRepoSlugHooksCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPostRepositoriesWorkspaceRepoSlugHooksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRepositoriesWorkspaceRepoSlugHooksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRepositoriesWorkspaceRepoSlugHooksCreated creates a PostRepositoriesWorkspaceRepoSlugHooksCreated with default headers values
func NewPostRepositoriesWorkspaceRepoSlugHooksCreated() *PostRepositoriesWorkspaceRepoSlugHooksCreated {
	return &PostRepositoriesWorkspaceRepoSlugHooksCreated{}
}

/*PostRepositoriesWorkspaceRepoSlugHooksCreated handles this case with default header values.

If the webhook was registered successfully.
*/
type PostRepositoriesWorkspaceRepoSlugHooksCreated struct {
	/*The URL of new newly created webhook.
	 */
	Location string

	Payload *models.WebhookSubscription
}

func (o *PostRepositoriesWorkspaceRepoSlugHooksCreated) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/hooks][%d] postRepositoriesWorkspaceRepoSlugHooksCreated  %+v", 201, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugHooksCreated) GetPayload() *models.WebhookSubscription {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugHooksCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.WebhookSubscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugHooksForbidden creates a PostRepositoriesWorkspaceRepoSlugHooksForbidden with default headers values
func NewPostRepositoriesWorkspaceRepoSlugHooksForbidden() *PostRepositoriesWorkspaceRepoSlugHooksForbidden {
	return &PostRepositoriesWorkspaceRepoSlugHooksForbidden{}
}

/*PostRepositoriesWorkspaceRepoSlugHooksForbidden handles this case with default header values.

If the authenticated user does not have permission to install webhooks on the specified repository.
*/
type PostRepositoriesWorkspaceRepoSlugHooksForbidden struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugHooksForbidden) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/hooks][%d] postRepositoriesWorkspaceRepoSlugHooksForbidden  %+v", 403, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugHooksForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugHooksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugHooksNotFound creates a PostRepositoriesWorkspaceRepoSlugHooksNotFound with default headers values
func NewPostRepositoriesWorkspaceRepoSlugHooksNotFound() *PostRepositoriesWorkspaceRepoSlugHooksNotFound {
	return &PostRepositoriesWorkspaceRepoSlugHooksNotFound{}
}

/*PostRepositoriesWorkspaceRepoSlugHooksNotFound handles this case with default header values.

If the repository does not exist.
*/
type PostRepositoriesWorkspaceRepoSlugHooksNotFound struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugHooksNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/hooks][%d] postRepositoriesWorkspaceRepoSlugHooksNotFound  %+v", 404, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugHooksNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugHooksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
