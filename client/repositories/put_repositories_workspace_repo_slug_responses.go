// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutRepositoriesWorkspaceRepoSlugReader is a Reader for the PutRepositoriesWorkspaceRepoSlug structure.
type PutRepositoriesWorkspaceRepoSlugReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesWorkspaceRepoSlugReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRepositoriesWorkspaceRepoSlugOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPutRepositoriesWorkspaceRepoSlugCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRepositoriesWorkspaceRepoSlugBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRepositoriesWorkspaceRepoSlugUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRepositoriesWorkspaceRepoSlugOK creates a PutRepositoriesWorkspaceRepoSlugOK with default headers values
func NewPutRepositoriesWorkspaceRepoSlugOK() *PutRepositoriesWorkspaceRepoSlugOK {
	return &PutRepositoriesWorkspaceRepoSlugOK{}
}

/*PutRepositoriesWorkspaceRepoSlugOK handles this case with default header values.

The existing repository has been updated
*/
type PutRepositoriesWorkspaceRepoSlugOK struct {
	/*The location of the repository. This header is only
	provided when the repository's name is changed.
	*/
	Location string

	Payload *models.Repository
}

func (o *PutRepositoriesWorkspaceRepoSlugOK) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}][%d] putRepositoriesWorkspaceRepoSlugOK  %+v", 200, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugOK) GetPayload() *models.Repository {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.Repository)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugCreated creates a PutRepositoriesWorkspaceRepoSlugCreated with default headers values
func NewPutRepositoriesWorkspaceRepoSlugCreated() *PutRepositoriesWorkspaceRepoSlugCreated {
	return &PutRepositoriesWorkspaceRepoSlugCreated{}
}

/*PutRepositoriesWorkspaceRepoSlugCreated handles this case with default header values.

A new repository has been created
*/
type PutRepositoriesWorkspaceRepoSlugCreated struct {
	/*The location of the newly created repository
	 */
	Location string

	Payload *models.Repository
}

func (o *PutRepositoriesWorkspaceRepoSlugCreated) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}][%d] putRepositoriesWorkspaceRepoSlugCreated  %+v", 201, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugCreated) GetPayload() *models.Repository {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	o.Payload = new(models.Repository)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugBadRequest creates a PutRepositoriesWorkspaceRepoSlugBadRequest with default headers values
func NewPutRepositoriesWorkspaceRepoSlugBadRequest() *PutRepositoriesWorkspaceRepoSlugBadRequest {
	return &PutRepositoriesWorkspaceRepoSlugBadRequest{}
}

/*PutRepositoriesWorkspaceRepoSlugBadRequest handles this case with default header values.

If the input document was invalid, or if the caller lacks the privilege to create repositories under the targeted account.
*/
type PutRepositoriesWorkspaceRepoSlugBadRequest struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugBadRequest) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}][%d] putRepositoriesWorkspaceRepoSlugBadRequest  %+v", 400, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugUnauthorized creates a PutRepositoriesWorkspaceRepoSlugUnauthorized with default headers values
func NewPutRepositoriesWorkspaceRepoSlugUnauthorized() *PutRepositoriesWorkspaceRepoSlugUnauthorized {
	return &PutRepositoriesWorkspaceRepoSlugUnauthorized{}
}

/*PutRepositoriesWorkspaceRepoSlugUnauthorized handles this case with default header values.

If the request was not authenticated.
*/
type PutRepositoriesWorkspaceRepoSlugUnauthorized struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}][%d] putRepositoriesWorkspaceRepoSlugUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
