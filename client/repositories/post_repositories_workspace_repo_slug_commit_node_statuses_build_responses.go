// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildReader is a Reader for the PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuild structure.
type PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated creates a PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated with default headers values
func NewPostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated() *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated {
	return &PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated{}
}

/*PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated handles this case with default header values.

The newly created build status object.
*/
type PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated struct {
	Payload *models.Commitstatus
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/commit/{node}/statuses/build][%d] postRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated  %+v", 201, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated) GetPayload() *models.Commitstatus {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Commitstatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized creates a PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized with default headers values
func NewPostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized() *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized {
	return &PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized{}
}

/*PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized handles this case with default header values.

If the repository is private and the request was not authenticated.
*/
type PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized struct {
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/commit/{node}/statuses/build][%d] postRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized ", 401)
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound creates a PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound with default headers values
func NewPostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound() *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound {
	return &PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound{}
}

/*PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound handles this case with default header values.

If the repository, commit, or build status key does not exist
*/
type PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/commit/{node}/statuses/build][%d] postRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound  %+v", 404, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
