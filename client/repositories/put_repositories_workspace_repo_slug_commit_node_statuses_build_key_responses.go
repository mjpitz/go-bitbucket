// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyReader is a Reader for the PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKey structure.
type PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK creates a PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK with default headers values
func NewPutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK() *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK {
	return &PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK{}
}

/*PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK handles this case with default header values.

The updated build status object.
*/
type PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK struct {
	Payload *models.Commitstatus
}

func (o *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/commit/{node}/statuses/build/{key}][%d] putRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK  %+v", 200, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK) GetPayload() *models.Commitstatus {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Commitstatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized creates a PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized with default headers values
func NewPutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized() *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized {
	return &PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized{}
}

/*PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized handles this case with default header values.

If the repository is private and the request was not authenticated.
*/
type PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized struct {
}

func (o *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/commit/{node}/statuses/build/{key}][%d] putRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized ", 401)
}

func (o *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound creates a PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound with default headers values
func NewPutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound() *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound {
	return &PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound{}
}

/*PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound handles this case with default header values.

If the repository or build does not exist
*/
type PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound struct {
	Payload *models.Error
}

func (o *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound) Error() string {
	return fmt.Sprintf("[PUT /repositories/{workspace}/{repo_slug}/commit/{node}/statuses/build/{key}][%d] putRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound  %+v", 404, o.Payload)
}

func (o *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutRepositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
