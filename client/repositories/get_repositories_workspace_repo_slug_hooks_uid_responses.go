// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugHooksUIDReader is a Reader for the GetRepositoriesWorkspaceRepoSlugHooksUID structure.
type GetRepositoriesWorkspaceRepoSlugHooksUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugHooksUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesWorkspaceRepoSlugHooksUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugHooksUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugHooksUIDOK creates a GetRepositoriesWorkspaceRepoSlugHooksUIDOK with default headers values
func NewGetRepositoriesWorkspaceRepoSlugHooksUIDOK() *GetRepositoriesWorkspaceRepoSlugHooksUIDOK {
	return &GetRepositoriesWorkspaceRepoSlugHooksUIDOK{}
}

/*GetRepositoriesWorkspaceRepoSlugHooksUIDOK handles this case with default header values.

The webhook subscription object.
*/
type GetRepositoriesWorkspaceRepoSlugHooksUIDOK struct {
	Payload *models.WebhookSubscription
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksUIDOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/hooks/{uid}][%d] getRepositoriesWorkspaceRepoSlugHooksUidOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksUIDOK) GetPayload() *models.WebhookSubscription {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebhookSubscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugHooksUIDNotFound creates a GetRepositoriesWorkspaceRepoSlugHooksUIDNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugHooksUIDNotFound() *GetRepositoriesWorkspaceRepoSlugHooksUIDNotFound {
	return &GetRepositoriesWorkspaceRepoSlugHooksUIDNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugHooksUIDNotFound handles this case with default header values.

If the webhook or repository does not exist.
*/
type GetRepositoriesWorkspaceRepoSlugHooksUIDNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksUIDNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/hooks/{uid}][%d] getRepositoriesWorkspaceRepoSlugHooksUidNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksUIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugHooksUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
