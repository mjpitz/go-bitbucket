// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRepositoriesParams creates a new GetRepositoriesParams object
// with the default values initialized.
func NewGetRepositoriesParams() *GetRepositoriesParams {
	var ()
	return &GetRepositoriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoriesParamsWithTimeout creates a new GetRepositoriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepositoriesParamsWithTimeout(timeout time.Duration) *GetRepositoriesParams {
	var ()
	return &GetRepositoriesParams{

		timeout: timeout,
	}
}

// NewGetRepositoriesParamsWithContext creates a new GetRepositoriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepositoriesParamsWithContext(ctx context.Context) *GetRepositoriesParams {
	var ()
	return &GetRepositoriesParams{

		Context: ctx,
	}
}

// NewGetRepositoriesParamsWithHTTPClient creates a new GetRepositoriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepositoriesParamsWithHTTPClient(client *http.Client) *GetRepositoriesParams {
	var ()
	return &GetRepositoriesParams{
		HTTPClient: client,
	}
}

/*GetRepositoriesParams contains all the parameters to send to the API endpoint
for the get repositories operation typically these are written to a http.Request
*/
type GetRepositoriesParams struct {

	/*After
	  Filter the results to include only repositories created on or
	after this [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)
	 timestamp. Example: `YYYY-MM-DDTHH:mm:ss.sssZ`

	*/
	After *string
	/*Q
	  Query string to narrow down the response as per [filtering and sorting](../meta/filtering).
	`role` parameter must also be specified.


	*/
	Q *string
	/*Role
	  Filters the result based on the authenticated user's role on each repository.

	* **member**: returns repositories to which the user has explicit read access
	* **contributor**: returns repositories to which the user has explicit write access
	* **admin**: returns repositories to which the user has explicit administrator access
	* **owner**: returns all repositories owned by the current user


	*/
	Role *string
	/*Sort
	  Field by which the results should be sorted as per [filtering and sorting](../meta/filtering).


	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repositories params
func (o *GetRepositoriesParams) WithTimeout(timeout time.Duration) *GetRepositoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repositories params
func (o *GetRepositoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repositories params
func (o *GetRepositoriesParams) WithContext(ctx context.Context) *GetRepositoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repositories params
func (o *GetRepositoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repositories params
func (o *GetRepositoriesParams) WithHTTPClient(client *http.Client) *GetRepositoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repositories params
func (o *GetRepositoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get repositories params
func (o *GetRepositoriesParams) WithAfter(after *string) *GetRepositoriesParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get repositories params
func (o *GetRepositoriesParams) SetAfter(after *string) {
	o.After = after
}

// WithQ adds the q to the get repositories params
func (o *GetRepositoriesParams) WithQ(q *string) *GetRepositoriesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get repositories params
func (o *GetRepositoriesParams) SetQ(q *string) {
	o.Q = q
}

// WithRole adds the role to the get repositories params
func (o *GetRepositoriesParams) WithRole(role *string) *GetRepositoriesParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the get repositories params
func (o *GetRepositoriesParams) SetRole(role *string) {
	o.Role = role
}

// WithSort adds the sort to the get repositories params
func (o *GetRepositoriesParams) WithSort(sort *string) *GetRepositoriesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get repositories params
func (o *GetRepositoriesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string
		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {
			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Role != nil {

		// query param role
		var qrRole string
		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {
			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
