// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipReader is a Reader for the GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZip structure.
type GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted creates a GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted() *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted {
	return &GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted handles this case with default header values.

Export job accepted
*/
type GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted struct {
	Payload *models.IssueJobStatus
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/export/{repo_name}-issues-{task_id}.zip][%d] getRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipAccepted  %+v", 202, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted) GetPayload() *models.IssueJobStatus {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IssueJobStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized creates a GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized() *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized {
	return &GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized handles this case with default header values.

The request wasn't authenticated properly
*/
type GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/export/{repo_name}-issues-{task_id}.zip][%d] getRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden creates a GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden() *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden {
	return &GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden handles this case with default header values.

When the authenticated user does not have admin permission on the repo
*/
type GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/export/{repo_name}-issues-{task_id}.zip][%d] getRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipForbidden  %+v", 403, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound creates a GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound with default headers values
func NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound() *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound {
	return &GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound{}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound handles this case with default header values.

No export job has begun
*/
type GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{workspace}/{repo_slug}/issues/export/{repo_name}-issues-{task_id}.zip][%d] getRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
