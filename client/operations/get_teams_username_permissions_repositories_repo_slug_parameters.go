// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetTeamsUsernamePermissionsRepositoriesRepoSlugParams creates a new GetTeamsUsernamePermissionsRepositoriesRepoSlugParams object
// with the default values initialized.
func NewGetTeamsUsernamePermissionsRepositoriesRepoSlugParams() *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	var ()
	return &GetTeamsUsernamePermissionsRepositoriesRepoSlugParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTeamsUsernamePermissionsRepositoriesRepoSlugParamsWithTimeout creates a new GetTeamsUsernamePermissionsRepositoriesRepoSlugParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTeamsUsernamePermissionsRepositoriesRepoSlugParamsWithTimeout(timeout time.Duration) *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	var ()
	return &GetTeamsUsernamePermissionsRepositoriesRepoSlugParams{

		timeout: timeout,
	}
}

// NewGetTeamsUsernamePermissionsRepositoriesRepoSlugParamsWithContext creates a new GetTeamsUsernamePermissionsRepositoriesRepoSlugParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTeamsUsernamePermissionsRepositoriesRepoSlugParamsWithContext(ctx context.Context) *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	var ()
	return &GetTeamsUsernamePermissionsRepositoriesRepoSlugParams{

		Context: ctx,
	}
}

// NewGetTeamsUsernamePermissionsRepositoriesRepoSlugParamsWithHTTPClient creates a new GetTeamsUsernamePermissionsRepositoriesRepoSlugParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTeamsUsernamePermissionsRepositoriesRepoSlugParamsWithHTTPClient(client *http.Client) *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	var ()
	return &GetTeamsUsernamePermissionsRepositoriesRepoSlugParams{
		HTTPClient: client,
	}
}

/*GetTeamsUsernamePermissionsRepositoriesRepoSlugParams contains all the parameters to send to the API endpoint
for the get teams username permissions repositories repo slug operation typically these are written to a http.Request
*/
type GetTeamsUsernamePermissionsRepositoriesRepoSlugParams struct {

	/*Q

	Query string to narrow down the response as per
	[filtering and sorting](../../../../meta/filtering).

	*/
	Q *string
	/*RepoSlug
	  This can either be the repository slug or the UUID of the repository,
	surrounded by curly-braces, for example: `{repository UUID}`.


	*/
	RepoSlug string
	/*Sort

	Name of a response property sort the result by as per
	[filtering and sorting](../../../../meta/filtering#query-sort).


	*/
	Sort *string
	/*Username
	  This can either be the username or the UUID of the account,
	surrounded by curly-braces, for example: `{account UUID}`. An account
	is either a team or user.


	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) WithTimeout(timeout time.Duration) *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) WithContext(ctx context.Context) *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) WithHTTPClient(client *http.Client) *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQ adds the q to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) WithQ(q *string) *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) SetQ(q *string) {
	o.Q = q
}

// WithRepoSlug adds the repoSlug to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) WithRepoSlug(repoSlug string) *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithSort adds the sort to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) WithSort(sort *string) *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithUsername adds the username to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) WithUsername(username string) *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get teams username permissions repositories repo slug params
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
