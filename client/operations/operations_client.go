// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetRepositoriesWorkspaceRepoSlugDiffstatSpec(params *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugDiffstatSpecOK, error)

	GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZip(params *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted, error)

	GetRepositoriesWorkspaceRepoSlugIssuesImport(params *GetRepositoriesWorkspaceRepoSlugIssuesImportParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugIssuesImportOK, *GetRepositoriesWorkspaceRepoSlugIssuesImportAccepted, error)

	GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUID(params *GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUIDParams) error

	GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReports(params *GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsParams) error

	GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCases(params *GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesParams) error

	GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasons(params *GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasonsParams) error

	GetTeamsUsernamePermissions(params *GetTeamsUsernamePermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernamePermissionsOK, error)

	GetTeamsUsernamePermissionsRepositories(params *GetTeamsUsernamePermissionsRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernamePermissionsRepositoriesOK, error)

	GetTeamsUsernamePermissionsRepositoriesRepoSlug(params *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernamePermissionsRepositoriesRepoSlugOK, error)

	GetUserPermissionsTeams(params *GetUserPermissionsTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPermissionsTeamsOK, error)

	PostRepositoriesWorkspaceRepoSlugIssuesExport(params *PostRepositoriesWorkspaceRepoSlugIssuesExportParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugIssuesExportAccepted, error)

	PostRepositoriesWorkspaceRepoSlugIssuesImport(params *PostRepositoriesWorkspaceRepoSlugIssuesImportParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetRepositoriesWorkspaceRepoSlugDiffstatSpec Returns the diff stat for the specified commit.

Diff stat responses contain a record for every path modified by the
commit and lists the number of lines added and removed for each file.


Example:
```
curl https://api.bitbucket.org/2.0/repositories/bitbucket/geordi/diffstat/d222fa2..e174964
{
    "pagelen": 500,
    "values": [
        {
            "type": "diffstat",
            "status": "modified",
            "lines_removed": 1,
            "lines_added": 2,
            "old": {
                "path": "setup.py",
                "escaped_path": "setup.py",
                "type": "commit_file",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/bitbucket/geordi/src/e1749643d655d7c7014001a6c0f58abaf42ad850/setup.py"
                    }
                }
            },
            "new": {
                "path": "setup.py",
                "escaped_path": "setup.py",
                "type": "commit_file",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/bitbucket/geordi/src/d222fa235229c55dad20b190b0b571adf737d5a6/setup.py"
                    }
                }
            }
        }
    ],
    "page": 1,
    "size": 1
}
```
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugDiffstatSpec(params *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugDiffstatSpecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugDiffstatSpec",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/diffstat/{spec}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugDiffstatSpecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugDiffstatSpecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugDiffstatSpec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZip This endpoint is used to poll for the progress of an issue export
job and return the zip file after the job is complete.
As long as the job is running, this will return a 200 response
with in the response body a description of the current status.

After the job has been scheduled, but before it starts executing, this
endpoint's response is:

{
 "type": "issue_job_status",
 "status": "ACCEPTED",
 "phase": "Initializing",
 "total": 0,
 "count": 0,
 "pct": 0
}


Then once it starts running, it becomes:

{
 "type": "issue_job_status",
 "status": "STARTED",
 "phase": "Attachments",
 "total": 15,
 "count": 11,
 "pct": 73
}

Once the job has successfully completed, it returns a stream of the zip file.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZip(params *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZip",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/issues/export/{repo_name}-issues-{task_id}.zip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZip: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugIssuesImport When using GET, this endpoint reports the status of the current import task. Request example:

```
$ curl -u <username> -X GET https://api.bitbucket.org/2.0/repositories/<owner_username>/<repo_slug>/issues/import
```

After the job has been scheduled, but before it starts executing, this endpoint's response is:

```
< HTTP/1.1 202 Accepted
{
    "type": "issue_job_status",
    "status": "PENDING",
    "phase": "Attachments",
    "total": 15,
    "count": 0,
    "percent": 0
}
```

Once it starts running, it is a 202 response with status STARTED and progress filled.

After it is finished, it becomes a 200 response with status SUCCESS or FAILURE.
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugIssuesImport(params *GetRepositoriesWorkspaceRepoSlugIssuesImportParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoriesWorkspaceRepoSlugIssuesImportOK, *GetRepositoriesWorkspaceRepoSlugIssuesImportAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugIssuesImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugIssuesImport",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/issues/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugIssuesImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetRepositoriesWorkspaceRepoSlugIssuesImportOK:
		return value, nil, nil
	case *GetRepositoriesWorkspaceRepoSlugIssuesImportAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUID get repositories workspace repo slug pipelines pipeline UUID steps step UUID logs log UUID API
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUID(params *GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUID",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/logs/{log_uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDLogsLogUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReports get repositories workspace repo slug pipelines pipeline UUID steps step UUID test reports API
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReports(params *GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReports",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCases get repositories workspace repo slug pipelines pipeline UUID steps step UUID test reports test cases API
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCases(params *GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCases",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports/test_cases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasons get repositories workspace repo slug pipelines pipeline UUID steps step UUID test reports test cases test case UUID test case reasons API
*/
func (a *Client) GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasons(params *GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasonsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasonsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasons",
		Method:             "GET",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports/test_cases/{test_case_uuid}/test_case_reasons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUUIDStepsStepUUIDTestReportsTestCasesTestCaseUUIDTestCaseReasonsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetTeamsUsernamePermissions Returns an object for each team permission a user on the team has.

This endpoint has been deprecated, and you should use the new workspaces endpoint.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/)."

Permissions returned are effective permissions — if a user is a member of
multiple groups with distinct roles, only the highest level is returned.

Permissions can be:

* `admin`
* `collaborator`

Only users with admin permission for the team may access this resource.

Example:

```
$ curl https://api.bitbucket.org/2.0/teams/atlassian_tutorial/permissions

{
  "pagelen": 10,
  "values": [
    {
      "permission": "admin",
      "type": "team_permission",
      "user": {
        "type": "user",
        "nickname": "evzijst",
        "display_name": "Erik van Zijst",
        "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}"
      },
      "team": {
        "display_name": "Atlassian Bitbucket",
        "uuid": "{4cc6108a-a241-4db0-96a5-64347ac04f87}"
      }
    },
    {
      "permission": "collaborator",
      "type": "team_permission",
      "user": {
        "type": "user",
        "nickname": "seanaty",
        "display_name": "Sean Conaty",
        "uuid": "{504c3b62-8120-4f0c-a7bc-87800b9d6f70}"
      },
      "team": {
        "display_name": "Atlassian Bitbucket",
        "uuid": "{4cc6108a-a241-4db0-96a5-64347ac04f87}"
      }
    }
  ],
  "page": 1,
  "size": 2
}
```

Results may be further [filtered or sorted](../../../meta/filtering) by
team, user, or permission by adding the following query string
parameters:

* `q=user.uuid="{d301aafa-d676-4ee0-88be-962be7417567}"` or `q=permission="admin"`
* `sort=team.display_name`

Note that the query parameter values need to be URL escaped so that `=`
would become `%3D`.
*/
func (a *Client) GetTeamsUsernamePermissions(params *GetTeamsUsernamePermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernamePermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsUsernamePermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsUsernamePermissions",
		Method:             "GET",
		PathPattern:        "/teams/{username}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsUsernamePermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsUsernamePermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsUsernamePermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsUsernamePermissionsRepositories Returns an object for each repository permission for all of a
team’s repositories.

This endpoint has been deprecated, and you should use the new workspaces endpoint.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/)."

If the username URL parameter refers to a user account instead of
a team account, an object containing the repository permissions
of all the username's repositories will be returned.

Permissions returned are effective permissions — the highest level of
permission the user has. This does not include public repositories that
users are not granted any specific permission in, and does not
distinguish between direct and indirect privileges.

Only users with admin permission for the team may access this resource.

Permissions can be:

* `admin`
* `write`
* `read`

Example:

```
$ curl https://api.bitbucket.org/2.0/teams/atlassian_tutorial/permissions/repositories

{
  "pagelen": 10,
  "values": [
    {
      "type": "repository_permission",
      "user": {
        "type": "user",
        "display_name": "Erik van Zijst",
        "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}"
      },
      "repository": {
        "type": "repository",
        "name": "geordi",
        "full_name": "bitbucket/geordi",
        "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
      },
      "permission": "admin"
    },
    {
      "type": "repository_permission",
      "user": {
        "type": "user",
        "display_name": "Sean Conaty",
        "uuid": "{504c3b62-8120-4f0c-a7bc-87800b9d6f70}"
      },
      "repository": {
        "type": "repository",
        "name": "geordi",
        "full_name": "bitbucket/geordi",
        "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
      },
      "permission": "write"
    }
  ],
  "page": 1,
  "size": 2
}
```

Results may be further [filtered or sorted](../../../../meta/filtering)
by repository, user, or permission by adding the following query string
parameters:

* `q=repository.name="geordi"` or `q=permission>"read"`
* `sort=user.display_name`

Note that the query parameter values need to be URL escaped so that `=`
would become `%3D`.
*/
func (a *Client) GetTeamsUsernamePermissionsRepositories(params *GetTeamsUsernamePermissionsRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernamePermissionsRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsUsernamePermissionsRepositoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsUsernamePermissionsRepositories",
		Method:             "GET",
		PathPattern:        "/teams/{username}/permissions/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsUsernamePermissionsRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsUsernamePermissionsRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsUsernamePermissionsRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTeamsUsernamePermissionsRepositoriesRepoSlug Returns an object for each repository permission of a given repository.

This endpoint has been deprecated, and you should use the new workspaces endpoint.
For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/)."

If the username URL parameter refers to a user account instead of
a team account, an object containing the repository permissions
of the username's repository will be returned.

Permissions returned are effective permissions — the highest level of
permission the user has. This does not include public repositories that
users are not granted any specific permission in, and does not
distinguish between direct and indirect privileges.

Only users with admin permission for the repository may access this resource.

Permissions can be:

* `admin`
* `write`
* `read`

Example:

```
$ curl https://api.bitbucket.org/2.0/teams/atlassian_tutorial/permissions/repositories/geordi

{
  "pagelen": 10,
  "values": [
    {
      "type": "repository_permission",
      "user": {
        "type": "user",
        "display_name": "Erik van Zijst",
        "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}"
      },
      "repository": {
        "type": "repository",
        "name": "geordi",
        "full_name": "bitbucket/geordi",
        "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
      },
      "permission": "admin"
    },
    {
      "type": "repository_permission",
      "user": {
        "type": "user",
        "display_name": "Sean Conaty",
        "uuid": "{504c3b62-8120-4f0c-a7bc-87800b9d6f70}"
      },
      "repository": {
        "type": "repository",
        "name": "geordi",
        "full_name": "bitbucket/geordi",
        "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
      },
      "permission": "write"
    }
  ],
  "page": 1,
  "size": 2
}
```

Results may be further [filtered or sorted](../../../../meta/filtering)
by user, or permission by adding the following query string parameters:

* `q=permission>"read"`
* `sort=user.display_name`

Note that the query parameter values need to be URL escaped so that `=`
would become `%3D`.
*/
func (a *Client) GetTeamsUsernamePermissionsRepositoriesRepoSlug(params *GetTeamsUsernamePermissionsRepositoriesRepoSlugParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsUsernamePermissionsRepositoriesRepoSlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsUsernamePermissionsRepositoriesRepoSlugParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsUsernamePermissionsRepositoriesRepoSlug",
		Method:             "GET",
		PathPattern:        "/teams/{username}/permissions/repositories/{repo_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsUsernamePermissionsRepositoriesRepoSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeamsUsernamePermissionsRepositoriesRepoSlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTeamsUsernamePermissionsRepositoriesRepoSlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserPermissionsTeams Returns an object for each team the caller is a member of, and their
effective role — the highest level of privilege the caller has. If a
user is a member of multiple groups with distinct roles, only the
highest level is returned.

Permissions can be:

* `admin`
* `collaborator`

Example:

```
$ curl https://api.bitbucket.org/2.0/user/permissions/teams

{
  "pagelen": 10,
  "values": [
    {
      "permission": "admin",
      "type": "team_permission",
      "user": {
        "type": "user",
        "nickname": "evzijst",
        "display_name": "Erik van Zijst",
        "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}"
      },
      "team": {
        "display_name": "Atlassian Bitbucket",
        "uuid": "{4cc6108a-a241-4db0-96a5-64347ac04f87}"
      }
    }
  ],
  "page": 1,
  "size": 1
}
```

Results may be further [filtered or sorted](../../../meta/filtering) by
team or permission by adding the following query string parameters:

* `q=team.uuid="{4cc6108a-a241-4db0-96a5-64347ac04f87}"` or `q=permission="admin"`
* `sort=team.display_name`

Note that the query parameter values need to be URL escaped so that `=`
would become `%3D`.
*/
func (a *Client) GetUserPermissionsTeams(params *GetUserPermissionsTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPermissionsTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPermissionsTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserPermissionsTeams",
		Method:             "GET",
		PathPattern:        "/user/permissions/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPermissionsTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPermissionsTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserPermissionsTeams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRepositoriesWorkspaceRepoSlugIssuesExport A POST request to this endpoint initiates a new background celery task that archives the repo's issues.

For example, you can run:

curl -u <username> -X POST http://api.bitbucket.org/2.0/repositories/<owner_username>/<repo_slug>/
issues/export

When the job has been accepted, it will return a 202 (Accepted) along with a unique url to this job in the
'Location' response header. This url is the endpoint for where the user can obtain their zip files."
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugIssuesExport(params *PostRepositoriesWorkspaceRepoSlugIssuesExportParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugIssuesExportAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugIssuesExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugIssuesExport",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/issues/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugIssuesExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesWorkspaceRepoSlugIssuesExportAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesWorkspaceRepoSlugIssuesExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRepositoriesWorkspaceRepoSlugIssuesImport A POST request to this endpoint will import the zip file given by the archive parameter into the repository. All
existing issues will be deleted and replaced by the contents of the imported zip file.

Imports are done through a multipart/form-data POST. There is one valid and required form field, with the name
"archive," which needs to be a file field:

```
$ curl -u <username> -X POST -F archive=@/path/to/file.zip https://api.bitbucket.org/2.0/repositories/<owner_username>/<repo_slug>/issues/import
```

When the import job is accepted, here is example output:

```
< HTTP/1.1 202 Accepted

{
    "type": "issue_job_status",
    "status": "ACCEPTED",
    "phase": "Attachments",
    "total": 15,
    "count": 0,
    "percent": 0
}
```
*/
func (a *Client) PostRepositoriesWorkspaceRepoSlugIssuesImport(params *PostRepositoriesWorkspaceRepoSlugIssuesImportParams, authInfo runtime.ClientAuthInfoWriter) (*PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRepositoriesWorkspaceRepoSlugIssuesImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRepositoriesWorkspaceRepoSlugIssuesImport",
		Method:             "POST",
		PathPattern:        "/repositories/{workspace}/{repo_slug}/issues/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRepositoriesWorkspaceRepoSlugIssuesImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepositoriesWorkspaceRepoSlugIssuesImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
