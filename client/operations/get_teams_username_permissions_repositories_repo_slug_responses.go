// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// GetTeamsUsernamePermissionsRepositoriesRepoSlugReader is a Reader for the GetTeamsUsernamePermissionsRepositoriesRepoSlug structure.
type GetTeamsUsernamePermissionsRepositoriesRepoSlugReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTeamsUsernamePermissionsRepositoriesRepoSlugOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTeamsUsernamePermissionsRepositoriesRepoSlugOK creates a GetTeamsUsernamePermissionsRepositoriesRepoSlugOK with default headers values
func NewGetTeamsUsernamePermissionsRepositoriesRepoSlugOK() *GetTeamsUsernamePermissionsRepositoriesRepoSlugOK {
	return &GetTeamsUsernamePermissionsRepositoriesRepoSlugOK{}
}

/*GetTeamsUsernamePermissionsRepositoriesRepoSlugOK handles this case with default header values.

List of repository's repository permissions.
*/
type GetTeamsUsernamePermissionsRepositoriesRepoSlugOK struct {
	Payload *models.PaginatedRepositoryPermissions
}

func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugOK) Error() string {
	return fmt.Sprintf("[GET /teams/{username}/permissions/repositories/{repo_slug}][%d] getTeamsUsernamePermissionsRepositoriesRepoSlugOK  %+v", 200, o.Payload)
}

func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugOK) GetPayload() *models.PaginatedRepositoryPermissions {
	return o.Payload
}

func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedRepositoryPermissions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden creates a GetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden with default headers values
func NewGetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden() *GetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden {
	return &GetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden{}
}

/*GetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden handles this case with default header values.

The requesting user isn't an admin of the repository.
*/
type GetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden struct {
	Payload *models.Error
}

func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden) Error() string {
	return fmt.Sprintf("[GET /teams/{username}/permissions/repositories/{repo_slug}][%d] getTeamsUsernamePermissionsRepositoriesRepoSlugForbidden  %+v", 403, o.Payload)
}

func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTeamsUsernamePermissionsRepositoriesRepoSlugForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
