// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mjpitz/go-bitbucket/models"
)

// PostRepositoriesWorkspaceRepoSlugIssuesImportReader is a Reader for the PostRepositoriesWorkspaceRepoSlugIssuesImport structure.
type PostRepositoriesWorkspaceRepoSlugIssuesImportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesImportAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesImportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesImportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostRepositoriesWorkspaceRepoSlugIssuesImportConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesImportAccepted creates a PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesImportAccepted() *PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted {
	return &PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted handles this case with default header values.

Import job accepted
*/
type PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted struct {
	Payload *models.IssueJobStatus
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/import][%d] postRepositoriesWorkspaceRepoSlugIssuesImportAccepted  %+v", 202, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted) GetPayload() *models.IssueJobStatus {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IssueJobStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized creates a PostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized() *PostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized {
	return &PostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized handles this case with default header values.

The request wasn't authenticated properly
*/
type PostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/import][%d] postRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesImportForbidden creates a PostRepositoriesWorkspaceRepoSlugIssuesImportForbidden with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesImportForbidden() *PostRepositoriesWorkspaceRepoSlugIssuesImportForbidden {
	return &PostRepositoriesWorkspaceRepoSlugIssuesImportForbidden{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesImportForbidden handles this case with default header values.

When the authenticated user does not have admin permission on the repo
*/
type PostRepositoriesWorkspaceRepoSlugIssuesImportForbidden struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportForbidden) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/import][%d] postRepositoriesWorkspaceRepoSlugIssuesImportForbidden  %+v", 403, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesImportNotFound creates a PostRepositoriesWorkspaceRepoSlugIssuesImportNotFound with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesImportNotFound() *PostRepositoriesWorkspaceRepoSlugIssuesImportNotFound {
	return &PostRepositoriesWorkspaceRepoSlugIssuesImportNotFound{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesImportNotFound handles this case with default header values.

No export job has begun
*/
type PostRepositoriesWorkspaceRepoSlugIssuesImportNotFound struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/import][%d] postRepositoriesWorkspaceRepoSlugIssuesImportNotFound  %+v", 404, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesImportConflict creates a PostRepositoriesWorkspaceRepoSlugIssuesImportConflict with default headers values
func NewPostRepositoriesWorkspaceRepoSlugIssuesImportConflict() *PostRepositoriesWorkspaceRepoSlugIssuesImportConflict {
	return &PostRepositoriesWorkspaceRepoSlugIssuesImportConflict{}
}

/*PostRepositoriesWorkspaceRepoSlugIssuesImportConflict handles this case with default header values.

Import already running
*/
type PostRepositoriesWorkspaceRepoSlugIssuesImportConflict struct {
	Payload *models.Error
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportConflict) Error() string {
	return fmt.Sprintf("[POST /repositories/{workspace}/{repo_slug}/issues/import][%d] postRepositoriesWorkspaceRepoSlugIssuesImportConflict  %+v", 409, o.Payload)
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRepositoriesWorkspaceRepoSlugIssuesImportConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
