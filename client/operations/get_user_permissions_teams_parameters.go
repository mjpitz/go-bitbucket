// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetUserPermissionsTeamsParams creates a new GetUserPermissionsTeamsParams object
// with the default values initialized.
func NewGetUserPermissionsTeamsParams() *GetUserPermissionsTeamsParams {
	var ()
	return &GetUserPermissionsTeamsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserPermissionsTeamsParamsWithTimeout creates a new GetUserPermissionsTeamsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUserPermissionsTeamsParamsWithTimeout(timeout time.Duration) *GetUserPermissionsTeamsParams {
	var ()
	return &GetUserPermissionsTeamsParams{

		timeout: timeout,
	}
}

// NewGetUserPermissionsTeamsParamsWithContext creates a new GetUserPermissionsTeamsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUserPermissionsTeamsParamsWithContext(ctx context.Context) *GetUserPermissionsTeamsParams {
	var ()
	return &GetUserPermissionsTeamsParams{

		Context: ctx,
	}
}

// NewGetUserPermissionsTeamsParamsWithHTTPClient creates a new GetUserPermissionsTeamsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUserPermissionsTeamsParamsWithHTTPClient(client *http.Client) *GetUserPermissionsTeamsParams {
	var ()
	return &GetUserPermissionsTeamsParams{
		HTTPClient: client,
	}
}

/*GetUserPermissionsTeamsParams contains all the parameters to send to the API endpoint
for the get user permissions teams operation typically these are written to a http.Request
*/
type GetUserPermissionsTeamsParams struct {

	/*Q

	Query string to narrow down the response as per
	[filtering and sorting](../../../meta/filtering).

	*/
	Q *string
	/*Sort

	Name of a response property sort the result by as per
	[filtering and sorting](../../../meta/filtering#query-sort).


	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get user permissions teams params
func (o *GetUserPermissionsTeamsParams) WithTimeout(timeout time.Duration) *GetUserPermissionsTeamsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user permissions teams params
func (o *GetUserPermissionsTeamsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user permissions teams params
func (o *GetUserPermissionsTeamsParams) WithContext(ctx context.Context) *GetUserPermissionsTeamsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user permissions teams params
func (o *GetUserPermissionsTeamsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user permissions teams params
func (o *GetUserPermissionsTeamsParams) WithHTTPClient(client *http.Client) *GetUserPermissionsTeamsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user permissions teams params
func (o *GetUserPermissionsTeamsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQ adds the q to the get user permissions teams params
func (o *GetUserPermissionsTeamsParams) WithQ(q *string) *GetUserPermissionsTeamsParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get user permissions teams params
func (o *GetUserPermissionsTeamsParams) SetQ(q *string) {
	o.Q = q
}

// WithSort adds the sort to the get user permissions teams params
func (o *GetUserPermissionsTeamsParams) WithSort(sort *string) *GetUserPermissionsTeamsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get user permissions teams params
func (o *GetUserPermissionsTeamsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserPermissionsTeamsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
