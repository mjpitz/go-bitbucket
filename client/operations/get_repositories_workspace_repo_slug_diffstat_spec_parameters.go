// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecParams creates a new GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams object
// with the default values initialized.
func NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecParams() *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecParamsWithTimeout creates a new GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecParamsWithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams{

		timeout: timeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecParamsWithContext creates a new GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecParamsWithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams{

		Context: ctx,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecParamsWithHTTPClient creates a new GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecParamsWithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams{
		HTTPClient: client,
	}
}

/*GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams contains all the parameters to send to the API endpoint
for the get repositories workspace repo slug diffstat spec operation typically these are written to a http.Request
*/
type GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams struct {

	/*IgnoreWhitespace
	  Generate diffs that ignore whitespace

	*/
	IgnoreWhitespace *bool
	/*Merge
	  If true, the source commit is merged into the
	destination commit, and then a diffstat from the
	destination to the merge result is returned. If false,
	a simple 'two dot' diffstat between the source and
	destination is returned. True if omitted.

	*/
	Merge *bool
	/*Path
	  Limit the diffstat to a particular file (this parameter
	can be repeated for multiple paths).

	*/
	Path *string
	/*Renames
	  Whether to perform rename detection, true if omitted.

	*/
	Renames *bool
	/*RepoSlug
	  This can either be the repository slug or the UUID of the repository,
	surrounded by curly-braces, for example: `{repository UUID}`.


	*/
	RepoSlug string
	/*Spec
	  A commit SHA (e.g. `3a8b42`) or a commit range using double dot
	notation (e.g. `3a8b42..9ff173`).


	*/
	Spec string
	/*Workspace
	  This can either be the workspace ID (slug) or the workspace UUID
	surrounded by curly-braces, for example: `{workspace UUID}`.


	*/
	Workspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIgnoreWhitespace adds the ignoreWhitespace to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WithIgnoreWhitespace(ignoreWhitespace *bool) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	o.SetIgnoreWhitespace(ignoreWhitespace)
	return o
}

// SetIgnoreWhitespace adds the ignoreWhitespace to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) SetIgnoreWhitespace(ignoreWhitespace *bool) {
	o.IgnoreWhitespace = ignoreWhitespace
}

// WithMerge adds the merge to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WithMerge(merge *bool) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	o.SetMerge(merge)
	return o
}

// SetMerge adds the merge to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) SetMerge(merge *bool) {
	o.Merge = merge
}

// WithPath adds the path to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WithPath(path *string) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) SetPath(path *string) {
	o.Path = path
}

// WithRenames adds the renames to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WithRenames(renames *bool) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	o.SetRenames(renames)
	return o
}

// SetRenames adds the renames to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) SetRenames(renames *bool) {
	o.Renames = renames
}

// WithRepoSlug adds the repoSlug to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WithRepoSlug(repoSlug string) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithSpec adds the spec to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WithSpec(spec string) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	o.SetSpec(spec)
	return o
}

// SetSpec adds the spec to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) SetSpec(spec string) {
	o.Spec = spec
}

// WithWorkspace adds the workspace to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WithWorkspace(workspace string) *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams {
	o.SetWorkspace(workspace)
	return o
}

// SetWorkspace adds the workspace to the get repositories workspace repo slug diffstat spec params
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) SetWorkspace(workspace string) {
	o.Workspace = workspace
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IgnoreWhitespace != nil {

		// query param ignore_whitespace
		var qrIgnoreWhitespace bool
		if o.IgnoreWhitespace != nil {
			qrIgnoreWhitespace = *o.IgnoreWhitespace
		}
		qIgnoreWhitespace := swag.FormatBool(qrIgnoreWhitespace)
		if qIgnoreWhitespace != "" {
			if err := r.SetQueryParam("ignore_whitespace", qIgnoreWhitespace); err != nil {
				return err
			}
		}

	}

	if o.Merge != nil {

		// query param merge
		var qrMerge bool
		if o.Merge != nil {
			qrMerge = *o.Merge
		}
		qMerge := swag.FormatBool(qrMerge)
		if qMerge != "" {
			if err := r.SetQueryParam("merge", qMerge); err != nil {
				return err
			}
		}

	}

	if o.Path != nil {

		// query param path
		var qrPath string
		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	if o.Renames != nil {

		// query param renames
		var qrRenames bool
		if o.Renames != nil {
			qrRenames = *o.Renames
		}
		qRenames := swag.FormatBool(qrRenames)
		if qRenames != "" {
			if err := r.SetQueryParam("renames", qRenames); err != nil {
				return err
			}
		}

	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	// path param spec
	if err := r.SetPathParam("spec", o.Spec); err != nil {
		return err
	}

	// path param workspace
	if err := r.SetPathParam("workspace", o.Workspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
