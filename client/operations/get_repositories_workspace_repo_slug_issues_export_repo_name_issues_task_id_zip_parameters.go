// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams creates a new GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams object
// with the default values initialized.
func NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams() *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParamsWithTimeout creates a new GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParamsWithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams{

		timeout: timeout,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParamsWithContext creates a new GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParamsWithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams{

		Context: ctx,
	}
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParamsWithHTTPClient creates a new GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParamsWithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	var ()
	return &GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams{
		HTTPClient: client,
	}
}

/*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams contains all the parameters to send to the API endpoint
for the get repositories workspace repo slug issues export repo name issues task ID zip operation typically these are written to a http.Request
*/
type GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams struct {

	/*RepoName
	  The name of the repo

	*/
	RepoName string
	/*RepoSlug
	  This can either be the repository slug or the UUID of the repository,
	surrounded by curly-braces, for example: `{repository UUID}`.


	*/
	RepoSlug string
	/*TaskID
	  The ID of the export task

	*/
	TaskID string
	/*Workspace
	  This can either be the workspace ID (slug) or the workspace UUID
	surrounded by curly-braces, for example: `{workspace UUID}`.


	*/
	Workspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) WithTimeout(timeout time.Duration) *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) WithContext(ctx context.Context) *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) WithHTTPClient(client *http.Client) *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRepoName adds the repoName to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) WithRepoName(repoName string) *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	o.SetRepoName(repoName)
	return o
}

// SetRepoName adds the repoName to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) SetRepoName(repoName string) {
	o.RepoName = repoName
}

// WithRepoSlug adds the repoSlug to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) WithRepoSlug(repoSlug string) *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	o.SetRepoSlug(repoSlug)
	return o
}

// SetRepoSlug adds the repoSlug to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) SetRepoSlug(repoSlug string) {
	o.RepoSlug = repoSlug
}

// WithTaskID adds the taskID to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) WithTaskID(taskID string) *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) SetTaskID(taskID string) {
	o.TaskID = taskID
}

// WithWorkspace adds the workspace to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) WithWorkspace(workspace string) *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams {
	o.SetWorkspace(workspace)
	return o
}

// SetWorkspace adds the workspace to the get repositories workspace repo slug issues export repo name issues task ID zip params
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) SetWorkspace(workspace string) {
	o.Workspace = workspace
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIDZipParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param repo_name
	if err := r.SetPathParam("repo_name", o.RepoName); err != nil {
		return err
	}

	// path param repo_slug
	if err := r.SetPathParam("repo_slug", o.RepoSlug); err != nil {
		return err
	}

	// path param task_id
	if err := r.SetPathParam("task_id", o.TaskID); err != nil {
		return err
	}

	// path param workspace
	if err := r.SetPathParam("workspace", o.Workspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
